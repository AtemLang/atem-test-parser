
// Generated from .\AtemParser.g4 by ANTLR 4.13.0


#include "AtemParserListener.h"

#include "AtemParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct AtemParserStaticData final {
  AtemParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  AtemParserStaticData(const AtemParserStaticData&) = delete;
  AtemParserStaticData(AtemParserStaticData&&) = delete;
  AtemParserStaticData& operator=(const AtemParserStaticData&) = delete;
  AtemParserStaticData& operator=(AtemParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag atemparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
AtemParserStaticData *atemparserParserStaticData = nullptr;

void atemparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (atemparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(atemparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<AtemParserStaticData>(
    std::vector<std::string>{
      "program", "statement", "statements", "declaration_statement_or_list", 
      "declaration_statement_list", "declaration_statement", "declarator", 
      "declare_operator", "empty_declare_operator", "declarator_name", "declaration_expression", 
      "test_declaration", "test_name", "struct_declaration", "class_declaration", 
      "extension_declaration", "udt_parameter_clause", "final_specifier", 
      "member_specifier", "member_specifiers", "extension_list", "extension_item", 
      "inherit_clause", "inherit_list", "inherit_item", "inherit_items", 
      "inherit_member_list", "inherit_member", "inherit_members", "inherit_type_override", 
      "inherit_variable_override", "inherit_constant_override", "inherit_function_override", 
      "inherit_initializer_override", "inherit_deinitializer_override", 
      "inherit_declarator", "empty_inherit_declarator", "inherit_name", 
      "impl_clause", "impl_list", "impl_item", "impl_items", "impl_with_clause", 
      "impl_member_list", "impl_member", "impl_members", "associated_type_impl", 
      "associated_variable_impl", "associated_constant_impl", "associated_function_impl", 
      "associated_initializer_impl", "associated_deinitializer_impl", "associated_declarator", 
      "empty_associated_declarator", "associated_name", "initializer_list", 
      "initializer_member_list", "initializer_member", "initializer_type", 
      "initializer_members", "deinitializer_list", "deinitializer_member_list", 
      "deinitializer_member", "deinitializer_type", "deinitializer_members", 
      "member_list", "member", "members", "member_nested_type", "nested_class", 
      "nested_struct", "nested_protocol", "nested_union", "nested_enum", 
      "member_type", "member_variable", "member_constant", "member_function", 
      "member_declarator", "member_name", "getter_and_setter_list", "getter_list", 
      "getter_and_setter_item", "getter_and_setter_items", "getter_declaration", 
      "getter_type", "setter_declaration", "setter_type", "setter_parameter_clause", 
      "setter_parameter", "setter_parameter_name", "protocol_declaration", 
      "protocol_extend_list", "protocol_requirement_list", "protocol_requirement_item", 
      "protocol_requirement_items", "protocol_requirement_type", "protocol_requirement_function", 
      "protocol_requirement_variable", "protocol_requirement_constant", 
      "protocol_requirement_initializer", "protocol_requirement_deinitializer", 
      "requirement_declarator", "empty_requirement_declarator", "requirement_name", 
      "requirement_default_clause", "requirement_getter_and_setter", "requirement_getter", 
      "requirement_getter_and_setter_item", "initializer_declaration", "deinitializer_declaration", 
      "union_declaration", "enum_declaration", "enumerator_list", "enumeration_item", 
      "enumerator", "enumerator_associated_value_clause", "enumerator_associated_value_list", 
      "enumerator_associated_value", "enumerator_associated_value_name", 
      "enumerator_representation", "enumerator_name", "import_alias_declaration", 
      "import_expression", "import_statement", "import_path_expression_list", 
      "import_path_expression", "import_path_expression_element", "import_element_list", 
      "import_kind", "project_declaration", "project_member_list", "project_member", 
      "project_members", "package_declaration", "package_member_list", "package_member", 
      "package_members", "module_declaration", "namespace_declaration", 
      "typealias_declaration", "access_level_specifier", "function_declaration", 
      "function_body", "contract_list", "contract", "contract_precondition", 
      "contract_postcondition", "return_value_name", "function_name", "function_type", 
      "function_specifier", "function_specifiers", "function_result", "function_parameter_clause", 
      "function_parameter_list", "function_parameter", "function_parameter_label", 
      "function_parameter_name", "default_argument_clause", "type_annotation", 
      "variable_declaration", "constant_declaration", "storage_level_specifier", 
      "closure_expression", "capture_list", "capture_list_items", "capture_list_item", 
      "defer_statement", "defer_kind", "code_block_no_label", "code_block", 
      "code_block_name", "attribute", "attributes", "attribute_name", "function_call_operator", 
      "function_call_argument_clause", "function_call_argument_list", "function_call_argument", 
      "argument_name", "argument_names", "trailing_closures", "labeled_trailing_closure", 
      "labeled_trailing_closures", "arithmetic_operator", "negation_operator", 
      "assignment_operator", "comparison_operator", "binary_boolean_operator", 
      "unary_boolean_operator", "binary_bit_operator", "unary_bit_operator", 
      "pointer_operator", "reflect_operator", "range_operator", "binary_optional_unwrapping_operator", 
      "unary_optional_unwrapping_operator", "arrow_operator", "try_operator", 
      "type_casting_operator", "await_operator", "async_operator", "pipeline_operator", 
      "array_index_operator", "expression", "code_block_expression", "require_clause", 
      "then_expression_or_block", "expression_or_block", "then_type_expression_or_block", 
      "type_expression_or_block", "if_expression", "while_expression", "repeat_while_expression", 
      "for_expression", "match_case", "match_case_label", "match_item_list", 
      "type_expression", "basic_type", "collection_type", "never_type", 
      "tuple_type", "tuple_type_element", "optional_type", "any_type", "some_type", 
      "static_array_type", "dynamic_array_type", "map_type", "set_type", 
      "const_type", "simple_type", "integer_type", "floating_point_type", 
      "boolean_type", "byte_type", "unit_type", "character_type", "string_type", 
      "comptime_type", "type_type", "tuple_expression", "tuple_element_list", 
      "tuple_element", "path_expression", "path_expression_element", "literal_expression", 
      "literal", "numeric_literal", "integer_literal", "floating_point_literal", 
      "boolean_literal", "null_literal", "undefined_literal", "default_literal", 
      "array_literal", "string_literal", "extended_string_literal", "static_string_literal", 
      "interpolated_string_literal", "pattern", "tuple_pattern_element_list", 
      "tuple_pattern_element", "wildcard_pattern", "identifier_pattern", 
      "value_binding_pattern", "tuple_pattern", "enumerator_pattern", "optional_pattern", 
      "expression_pattern"
    },
    std::vector<std::string>{
      "", "'abstract'", "'alias'", "'and'", "'any'", "'as'", "'asm'", "'assert'", 
      "'async'", "'at'", "'await'", "'Bool'", "'break'", "'Byte'", "'case'", 
      "'catch'", "'Char8'", "'Char16'", "'Char32'", "'class'", "'CompileTimeInt'", 
      "'CompileTimeFloat'", "'CompileTimeString'", "'CompileTimeChar'", 
      "'comptime'", "'concept'", "'const'", "'continue'", "'default'", "'defer'", 
      "'deinit'", "'delete'", "'do'", "'dyn'", "'else'", "'ensure'", "'enum'", 
      "'expect'", "'extend'", "'extern'", "'fail'", "'fallthrough'", "'false'", 
      "'filePrivate'", "'final'", "'Float16'", "'Float32'", "'Float64'", 
      "'Float80'", "'Float128'", "'for'", "'forward'", "'func'", "'get'", 
      "'global'", "'if'", "'impl'", "'import'", "'in'", "'inherit'", "'inline'", 
      "'init'", "'Int8'", "'Int16'", "'Int32'", "'Int64'", "'Int128'", "'internal'", 
      "'is'", "'lazy'", "'let'", "'match'", "'member'", "'module'", "'mutable'", 
      "'namespace'", "'new'", "'Never'", "'not'", "'null'", "'opaque'", 
      "'open'", "'operator'", "'or'", "'outer'", "'override'", "'package'", 
      "'private'", "'project'", "'protocol'", "'public'", "'pure'", "'recursive'", 
      "'reloc'", "'require'", "'repeat'", "'return'", "'self'", "'set'", 
      "'some'", "'static'", "'String'", "'struct'", "'success'", "'super'", 
      "'test'", "'then'", "'this'", "'threadLocal'", "'throw'", "'throws'", 
      "'true'", "'try'", "'type'", "'UInt8'", "'UInt16'", "'UInt32'", "'UInt64'", 
      "'UInt128'", "'undefined'", "'union'", "'Unit'", "'unreachable'", 
      "'use'", "'using'", "'val'", "'var'", "'virtual'", "'while'", "'with'", 
      "", "", "", "", "", "", "", "'{'", "'}'", "'('", "')'", "'['", "']'", 
      "'.'", "':'", "';'", "','", "'@'", "'\\u003F'", "'!'", "'_'", "'+'", 
      "'+&'", "'+|'", "'-'", "'-&'", "'-|'", "'*'", "'*&'", "'*|'", "'/'", 
      "'%'", "'**'", "'**&'", "'**|'", "'='", "'+='", "'+&='", "'+|='", 
      "'-='", "'-&='", "'-|='", "'*='", "'*&='", "'*|='", "'**='", "'**&='", 
      "'**|='", "'/='", "'%='", "'<<='", "'<<|='", "'>>='", "'&='", "'|='", 
      "'~='", "'>'", "'<'", "'>='", "'<='", "'!='", "'=='", "'<=>'", "'~'", 
      "'&'", "'|'", "'^^'", "'<<'", "'<<|'", "'>>'", "'.&'", "'.*'", "'.@'", 
      "'^'", "'#'", "'...'", "'..<'", "'<..'", "'<.<'", "'\\u003F\\u003F'", 
      "'->'", "'|>'", "'/>'"
    },
    std::vector<std::string>{
      "", "KeywordAbstract", "KeywordAlias", "KeywordAnd", "KeywordAny", 
      "KeywordAs", "KeywordAsm", "KeywordAssert", "KeywordAsync", "KeywordAt", 
      "KeywordAwait", "KeywordBool", "KeywordBreak", "KeywordByte", "KeywordCase", 
      "KeywordCatch", "KeywordChar8", "KeywordChar16", "KeywordChar32", 
      "KeywordClass", "KeywordCompileTimeInt", "KeywordCompileTimeFloat", 
      "KeywordCompileTimeString", "KeywordCompileTimeChar", "KeywordComptime", 
      "KeywordConcept", "KeywordConst", "KeywordContinue", "KeywordDefault", 
      "KeywordDefer", "KeywordDeinit", "KeywordDelete", "KeywordDo", "KeywordDyn", 
      "KeywordElse", "KeywordEnsure", "KeywordEnum", "KeywordExpect", "KeywordExtend", 
      "KeywordExtern", "KeywordFail", "KeywordFallthrough", "KeywordFalse", 
      "KeywordFilePrivate", "KeywordFinal", "KeywordFloat16", "KeywordFloat32", 
      "KeywordFloat64", "KeywordFloat80", "KeywordFloat128", "KeywordFor", 
      "KeywordForward", "KeywordFunc", "KeywordGet", "KeywordGlobal", "KeywordIf", 
      "KeywordImpl", "KeywordImport", "KeywordIn", "KeywordInherit", "KeywordInline", 
      "KeywordInit", "KeywordInt8", "KeywordInt16", "KeywordInt32", "KeywordInt64", 
      "KeywordInt128", "KeywordInternal", "KeywordIs", "KeywordLazy", "KeywordLet", 
      "KeywordMatch", "KeywordMember", "KeywordModule", "KeywordMutable", 
      "KeywordNamespace", "KeywordNew", "KeywordNever", "KeywordNot", "KeywordNull", 
      "KeywordOpaque", "KeywordOpen", "KeywordOperator", "KeywordOr", "KeywordOuter", 
      "KeywordOverride", "KeywordPackage", "KeywordPrivate", "KeywordProject", 
      "KeywordProtocol", "KeywordPublic", "KeywordPure", "KeywordRecursive", 
      "KeywordReloc", "KeywordRequire", "KeywordRepeat", "KeywordReturn", 
      "KeywordSelf", "KeywordSet", "KeywordSome", "KeywordStatic", "KeywordString", 
      "KeywordStruct", "KeywordSuccess", "KeywordSuper", "KeywordTest", 
      "KeywordThen", "KeywordThis", "KeywordThreadLocal", "KeywordThrow", 
      "KeywordThrows", "KeywordTrue", "KeywordTry", "KeywordType", "KeywordUInt8", 
      "KeywordUInt16", "KeywordUInt32", "KeywordUInt64", "KeywordUInt128", 
      "KeywordUndefined", "KeywordUnion", "KeywordUnit", "KeywordUnreachable", 
      "KeywordUse", "KeywordUsing", "KeywordVal", "KeywordVar", "KeywordVirtual", 
      "KeywordWhile", "KeywordWith", "Identifier", "BinaryLiteral", "OctalLiteral", 
      "DecimalDigits", "DecimalLiteral", "HexadecimalLiteral", "FloatingPointLiteral", 
      "LeftCurly", "RightCurly", "LeftParenthese", "RightParenthese", "LeftSquare", 
      "RightSquare", "Dot", "Colon", "Semicolon", "Comma", "At", "Question", 
      "Bang", "Underscore", "Add", "OverflowingAdd", "SaturatingAdd", "Sub", 
      "OverflowingSub", "SaturatingSub", "Mul", "OverflowingMul", "SaturatingMul", 
      "Divide", "RemainderDivide", "Power", "OverflowingPower", "SaturatingPower", 
      "Assign", "AddAssign", "OverflowingAddAssign", "SaturatingAddAssign", 
      "SubAssign", "OverflowingSubAssign", "SaturatingSubAssign", "MulAssign", 
      "OverflowingMulAssign", "SaturatingMulAssign", "PowerAssign", "OverflowingPowerAssign", 
      "SaturatingPowerAssign", "DivideAssign", "RemainderDivideAssign", 
      "BitLeftShiftAssign", "SaturatingBitLeftShiftAssign", "BitRightShiftAssign", 
      "BitAndAssign", "BitOrAssign", "BitNotAssign", "GreaterThan", "LessThan", 
      "GreaterThanOrEqual", "LessThanOrEqual", "NotEqual", "Equal", "ThreeWayComparison", 
      "BitNot", "BitAnd", "BitOr", "BitXor", "BitLeftShift", "SaturatingBitLeftShift", 
      "BitRightShift", "PointerType", "PointerDeref", "ObjectAddress", "Reflect", 
      "Reify", "ClosedRange", "RightOpenRange", "LeftOpenRange", "OpenedRange", 
      "DefaultUnwrapping", "Arrow", "PlaceholderPipeline", "LeftThreadingPipeline", 
      "OperatorHeadOther", "OperatorFollowingCharacter", "Whitespace", "Newline", 
      "LineComment", "InnerLineDocComment", "OuterLineDocComment", "BlockComment", 
      "InnerBlockComment", "OuterBlockComment", "BlockCommentOrDoc", "MultiLineExtendedStringOpen", 
      "SingleLineExtendedStringOpen", "MultiLineStringOpen", "SingleLineStringOpen", 
      "InterpolataionSingleLine", "SingleLineStringClose", "QuotedSingleLineText", 
      "InterpolataionMultiLine", "MultiLineStringClose", "QuotedMultiLineText", 
      "SingleLineExtendedStringClose", "QuotedSingleLineExtendedText", "MultiLineExtendedStringClose", 
      "QuotedMultiLineExtendedText"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,237,2477,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,
  	7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,
  	7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,
  	7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,
  	7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,
  	7,266,2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,1,0,
  	3,0,546,8,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,554,8,1,1,1,3,1,557,8,1,1,1,3,
  	1,560,8,1,1,2,4,2,563,8,2,11,2,12,2,564,1,3,1,3,3,3,569,8,3,1,4,1,4,1,
  	4,1,4,5,4,575,8,4,10,4,12,4,578,9,4,1,4,3,4,581,8,4,1,4,1,4,1,5,1,5,1,
  	5,1,6,3,6,589,8,6,1,6,3,6,592,8,6,1,6,1,6,1,6,1,7,1,7,3,7,599,8,7,1,7,
  	3,7,602,8,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,627,8,10,1,11,
  	1,11,3,11,631,8,11,1,11,3,11,634,8,11,1,11,1,11,1,12,1,12,1,13,1,13,3,
  	13,642,8,13,1,13,3,13,645,8,13,1,13,3,13,648,8,13,1,13,3,13,651,8,13,
  	1,13,3,13,654,8,13,1,13,3,13,657,8,13,1,13,1,13,1,14,1,14,3,14,663,8,
  	14,1,14,3,14,666,8,14,1,14,3,14,669,8,14,1,14,3,14,672,8,14,1,14,3,14,
  	675,8,14,1,14,3,14,678,8,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,686,8,
  	15,1,15,3,15,689,8,15,1,15,3,15,692,8,15,1,15,3,15,695,8,15,1,15,1,15,
  	1,16,1,16,3,16,701,8,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,4,19,710,8,
  	19,11,19,12,19,711,1,20,1,20,1,20,4,20,717,8,20,11,20,12,20,718,1,20,
  	1,20,1,21,1,21,3,21,725,8,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
  	3,23,735,8,23,1,24,1,24,3,24,739,8,24,1,25,4,25,742,8,25,11,25,12,25,
  	743,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,3,27,754,8,27,1,28,4,28,757,
  	8,28,11,28,12,28,758,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,769,
  	8,30,1,31,1,31,1,31,1,31,3,31,775,8,31,1,32,1,32,1,32,1,32,1,33,1,33,
  	1,33,1,33,1,34,1,34,1,34,1,34,1,35,3,35,790,8,35,1,35,3,35,793,8,35,1,
  	35,3,35,796,8,35,1,35,1,35,1,35,1,36,3,36,802,8,36,1,36,3,36,805,8,36,
  	1,36,3,36,808,8,36,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,
  	1,39,1,39,3,39,822,8,39,1,40,1,40,1,40,1,41,4,41,828,8,41,11,41,12,41,
  	829,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,3,44,843,8,
  	44,1,45,4,45,846,8,45,11,45,12,45,847,1,46,1,46,1,46,1,46,1,47,1,47,1,
  	47,1,47,3,47,858,8,47,1,48,1,48,1,48,1,48,3,48,864,8,48,1,49,1,49,1,49,
  	1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,3,52,879,8,52,1,52,
  	3,52,882,8,52,1,52,3,52,885,8,52,1,52,1,52,1,52,1,53,3,53,891,8,53,1,
  	53,3,53,894,8,53,1,53,3,53,897,8,53,1,53,1,53,1,54,1,54,1,55,1,55,1,55,
  	1,56,1,56,1,56,1,56,1,57,3,57,911,8,57,1,57,1,57,1,57,1,57,1,58,3,58,
  	918,8,58,1,58,3,58,921,8,58,1,58,3,58,924,8,58,1,59,4,59,927,8,59,11,
  	59,12,59,928,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,62,3,62,939,8,62,1,
  	62,1,62,1,62,1,62,1,63,3,63,946,8,63,1,63,3,63,949,8,63,1,63,3,63,952,
  	8,63,1,64,4,64,955,8,64,11,64,12,64,956,1,65,1,65,1,65,1,65,1,65,1,66,
  	1,66,1,66,1,66,1,66,3,66,969,8,66,1,67,4,67,972,8,67,11,67,12,67,973,
  	1,68,1,68,1,68,1,68,1,68,3,68,981,8,68,1,69,1,69,1,69,1,70,1,70,1,70,
  	1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,
  	1,75,3,75,1004,8,75,1,76,1,76,1,76,3,76,1009,8,76,1,77,1,77,1,77,1,78,
  	3,78,1015,8,78,1,78,3,78,1018,8,78,1,78,3,78,1021,8,78,1,78,1,78,1,78,
  	1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,82,1,82,
  	3,82,1040,8,82,1,83,4,83,1043,8,83,11,83,12,83,1044,1,84,3,84,1048,8,
  	84,1,84,1,84,1,84,1,84,1,84,1,85,3,85,1056,8,85,1,85,3,85,1059,8,85,1,
  	86,3,86,1062,8,86,1,86,1,86,1,86,1,86,1,86,1,87,3,87,1070,8,87,1,87,3,
  	87,1073,8,87,1,87,3,87,1076,8,87,1,88,1,88,1,88,1,88,1,89,1,89,1,89,3,
  	89,1085,8,89,1,90,1,90,1,91,1,91,3,91,1091,8,91,1,91,3,91,1094,8,91,1,
  	91,3,91,1097,8,91,1,91,3,91,1100,8,91,1,91,1,91,1,92,1,92,1,92,1,92,1,
  	93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1119,8,94,1,
  	95,4,95,1122,8,95,11,95,12,95,1123,1,96,1,96,1,96,1,96,1,96,1,96,3,96,
  	1132,8,96,1,97,1,97,1,97,3,97,1137,8,97,1,97,3,97,1140,8,97,1,97,1,97,
  	1,97,3,97,1145,8,97,1,98,1,98,1,98,3,98,1150,8,98,1,98,1,98,1,98,3,98,
  	1155,8,98,3,98,1157,8,98,1,99,1,99,1,99,3,99,1162,8,99,1,99,1,99,1,99,
  	3,99,1167,8,99,3,99,1169,8,99,1,100,1,100,1,100,1,100,1,100,3,100,1176,
  	8,100,1,101,1,101,1,101,1,101,1,101,3,101,1183,8,101,1,102,1,102,3,102,
  	1187,8,102,1,102,3,102,1190,8,102,1,102,3,102,1193,8,102,1,102,3,102,
  	1196,8,102,1,102,1,102,1,102,1,103,1,103,3,103,1203,8,103,1,103,3,103,
  	1206,8,103,1,103,3,103,1209,8,103,1,103,3,103,1212,8,103,1,103,1,103,
  	1,104,1,104,1,105,1,105,1,105,1,106,1,106,1,106,1,106,4,106,1225,8,106,
  	11,106,12,106,1226,1,106,1,106,1,106,1,107,1,107,1,107,1,107,1,108,1,
  	108,1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,1,111,1,111,3,111,
  	1248,8,111,1,111,3,111,1251,8,111,1,112,1,112,3,112,1255,8,112,1,112,
  	3,112,1258,8,112,1,112,3,112,1261,8,112,1,112,3,112,1264,8,112,1,112,
  	3,112,1267,8,112,1,112,3,112,1270,8,112,1,112,3,112,1273,8,112,1,112,
  	1,112,1,113,1,113,1,113,1,113,4,113,1281,8,113,11,113,12,113,1282,1,113,
  	3,113,1286,8,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,3,114,1295,
  	8,114,1,115,1,115,3,115,1299,8,115,1,115,3,115,1302,8,115,1,116,1,116,
  	1,116,3,116,1307,8,116,1,116,1,116,1,117,1,117,1,117,5,117,1314,8,117,
  	10,117,12,117,1317,9,117,1,118,3,118,1320,8,118,1,118,1,118,1,118,3,118,
  	1325,8,118,1,118,3,118,1328,8,118,1,119,1,119,1,120,1,120,1,120,1,121,
  	1,121,1,122,1,122,1,123,1,123,3,123,1341,8,123,1,123,3,123,1344,8,123,
  	1,123,1,123,1,124,1,124,3,124,1350,8,124,1,124,3,124,1353,8,124,1,124,
  	1,124,1,125,1,125,1,125,4,125,1360,8,125,11,125,12,125,1361,1,125,1,125,
  	3,125,1366,8,125,1,126,1,126,1,126,4,126,1371,8,126,11,126,12,126,1372,
  	1,126,1,126,3,126,1377,8,126,1,127,1,127,3,127,1381,8,127,1,128,1,128,
  	1,128,1,128,4,128,1387,8,128,11,128,12,128,1388,1,128,3,128,1392,8,128,
  	1,128,1,128,1,129,1,129,1,130,1,130,3,130,1400,8,130,1,130,1,130,1,131,
  	1,131,1,131,1,131,1,131,3,131,1409,8,131,1,132,1,132,1,133,4,133,1414,
  	8,133,11,133,12,133,1415,1,134,1,134,3,134,1420,8,134,1,134,1,134,1,135,
  	1,135,1,135,1,135,1,135,3,135,1429,8,135,1,136,1,136,1,137,4,137,1434,
  	8,137,11,137,12,137,1435,1,138,1,138,3,138,1440,8,138,1,138,1,138,3,138,
  	1444,8,138,1,138,3,138,1447,8,138,1,139,1,139,3,139,1451,8,139,1,139,
  	1,139,1,140,1,140,1,140,1,140,1,141,1,141,1,142,1,142,3,142,1463,8,142,
  	1,142,3,142,1466,8,142,1,142,1,142,1,143,1,143,3,143,1472,8,143,1,144,
  	1,144,1,144,4,144,1477,8,144,11,144,12,144,1478,1,144,1,144,1,144,1,144,
  	3,144,1485,8,144,1,145,1,145,3,145,1489,8,145,1,146,1,146,1,146,1,146,
  	3,146,1495,8,146,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
  	3,147,1506,8,147,1,148,1,148,1,149,1,149,1,150,1,150,1,150,3,150,1515,
  	8,150,1,150,3,150,1518,8,150,1,151,1,151,1,152,4,152,1523,8,152,11,152,
  	12,152,1524,1,153,1,153,3,153,1529,8,153,1,153,1,153,1,154,1,154,3,154,
  	1535,8,154,1,154,1,154,1,155,1,155,1,155,5,155,1542,8,155,10,155,12,155,
  	1545,9,155,1,156,3,156,1548,8,156,1,156,3,156,1551,8,156,1,156,1,156,
  	1,156,3,156,1556,8,156,1,156,3,156,1559,8,156,1,157,1,157,1,158,1,158,
  	1,159,1,159,1,159,1,160,3,160,1569,8,160,1,160,1,160,1,161,1,161,3,161,
  	1575,8,161,1,161,1,161,1,162,1,162,3,162,1581,8,162,1,162,1,162,1,163,
  	1,163,1,164,3,164,1588,8,164,1,164,3,164,1591,8,164,1,164,3,164,1594,
  	8,164,1,164,1,164,1,165,1,165,1,165,1,165,1,166,4,166,1603,8,166,11,166,
  	12,166,1604,1,167,1,167,1,168,1,168,3,168,1611,8,168,1,168,1,168,1,169,
  	1,169,1,170,1,170,3,170,1619,8,170,1,170,1,170,1,171,3,171,1624,8,171,
  	1,171,1,171,3,171,1628,8,171,1,171,1,171,1,172,1,172,1,172,1,173,1,173,
  	1,173,1,174,4,174,1639,8,174,11,174,12,174,1640,1,175,1,175,1,176,3,176,
  	1646,8,176,1,176,1,176,3,176,1650,8,176,1,177,1,177,3,177,1654,8,177,
  	1,177,1,177,1,178,1,178,1,178,5,178,1661,8,178,10,178,12,178,1664,9,178,
  	1,179,3,179,1667,8,179,1,179,1,179,3,179,1671,8,179,1,180,1,180,1,180,
  	1,181,4,181,1677,8,181,11,181,12,181,1678,1,182,1,182,4,182,1683,8,182,
  	11,182,12,182,1684,1,183,1,183,1,183,1,183,1,184,4,184,1692,8,184,11,
  	184,12,184,1693,1,185,1,185,1,186,1,186,1,187,1,187,1,188,1,188,1,189,
  	1,189,1,190,1,190,1,191,1,191,1,192,1,192,1,193,1,193,1,194,1,194,1,195,
  	1,195,1,196,1,196,1,197,1,197,1,198,1,198,1,199,1,199,3,199,1726,8,199,
  	1,200,1,200,1,200,3,200,1731,8,200,3,200,1733,8,200,1,201,1,201,1,202,
  	1,202,1,203,1,203,1,204,1,204,1,204,1,204,5,204,1745,8,204,10,204,12,
  	204,1748,9,204,1,204,3,204,1751,8,204,1,204,1,204,1,205,1,205,1,205,1,
  	205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
  	1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
  	1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
  	1,205,1,205,3,205,1796,8,205,1,205,1,205,3,205,1800,8,205,1,205,1,205,
  	3,205,1804,8,205,1,205,1,205,3,205,1808,8,205,1,205,1,205,1,205,1,205,
  	3,205,1814,8,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,3,205,1823,
  	8,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
  	1,205,3,205,1837,8,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
  	1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
  	1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
  	1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
  	1,205,1,205,1,205,1,205,1,205,1,205,1,205,5,205,1890,8,205,10,205,12,
  	205,1893,9,205,1,205,3,205,1896,8,205,3,205,1898,8,205,1,205,1,205,1,
  	205,3,205,1903,8,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
  	1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
  	1,205,4,205,1926,8,205,11,205,12,205,1927,1,205,1,205,1,205,1,205,1,205,
  	1,205,1,205,4,205,1937,8,205,11,205,12,205,1938,1,205,1,205,3,205,1943,
  	8,205,1,205,1,205,3,205,1947,8,205,5,205,1949,8,205,10,205,12,205,1952,
  	9,205,1,206,1,206,1,207,1,207,1,207,1,208,1,208,1,208,3,208,1962,8,208,
  	1,209,1,209,3,209,1966,8,209,1,210,1,210,1,210,3,210,1971,8,210,1,211,
  	1,211,3,211,1975,8,211,1,212,1,212,1,212,1,212,1,212,3,212,1982,8,212,
  	1,213,1,213,1,213,1,213,1,213,3,213,1989,8,213,1,213,1,213,3,213,1993,
  	8,213,1,214,1,214,1,214,1,214,1,214,3,214,2000,8,214,1,214,1,214,3,214,
  	2004,8,214,1,215,1,215,1,215,1,215,3,215,2010,8,215,1,215,1,215,3,215,
  	2014,8,215,1,215,1,215,1,215,3,215,2019,8,215,1,215,1,215,3,215,2023,
  	8,215,1,216,1,216,1,216,1,216,3,216,2029,8,216,1,217,3,217,2032,8,217,
  	1,217,1,217,1,218,1,218,3,218,2038,8,218,1,218,1,218,1,218,3,218,2043,
  	8,218,5,218,2045,8,218,10,218,12,218,2048,9,218,1,219,1,219,1,219,1,219,
  	1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
  	1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
  	3,219,2078,8,219,1,219,1,219,3,219,2082,8,219,1,219,1,219,3,219,2086,
  	8,219,1,219,1,219,3,219,2090,8,219,1,219,1,219,3,219,2094,8,219,1,219,
  	1,219,1,219,1,219,5,219,2100,8,219,10,219,12,219,2103,9,219,1,220,1,220,
  	1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,3,220,2116,8,220,
  	1,221,1,221,1,221,1,221,3,221,2122,8,221,1,222,1,222,1,223,1,223,1,223,
  	1,223,4,223,2130,8,223,11,223,12,223,2131,1,223,3,223,2135,8,223,3,223,
  	2137,8,223,1,223,1,223,1,224,3,224,2142,8,224,1,224,1,224,1,224,1,224,
  	3,224,2148,8,224,1,224,3,224,2151,8,224,1,225,1,225,1,225,1,226,1,226,
  	1,226,1,227,1,227,1,227,1,228,1,228,1,228,3,228,2165,8,228,1,228,1,228,
  	1,228,5,228,2170,8,228,10,228,12,228,2173,9,228,1,228,3,228,2176,8,228,
  	1,228,1,228,1,228,3,228,2181,8,228,1,229,1,229,1,229,1,229,3,229,2187,
  	8,229,1,230,1,230,1,230,3,230,2192,8,230,1,230,1,230,1,230,3,230,2197,
  	8,230,1,230,1,230,1,231,1,231,1,231,1,231,3,231,2205,8,231,1,231,1,231,
  	1,232,1,232,1,232,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,
  	2220,8,233,1,234,1,234,1,235,1,235,1,236,1,236,1,237,1,237,1,238,1,238,
  	1,239,1,239,1,240,1,240,1,241,1,241,1,242,1,242,1,243,1,243,1,243,1,243,
  	1,243,1,243,1,243,1,243,3,243,2248,8,243,1,244,1,244,1,244,5,244,2253,
  	8,244,10,244,12,244,2256,9,244,1,245,1,245,3,245,2260,8,245,1,245,1,245,
  	1,246,1,246,3,246,2266,8,246,1,246,1,246,1,246,5,246,2271,8,246,10,246,
  	12,246,2274,9,246,1,247,1,247,1,248,1,248,1,249,1,249,1,249,1,249,1,249,
  	1,249,1,249,3,249,2287,8,249,1,250,1,250,3,250,2291,8,250,1,251,1,251,
  	1,252,1,252,1,253,1,253,1,254,1,254,1,255,1,255,1,256,1,256,1,257,1,257,
  	1,257,1,257,5,257,2309,8,257,10,257,12,257,2312,9,257,1,257,3,257,2315,
  	8,257,3,257,2317,8,257,1,257,1,257,1,258,1,258,1,258,3,258,2324,8,258,
  	1,259,1,259,4,259,2328,8,259,11,259,12,259,2329,1,259,1,259,1,259,4,259,
  	2335,8,259,11,259,12,259,2336,1,259,3,259,2340,8,259,1,260,1,260,5,260,
  	2344,8,260,10,260,12,260,2347,9,260,1,260,1,260,1,260,5,260,2352,8,260,
  	10,260,12,260,2355,9,260,1,260,3,260,2358,8,260,1,261,1,261,1,261,1,261,
  	1,261,1,261,1,261,1,261,3,261,2368,8,261,1,261,1,261,5,261,2372,8,261,
  	10,261,12,261,2375,9,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,
  	261,1,261,3,261,2386,8,261,1,261,1,261,5,261,2390,8,261,10,261,12,261,
  	2393,9,261,1,261,3,261,2396,8,261,1,262,1,262,1,262,1,262,3,262,2402,
  	8,262,1,262,1,262,1,262,3,262,2407,8,262,1,262,1,262,1,262,3,262,2412,
  	8,262,1,262,1,262,1,262,1,262,1,262,1,262,3,262,2420,8,262,1,262,1,262,
  	1,262,5,262,2425,8,262,10,262,12,262,2428,9,262,1,263,1,263,1,263,5,263,
  	2433,8,263,10,263,12,263,2436,9,263,1,263,3,263,2439,8,263,1,264,1,264,
  	1,264,1,264,3,264,2445,8,264,1,265,1,265,1,266,1,266,1,267,1,267,1,267,
  	1,267,1,267,3,267,2456,8,267,1,268,1,268,3,268,2460,8,268,1,268,1,268,
  	1,269,3,269,2465,8,269,1,269,1,269,1,269,3,269,2470,8,269,1,270,1,270,
  	1,270,1,271,1,271,1,271,1,2272,3,410,438,524,272,0,2,4,6,8,10,12,14,16,
  	18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
  	64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
  	108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
  	144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
  	180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
  	216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
  	252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
  	288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
  	324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,
  	360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,
  	396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,
  	432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,
  	468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,
  	504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,
  	540,542,0,26,3,0,44,44,74,74,100,100,2,0,53,53,98,98,9,0,2,2,19,19,26,
  	26,36,36,52,52,74,74,89,89,102,102,120,120,5,0,43,43,67,67,81,81,87,87,
  	90,90,2,0,91,92,110,110,3,0,54,54,100,100,108,108,2,0,40,40,103,103,1,
  	0,151,164,1,0,154,155,1,0,165,185,1,0,186,192,2,0,3,3,83,83,2,0,194,195,
  	197,199,2,0,193,193,196,196,1,0,200,202,1,0,203,204,1,0,205,208,1,0,148,
  	149,1,0,211,212,2,0,62,66,114,118,1,0,45,49,1,0,16,18,1,0,20,23,7,0,73,
  	73,84,84,86,86,97,97,104,104,107,107,130,130,1,0,131,135,2,0,42,42,111,
  	111,2634,0,545,1,0,0,0,2,559,1,0,0,0,4,562,1,0,0,0,6,568,1,0,0,0,8,570,
  	1,0,0,0,10,584,1,0,0,0,12,588,1,0,0,0,14,596,1,0,0,0,16,605,1,0,0,0,18,
  	608,1,0,0,0,20,626,1,0,0,0,22,628,1,0,0,0,24,637,1,0,0,0,26,639,1,0,0,
  	0,28,660,1,0,0,0,30,681,1,0,0,0,32,698,1,0,0,0,34,704,1,0,0,0,36,706,
  	1,0,0,0,38,709,1,0,0,0,40,713,1,0,0,0,42,724,1,0,0,0,44,726,1,0,0,0,46,
  	734,1,0,0,0,48,736,1,0,0,0,50,741,1,0,0,0,52,745,1,0,0,0,54,753,1,0,0,
  	0,56,756,1,0,0,0,58,760,1,0,0,0,60,764,1,0,0,0,62,770,1,0,0,0,64,776,
  	1,0,0,0,66,780,1,0,0,0,68,784,1,0,0,0,70,789,1,0,0,0,72,801,1,0,0,0,74,
  	811,1,0,0,0,76,813,1,0,0,0,78,821,1,0,0,0,80,823,1,0,0,0,82,827,1,0,0,
  	0,84,831,1,0,0,0,86,834,1,0,0,0,88,842,1,0,0,0,90,845,1,0,0,0,92,849,
  	1,0,0,0,94,853,1,0,0,0,96,859,1,0,0,0,98,865,1,0,0,0,100,869,1,0,0,0,
  	102,873,1,0,0,0,104,878,1,0,0,0,106,890,1,0,0,0,108,900,1,0,0,0,110,902,
  	1,0,0,0,112,905,1,0,0,0,114,910,1,0,0,0,116,917,1,0,0,0,118,926,1,0,0,
  	0,120,930,1,0,0,0,122,933,1,0,0,0,124,938,1,0,0,0,126,945,1,0,0,0,128,
  	954,1,0,0,0,130,958,1,0,0,0,132,968,1,0,0,0,134,971,1,0,0,0,136,980,1,
  	0,0,0,138,982,1,0,0,0,140,985,1,0,0,0,142,988,1,0,0,0,144,991,1,0,0,0,
  	146,994,1,0,0,0,148,997,1,0,0,0,150,1000,1,0,0,0,152,1005,1,0,0,0,154,
  	1010,1,0,0,0,156,1014,1,0,0,0,158,1025,1,0,0,0,160,1027,1,0,0,0,162,1032,
  	1,0,0,0,164,1039,1,0,0,0,166,1042,1,0,0,0,168,1047,1,0,0,0,170,1055,1,
  	0,0,0,172,1061,1,0,0,0,174,1069,1,0,0,0,176,1077,1,0,0,0,178,1081,1,0,
  	0,0,180,1086,1,0,0,0,182,1088,1,0,0,0,184,1103,1,0,0,0,186,1107,1,0,0,
  	0,188,1118,1,0,0,0,190,1121,1,0,0,0,192,1125,1,0,0,0,194,1133,1,0,0,0,
  	196,1146,1,0,0,0,198,1158,1,0,0,0,200,1170,1,0,0,0,202,1177,1,0,0,0,204,
  	1184,1,0,0,0,206,1200,1,0,0,0,208,1215,1,0,0,0,210,1217,1,0,0,0,212,1220,
  	1,0,0,0,214,1231,1,0,0,0,216,1235,1,0,0,0,218,1237,1,0,0,0,220,1241,1,
  	0,0,0,222,1245,1,0,0,0,224,1252,1,0,0,0,226,1276,1,0,0,0,228,1294,1,0,
  	0,0,230,1296,1,0,0,0,232,1303,1,0,0,0,234,1310,1,0,0,0,236,1319,1,0,0,
  	0,238,1329,1,0,0,0,240,1331,1,0,0,0,242,1334,1,0,0,0,244,1336,1,0,0,0,
  	246,1338,1,0,0,0,248,1347,1,0,0,0,250,1365,1,0,0,0,252,1367,1,0,0,0,254,
  	1380,1,0,0,0,256,1382,1,0,0,0,258,1395,1,0,0,0,260,1397,1,0,0,0,262,1408,
  	1,0,0,0,264,1410,1,0,0,0,266,1413,1,0,0,0,268,1417,1,0,0,0,270,1428,1,
  	0,0,0,272,1430,1,0,0,0,274,1433,1,0,0,0,276,1446,1,0,0,0,278,1448,1,0,
  	0,0,280,1454,1,0,0,0,282,1458,1,0,0,0,284,1460,1,0,0,0,286,1471,1,0,0,
  	0,288,1484,1,0,0,0,290,1488,1,0,0,0,292,1490,1,0,0,0,294,1496,1,0,0,0,
  	296,1507,1,0,0,0,298,1509,1,0,0,0,300,1511,1,0,0,0,302,1519,1,0,0,0,304,
  	1522,1,0,0,0,306,1526,1,0,0,0,308,1532,1,0,0,0,310,1538,1,0,0,0,312,1547,
  	1,0,0,0,314,1560,1,0,0,0,316,1562,1,0,0,0,318,1564,1,0,0,0,320,1568,1,
  	0,0,0,322,1572,1,0,0,0,324,1578,1,0,0,0,326,1584,1,0,0,0,328,1587,1,0,
  	0,0,330,1597,1,0,0,0,332,1602,1,0,0,0,334,1606,1,0,0,0,336,1608,1,0,0,
  	0,338,1614,1,0,0,0,340,1616,1,0,0,0,342,1623,1,0,0,0,344,1631,1,0,0,0,
  	346,1634,1,0,0,0,348,1638,1,0,0,0,350,1642,1,0,0,0,352,1649,1,0,0,0,354,
  	1651,1,0,0,0,356,1657,1,0,0,0,358,1666,1,0,0,0,360,1672,1,0,0,0,362,1676,
  	1,0,0,0,364,1680,1,0,0,0,366,1686,1,0,0,0,368,1691,1,0,0,0,370,1695,1,
  	0,0,0,372,1697,1,0,0,0,374,1699,1,0,0,0,376,1701,1,0,0,0,378,1703,1,0,
  	0,0,380,1705,1,0,0,0,382,1707,1,0,0,0,384,1709,1,0,0,0,386,1711,1,0,0,
  	0,388,1713,1,0,0,0,390,1715,1,0,0,0,392,1717,1,0,0,0,394,1719,1,0,0,0,
  	396,1721,1,0,0,0,398,1723,1,0,0,0,400,1732,1,0,0,0,402,1734,1,0,0,0,404,
  	1736,1,0,0,0,406,1738,1,0,0,0,408,1740,1,0,0,0,410,1836,1,0,0,0,412,1953,
  	1,0,0,0,414,1955,1,0,0,0,416,1961,1,0,0,0,418,1965,1,0,0,0,420,1970,1,
  	0,0,0,422,1974,1,0,0,0,424,1976,1,0,0,0,426,1983,1,0,0,0,428,1994,1,0,
  	0,0,430,2005,1,0,0,0,432,2024,1,0,0,0,434,2031,1,0,0,0,436,2035,1,0,0,
  	0,438,2093,1,0,0,0,440,2115,1,0,0,0,442,2121,1,0,0,0,444,2123,1,0,0,0,
  	446,2125,1,0,0,0,448,2150,1,0,0,0,450,2152,1,0,0,0,452,2155,1,0,0,0,454,
  	2158,1,0,0,0,456,2161,1,0,0,0,458,2182,1,0,0,0,460,2188,1,0,0,0,462,2200,
  	1,0,0,0,464,2208,1,0,0,0,466,2219,1,0,0,0,468,2221,1,0,0,0,470,2223,1,
  	0,0,0,472,2225,1,0,0,0,474,2227,1,0,0,0,476,2229,1,0,0,0,478,2231,1,0,
  	0,0,480,2233,1,0,0,0,482,2235,1,0,0,0,484,2237,1,0,0,0,486,2247,1,0,0,
  	0,488,2249,1,0,0,0,490,2259,1,0,0,0,492,2265,1,0,0,0,494,2275,1,0,0,0,
  	496,2277,1,0,0,0,498,2286,1,0,0,0,500,2290,1,0,0,0,502,2292,1,0,0,0,504,
  	2294,1,0,0,0,506,2296,1,0,0,0,508,2298,1,0,0,0,510,2300,1,0,0,0,512,2302,
  	1,0,0,0,514,2304,1,0,0,0,516,2323,1,0,0,0,518,2339,1,0,0,0,520,2357,1,
  	0,0,0,522,2395,1,0,0,0,524,2419,1,0,0,0,526,2429,1,0,0,0,528,2444,1,0,
  	0,0,530,2446,1,0,0,0,532,2448,1,0,0,0,534,2455,1,0,0,0,536,2457,1,0,0,
  	0,538,2464,1,0,0,0,540,2471,1,0,0,0,542,2474,1,0,0,0,544,546,3,4,2,0,
  	545,544,1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,548,5,0,0,1,548,1,
  	1,0,0,0,549,554,3,10,5,0,550,554,3,248,124,0,551,554,3,336,168,0,552,
  	554,3,410,205,0,553,549,1,0,0,0,553,550,1,0,0,0,553,551,1,0,0,0,553,552,
  	1,0,0,0,554,556,1,0,0,0,555,557,5,145,0,0,556,555,1,0,0,0,556,557,1,0,
  	0,0,557,560,1,0,0,0,558,560,5,145,0,0,559,553,1,0,0,0,559,558,1,0,0,0,
  	560,3,1,0,0,0,561,563,3,2,1,0,562,561,1,0,0,0,563,564,1,0,0,0,564,562,
  	1,0,0,0,564,565,1,0,0,0,565,5,1,0,0,0,566,569,3,10,5,0,567,569,3,8,4,
  	0,568,566,1,0,0,0,568,567,1,0,0,0,569,7,1,0,0,0,570,571,5,137,0,0,571,
  	576,3,10,5,0,572,573,5,146,0,0,573,575,3,10,5,0,574,572,1,0,0,0,575,578,
  	1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,580,1,0,0,0,578,576,1,0,0,
  	0,579,581,5,146,0,0,580,579,1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,0,582,
  	583,5,138,0,0,583,9,1,0,0,0,584,585,3,12,6,0,585,586,3,20,10,0,586,11,
  	1,0,0,0,587,589,3,282,141,0,588,587,1,0,0,0,588,589,1,0,0,0,589,591,1,
  	0,0,0,590,592,3,326,163,0,591,590,1,0,0,0,591,592,1,0,0,0,592,593,1,0,
  	0,0,593,594,3,18,9,0,594,595,3,14,7,0,595,13,1,0,0,0,596,601,5,144,0,
  	0,597,599,3,348,174,0,598,597,1,0,0,0,598,599,1,0,0,0,599,600,1,0,0,0,
  	600,602,3,438,219,0,601,598,1,0,0,0,601,602,1,0,0,0,602,603,1,0,0,0,603,
  	604,5,165,0,0,604,15,1,0,0,0,605,606,5,144,0,0,606,607,5,165,0,0,607,
  	17,1,0,0,0,608,609,3,492,246,0,609,19,1,0,0,0,610,627,3,268,134,0,611,
  	627,3,260,130,0,612,627,3,276,138,0,613,627,3,278,139,0,614,627,3,284,
  	142,0,615,627,3,322,161,0,616,627,3,324,162,0,617,627,3,244,122,0,618,
  	627,3,280,140,0,619,627,3,26,13,0,620,627,3,28,14,0,621,627,3,182,91,
  	0,622,627,3,222,111,0,623,627,3,224,112,0,624,627,3,30,15,0,625,627,3,
  	22,11,0,626,610,1,0,0,0,626,611,1,0,0,0,626,612,1,0,0,0,626,613,1,0,0,
  	0,626,614,1,0,0,0,626,615,1,0,0,0,626,616,1,0,0,0,626,617,1,0,0,0,626,
  	618,1,0,0,0,626,619,1,0,0,0,626,620,1,0,0,0,626,621,1,0,0,0,626,622,1,
  	0,0,0,626,623,1,0,0,0,626,624,1,0,0,0,626,625,1,0,0,0,627,21,1,0,0,0,
  	628,630,5,105,0,0,629,631,3,348,174,0,630,629,1,0,0,0,630,631,1,0,0,0,
  	631,633,1,0,0,0,632,634,3,24,12,0,633,632,1,0,0,0,633,634,1,0,0,0,634,
  	635,1,0,0,0,635,636,3,340,170,0,636,23,1,0,0,0,637,638,3,516,258,0,638,
  	25,1,0,0,0,639,641,5,102,0,0,640,642,3,32,16,0,641,640,1,0,0,0,641,642,
  	1,0,0,0,642,644,1,0,0,0,643,645,3,348,174,0,644,643,1,0,0,0,644,645,1,
  	0,0,0,645,647,1,0,0,0,646,648,3,34,17,0,647,646,1,0,0,0,647,648,1,0,0,
  	0,648,650,1,0,0,0,649,651,3,40,20,0,650,649,1,0,0,0,650,651,1,0,0,0,651,
  	653,1,0,0,0,652,654,3,110,55,0,653,652,1,0,0,0,653,654,1,0,0,0,654,656,
  	1,0,0,0,655,657,3,120,60,0,656,655,1,0,0,0,656,657,1,0,0,0,657,658,1,
  	0,0,0,658,659,3,130,65,0,659,27,1,0,0,0,660,662,5,19,0,0,661,663,3,32,
  	16,0,662,661,1,0,0,0,662,663,1,0,0,0,663,665,1,0,0,0,664,666,3,348,174,
  	0,665,664,1,0,0,0,665,666,1,0,0,0,666,668,1,0,0,0,667,669,3,34,17,0,668,
  	667,1,0,0,0,668,669,1,0,0,0,669,671,1,0,0,0,670,672,3,40,20,0,671,670,
  	1,0,0,0,671,672,1,0,0,0,672,674,1,0,0,0,673,675,3,110,55,0,674,673,1,
  	0,0,0,674,675,1,0,0,0,675,677,1,0,0,0,676,678,3,120,60,0,677,676,1,0,
  	0,0,677,678,1,0,0,0,678,679,1,0,0,0,679,680,3,130,65,0,680,29,1,0,0,0,
  	681,682,5,38,0,0,682,683,3,492,246,0,683,685,5,129,0,0,684,686,3,348,
  	174,0,685,684,1,0,0,0,685,686,1,0,0,0,686,688,1,0,0,0,687,689,3,40,20,
  	0,688,687,1,0,0,0,688,689,1,0,0,0,689,691,1,0,0,0,690,692,3,110,55,0,
  	691,690,1,0,0,0,691,692,1,0,0,0,692,694,1,0,0,0,693,695,3,120,60,0,694,
  	693,1,0,0,0,694,695,1,0,0,0,695,696,1,0,0,0,696,697,3,130,65,0,697,31,
  	1,0,0,0,698,700,5,139,0,0,699,701,3,310,155,0,700,699,1,0,0,0,700,701,
  	1,0,0,0,701,702,1,0,0,0,702,703,5,140,0,0,703,33,1,0,0,0,704,705,5,44,
  	0,0,705,35,1,0,0,0,706,707,7,0,0,0,707,37,1,0,0,0,708,710,3,36,18,0,709,
  	708,1,0,0,0,710,711,1,0,0,0,711,709,1,0,0,0,711,712,1,0,0,0,712,39,1,
  	0,0,0,713,714,5,38,0,0,714,716,5,137,0,0,715,717,3,42,21,0,716,715,1,
  	0,0,0,717,718,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,
  	720,721,5,138,0,0,721,41,1,0,0,0,722,725,3,44,22,0,723,725,3,76,38,0,
  	724,722,1,0,0,0,724,723,1,0,0,0,725,43,1,0,0,0,726,727,5,59,0,0,727,728,
  	3,46,23,0,728,45,1,0,0,0,729,730,5,137,0,0,730,731,3,50,25,0,731,732,
  	5,138,0,0,732,735,1,0,0,0,733,735,3,48,24,0,734,729,1,0,0,0,734,733,1,
  	0,0,0,735,47,1,0,0,0,736,738,3,492,246,0,737,739,3,52,26,0,738,737,1,
  	0,0,0,738,739,1,0,0,0,739,49,1,0,0,0,740,742,3,48,24,0,741,740,1,0,0,
  	0,742,743,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,51,1,0,0,0,745,
  	746,5,137,0,0,746,747,3,56,28,0,747,748,5,138,0,0,748,53,1,0,0,0,749,
  	754,3,58,29,0,750,754,3,60,30,0,751,754,3,62,31,0,752,754,3,64,32,0,753,
  	749,1,0,0,0,753,750,1,0,0,0,753,751,1,0,0,0,753,752,1,0,0,0,754,55,1,
  	0,0,0,755,757,3,54,27,0,756,755,1,0,0,0,757,758,1,0,0,0,758,756,1,0,0,
  	0,758,759,1,0,0,0,759,57,1,0,0,0,760,761,5,85,0,0,761,762,3,70,35,0,762,
  	763,3,280,140,0,763,59,1,0,0,0,764,765,5,85,0,0,765,766,3,70,35,0,766,
  	768,3,322,161,0,767,769,3,160,80,0,768,767,1,0,0,0,768,769,1,0,0,0,769,
  	61,1,0,0,0,770,771,5,85,0,0,771,772,3,70,35,0,772,774,3,324,162,0,773,
  	775,3,162,81,0,774,773,1,0,0,0,774,775,1,0,0,0,775,63,1,0,0,0,776,777,
  	5,85,0,0,777,778,3,70,35,0,778,779,3,284,142,0,779,65,1,0,0,0,780,781,
  	5,85,0,0,781,782,3,72,36,0,782,783,3,218,109,0,783,67,1,0,0,0,784,785,
  	5,85,0,0,785,786,3,72,36,0,786,787,3,220,110,0,787,69,1,0,0,0,788,790,
  	3,282,141,0,789,788,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,793,3,
  	326,163,0,792,791,1,0,0,0,792,793,1,0,0,0,793,795,1,0,0,0,794,796,3,38,
  	19,0,795,794,1,0,0,0,795,796,1,0,0,0,796,797,1,0,0,0,797,798,3,74,37,
  	0,798,799,3,14,7,0,799,71,1,0,0,0,800,802,3,282,141,0,801,800,1,0,0,0,
  	801,802,1,0,0,0,802,804,1,0,0,0,803,805,3,326,163,0,804,803,1,0,0,0,804,
  	805,1,0,0,0,805,807,1,0,0,0,806,808,3,38,19,0,807,806,1,0,0,0,807,808,
  	1,0,0,0,808,809,1,0,0,0,809,810,3,16,8,0,810,73,1,0,0,0,811,812,5,130,
  	0,0,812,75,1,0,0,0,813,814,5,56,0,0,814,815,3,78,39,0,815,77,1,0,0,0,
  	816,817,5,137,0,0,817,818,3,82,41,0,818,819,5,138,0,0,819,822,1,0,0,0,
  	820,822,3,80,40,0,821,816,1,0,0,0,821,820,1,0,0,0,822,79,1,0,0,0,823,
  	824,3,492,246,0,824,825,3,84,42,0,825,81,1,0,0,0,826,828,3,80,40,0,827,
  	826,1,0,0,0,828,829,1,0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,83,1,
  	0,0,0,831,832,5,129,0,0,832,833,3,86,43,0,833,85,1,0,0,0,834,835,5,137,
  	0,0,835,836,3,90,45,0,836,837,5,138,0,0,837,87,1,0,0,0,838,843,3,92,46,
  	0,839,843,3,94,47,0,840,843,3,96,48,0,841,843,3,98,49,0,842,838,1,0,0,
  	0,842,839,1,0,0,0,842,840,1,0,0,0,842,841,1,0,0,0,843,89,1,0,0,0,844,
  	846,3,88,44,0,845,844,1,0,0,0,846,847,1,0,0,0,847,845,1,0,0,0,847,848,
  	1,0,0,0,848,91,1,0,0,0,849,850,5,94,0,0,850,851,3,104,52,0,851,852,3,
  	280,140,0,852,93,1,0,0,0,853,854,5,94,0,0,854,855,3,104,52,0,855,857,
  	3,322,161,0,856,858,3,160,80,0,857,856,1,0,0,0,857,858,1,0,0,0,858,95,
  	1,0,0,0,859,860,5,94,0,0,860,861,3,104,52,0,861,863,3,324,162,0,862,864,
  	3,162,81,0,863,862,1,0,0,0,863,864,1,0,0,0,864,97,1,0,0,0,865,866,5,94,
  	0,0,866,867,3,104,52,0,867,868,3,284,142,0,868,99,1,0,0,0,869,870,5,94,
  	0,0,870,871,3,16,8,0,871,872,3,218,109,0,872,101,1,0,0,0,873,874,5,94,
  	0,0,874,875,3,16,8,0,875,876,3,220,110,0,876,103,1,0,0,0,877,879,3,282,
  	141,0,878,877,1,0,0,0,878,879,1,0,0,0,879,881,1,0,0,0,880,882,3,326,163,
  	0,881,880,1,0,0,0,881,882,1,0,0,0,882,884,1,0,0,0,883,885,3,38,19,0,884,
  	883,1,0,0,0,884,885,1,0,0,0,885,886,1,0,0,0,886,887,3,108,54,0,887,888,
  	3,14,7,0,888,105,1,0,0,0,889,891,3,282,141,0,890,889,1,0,0,0,890,891,
  	1,0,0,0,891,893,1,0,0,0,892,894,3,326,163,0,893,892,1,0,0,0,893,894,1,
  	0,0,0,894,896,1,0,0,0,895,897,3,38,19,0,896,895,1,0,0,0,896,897,1,0,0,
  	0,897,898,1,0,0,0,898,899,3,16,8,0,899,107,1,0,0,0,900,901,5,130,0,0,
  	901,109,1,0,0,0,902,903,5,61,0,0,903,904,3,112,56,0,904,111,1,0,0,0,905,
  	906,5,137,0,0,906,907,3,118,59,0,907,908,5,138,0,0,908,113,1,0,0,0,909,
  	911,3,38,19,0,910,909,1,0,0,0,910,911,1,0,0,0,911,912,1,0,0,0,912,913,
  	3,16,8,0,913,914,3,116,58,0,914,915,3,286,143,0,915,115,1,0,0,0,916,918,
  	3,308,154,0,917,916,1,0,0,0,917,918,1,0,0,0,918,920,1,0,0,0,919,921,3,
  	304,152,0,920,919,1,0,0,0,920,921,1,0,0,0,921,923,1,0,0,0,922,924,3,288,
  	144,0,923,922,1,0,0,0,923,924,1,0,0,0,924,117,1,0,0,0,925,927,3,114,57,
  	0,926,925,1,0,0,0,927,928,1,0,0,0,928,926,1,0,0,0,928,929,1,0,0,0,929,
  	119,1,0,0,0,930,931,5,30,0,0,931,932,3,122,61,0,932,121,1,0,0,0,933,934,
  	5,137,0,0,934,935,3,128,64,0,935,936,5,138,0,0,936,123,1,0,0,0,937,939,
  	3,38,19,0,938,937,1,0,0,0,938,939,1,0,0,0,939,940,1,0,0,0,940,941,3,16,
  	8,0,941,942,3,126,63,0,942,943,3,286,143,0,943,125,1,0,0,0,944,946,3,
  	308,154,0,945,944,1,0,0,0,945,946,1,0,0,0,946,948,1,0,0,0,947,949,3,304,
  	152,0,948,947,1,0,0,0,948,949,1,0,0,0,949,951,1,0,0,0,950,952,3,288,144,
  	0,951,950,1,0,0,0,951,952,1,0,0,0,952,127,1,0,0,0,953,955,3,124,62,0,
  	954,953,1,0,0,0,955,956,1,0,0,0,956,954,1,0,0,0,956,957,1,0,0,0,957,129,
  	1,0,0,0,958,959,5,72,0,0,959,960,5,137,0,0,960,961,3,134,67,0,961,962,
  	5,138,0,0,962,131,1,0,0,0,963,969,3,148,74,0,964,969,3,150,75,0,965,969,
  	3,152,76,0,966,969,3,154,77,0,967,969,3,136,68,0,968,963,1,0,0,0,968,
  	964,1,0,0,0,968,965,1,0,0,0,968,966,1,0,0,0,968,967,1,0,0,0,969,133,1,
  	0,0,0,970,972,3,132,66,0,971,970,1,0,0,0,972,973,1,0,0,0,973,971,1,0,
  	0,0,973,974,1,0,0,0,974,135,1,0,0,0,975,981,3,138,69,0,976,981,3,140,
  	70,0,977,981,3,142,71,0,978,981,3,144,72,0,979,981,3,146,73,0,980,975,
  	1,0,0,0,980,976,1,0,0,0,980,977,1,0,0,0,980,978,1,0,0,0,980,979,1,0,0,
  	0,981,137,1,0,0,0,982,983,3,156,78,0,983,984,3,28,14,0,984,139,1,0,0,
  	0,985,986,3,156,78,0,986,987,3,26,13,0,987,141,1,0,0,0,988,989,3,156,
  	78,0,989,990,3,182,91,0,990,143,1,0,0,0,991,992,3,156,78,0,992,993,3,
  	222,111,0,993,145,1,0,0,0,994,995,3,156,78,0,995,996,3,224,112,0,996,
  	147,1,0,0,0,997,998,3,156,78,0,998,999,3,280,140,0,999,149,1,0,0,0,1000,
  	1001,3,156,78,0,1001,1003,3,322,161,0,1002,1004,3,160,80,0,1003,1002,
  	1,0,0,0,1003,1004,1,0,0,0,1004,151,1,0,0,0,1005,1006,3,156,78,0,1006,
  	1008,3,324,162,0,1007,1009,3,162,81,0,1008,1007,1,0,0,0,1008,1009,1,0,
  	0,0,1009,153,1,0,0,0,1010,1011,3,156,78,0,1011,1012,3,284,142,0,1012,
  	155,1,0,0,0,1013,1015,3,282,141,0,1014,1013,1,0,0,0,1014,1015,1,0,0,0,
  	1015,1017,1,0,0,0,1016,1018,3,326,163,0,1017,1016,1,0,0,0,1017,1018,1,
  	0,0,0,1018,1020,1,0,0,0,1019,1021,3,38,19,0,1020,1019,1,0,0,0,1020,1021,
  	1,0,0,0,1021,1022,1,0,0,0,1022,1023,3,158,79,0,1023,1024,3,14,7,0,1024,
  	157,1,0,0,0,1025,1026,5,130,0,0,1026,159,1,0,0,0,1027,1028,5,129,0,0,
  	1028,1029,5,137,0,0,1029,1030,3,166,83,0,1030,1031,5,138,0,0,1031,161,
  	1,0,0,0,1032,1033,5,129,0,0,1033,1034,5,137,0,0,1034,1035,3,168,84,0,
  	1035,1036,5,138,0,0,1036,163,1,0,0,0,1037,1040,3,168,84,0,1038,1040,3,
  	172,86,0,1039,1037,1,0,0,0,1039,1038,1,0,0,0,1040,165,1,0,0,0,1041,1043,
  	3,164,82,0,1042,1041,1,0,0,0,1043,1044,1,0,0,0,1044,1042,1,0,0,0,1044,
  	1045,1,0,0,0,1045,167,1,0,0,0,1046,1048,3,38,19,0,1047,1046,1,0,0,0,1047,
  	1048,1,0,0,0,1048,1049,1,0,0,0,1049,1050,3,16,8,0,1050,1051,5,53,0,0,
  	1051,1052,3,170,85,0,1052,1053,3,286,143,0,1053,169,1,0,0,0,1054,1056,
  	3,304,152,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,1058,1,0,0,0,1057,
  	1059,3,288,144,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,171,1,0,0,0,
  	1060,1062,3,38,19,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,
  	0,0,1063,1064,3,16,8,0,1064,1065,5,98,0,0,1065,1066,3,174,87,0,1066,1067,
  	3,286,143,0,1067,173,1,0,0,0,1068,1070,3,176,88,0,1069,1068,1,0,0,0,1069,
  	1070,1,0,0,0,1070,1072,1,0,0,0,1071,1073,3,304,152,0,1072,1071,1,0,0,
  	0,1072,1073,1,0,0,0,1073,1075,1,0,0,0,1074,1076,3,288,144,0,1075,1074,
  	1,0,0,0,1075,1076,1,0,0,0,1076,175,1,0,0,0,1077,1078,5,139,0,0,1078,1079,
  	3,178,89,0,1079,1080,5,140,0,0,1080,177,1,0,0,0,1081,1084,3,180,90,0,
  	1082,1083,5,144,0,0,1083,1085,3,320,160,0,1084,1082,1,0,0,0,1084,1085,
  	1,0,0,0,1085,179,1,0,0,0,1086,1087,5,130,0,0,1087,181,1,0,0,0,1088,1090,
  	5,89,0,0,1089,1091,3,32,16,0,1090,1089,1,0,0,0,1090,1091,1,0,0,0,1091,
  	1093,1,0,0,0,1092,1094,3,348,174,0,1093,1092,1,0,0,0,1093,1094,1,0,0,
  	0,1094,1096,1,0,0,0,1095,1097,3,34,17,0,1096,1095,1,0,0,0,1096,1097,1,
  	0,0,0,1097,1099,1,0,0,0,1098,1100,3,184,92,0,1099,1098,1,0,0,0,1099,1100,
  	1,0,0,0,1100,1101,1,0,0,0,1101,1102,3,186,93,0,1102,183,1,0,0,0,1103,
  	1104,5,38,0,0,1104,1105,5,137,0,0,1105,1106,5,138,0,0,1106,185,1,0,0,
  	0,1107,1108,5,72,0,0,1108,1109,5,137,0,0,1109,1110,3,190,95,0,1110,1111,
  	5,138,0,0,1111,187,1,0,0,0,1112,1119,3,192,96,0,1113,1119,3,194,97,0,
  	1114,1119,3,196,98,0,1115,1119,3,198,99,0,1116,1119,3,200,100,0,1117,
  	1119,3,202,101,0,1118,1112,1,0,0,0,1118,1113,1,0,0,0,1118,1114,1,0,0,
  	0,1118,1115,1,0,0,0,1118,1116,1,0,0,0,1118,1117,1,0,0,0,1119,189,1,0,
  	0,0,1120,1122,3,188,94,0,1121,1120,1,0,0,0,1122,1123,1,0,0,0,1123,1121,
  	1,0,0,0,1123,1124,1,0,0,0,1124,191,1,0,0,0,1125,1126,3,204,102,0,1126,
  	1127,5,2,0,0,1127,1131,5,113,0,0,1128,1129,3,210,105,0,1129,1130,3,438,
  	219,0,1130,1132,1,0,0,0,1131,1128,1,0,0,0,1131,1132,1,0,0,0,1132,193,
  	1,0,0,0,1133,1134,3,204,102,0,1134,1136,5,52,0,0,1135,1137,3,348,174,
  	0,1136,1135,1,0,0,0,1136,1137,1,0,0,0,1137,1139,1,0,0,0,1138,1140,3,300,
  	150,0,1139,1138,1,0,0,0,1139,1140,1,0,0,0,1140,1144,1,0,0,0,1141,1142,
  	3,210,105,0,1142,1143,3,286,143,0,1143,1145,1,0,0,0,1144,1141,1,0,0,0,
  	1144,1145,1,0,0,0,1145,195,1,0,0,0,1146,1147,3,204,102,0,1147,1149,5,
  	126,0,0,1148,1150,3,212,106,0,1149,1148,1,0,0,0,1149,1150,1,0,0,0,1150,
  	1156,1,0,0,0,1151,1152,3,210,105,0,1152,1154,3,322,161,0,1153,1155,3,
  	160,80,0,1154,1153,1,0,0,0,1154,1155,1,0,0,0,1155,1157,1,0,0,0,1156,1151,
  	1,0,0,0,1156,1157,1,0,0,0,1157,197,1,0,0,0,1158,1159,3,204,102,0,1159,
  	1161,5,26,0,0,1160,1162,3,214,107,0,1161,1160,1,0,0,0,1161,1162,1,0,0,
  	0,1162,1168,1,0,0,0,1163,1164,3,210,105,0,1164,1166,3,324,162,0,1165,
  	1167,3,162,81,0,1166,1165,1,0,0,0,1166,1167,1,0,0,0,1167,1169,1,0,0,0,
  	1168,1163,1,0,0,0,1168,1169,1,0,0,0,1169,199,1,0,0,0,1170,1171,3,206,
  	103,0,1171,1175,5,61,0,0,1172,1173,3,210,105,0,1173,1174,3,218,109,0,
  	1174,1176,1,0,0,0,1175,1172,1,0,0,0,1175,1176,1,0,0,0,1176,201,1,0,0,
  	0,1177,1178,3,206,103,0,1178,1182,5,30,0,0,1179,1180,3,210,105,0,1180,
  	1181,3,220,110,0,1181,1183,1,0,0,0,1182,1179,1,0,0,0,1182,1183,1,0,0,
  	0,1183,203,1,0,0,0,1184,1186,5,94,0,0,1185,1187,5,148,0,0,1186,1185,1,
  	0,0,0,1186,1187,1,0,0,0,1187,1189,1,0,0,0,1188,1190,3,282,141,0,1189,
  	1188,1,0,0,0,1189,1190,1,0,0,0,1190,1192,1,0,0,0,1191,1193,3,326,163,
  	0,1192,1191,1,0,0,0,1192,1193,1,0,0,0,1193,1195,1,0,0,0,1194,1196,3,38,
  	19,0,1195,1194,1,0,0,0,1195,1196,1,0,0,0,1196,1197,1,0,0,0,1197,1198,
  	3,208,104,0,1198,1199,3,14,7,0,1199,205,1,0,0,0,1200,1202,5,94,0,0,1201,
  	1203,5,148,0,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,1205,1,0,0,0,
  	1204,1206,3,282,141,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,1208,1,
  	0,0,0,1207,1209,3,326,163,0,1208,1207,1,0,0,0,1208,1209,1,0,0,0,1209,
  	1211,1,0,0,0,1210,1212,3,38,19,0,1211,1210,1,0,0,0,1211,1212,1,0,0,0,
  	1212,1213,1,0,0,0,1213,1214,3,16,8,0,1214,207,1,0,0,0,1215,1216,5,130,
  	0,0,1216,209,1,0,0,0,1217,1218,5,28,0,0,1218,1219,5,165,0,0,1219,211,
  	1,0,0,0,1220,1221,5,137,0,0,1221,1224,3,216,108,0,1222,1223,5,146,0,0,
  	1223,1225,3,216,108,0,1224,1222,1,0,0,0,1225,1226,1,0,0,0,1226,1224,1,
  	0,0,0,1226,1227,1,0,0,0,1227,1228,1,0,0,0,1228,1229,5,146,0,0,1229,1230,
  	5,138,0,0,1230,213,1,0,0,0,1231,1232,5,137,0,0,1232,1233,5,53,0,0,1233,
  	1234,5,138,0,0,1234,215,1,0,0,0,1235,1236,7,1,0,0,1236,217,1,0,0,0,1237,
  	1238,5,61,0,0,1238,1239,3,116,58,0,1239,1240,3,342,171,0,1240,219,1,0,
  	0,0,1241,1242,5,30,0,0,1242,1243,3,126,63,0,1243,1244,3,342,171,0,1244,
  	221,1,0,0,0,1245,1247,5,120,0,0,1246,1248,3,348,174,0,1247,1246,1,0,0,
  	0,1247,1248,1,0,0,0,1248,1250,1,0,0,0,1249,1251,3,34,17,0,1250,1249,1,
  	0,0,0,1250,1251,1,0,0,0,1251,223,1,0,0,0,1252,1254,5,36,0,0,1253,1255,
  	3,32,16,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,1257,1,0,0,0,1256,
  	1258,3,348,174,0,1257,1256,1,0,0,0,1257,1258,1,0,0,0,1258,1260,1,0,0,
  	0,1259,1261,3,34,17,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,1263,1,
  	0,0,0,1262,1264,3,40,20,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,1266,
  	1,0,0,0,1265,1267,3,110,55,0,1266,1265,1,0,0,0,1266,1267,1,0,0,0,1267,
  	1269,1,0,0,0,1268,1270,3,120,60,0,1269,1268,1,0,0,0,1269,1270,1,0,0,0,
  	1270,1272,1,0,0,0,1271,1273,3,130,65,0,1272,1271,1,0,0,0,1272,1273,1,
  	0,0,0,1273,1274,1,0,0,0,1274,1275,3,226,113,0,1275,225,1,0,0,0,1276,1277,
  	5,137,0,0,1277,1280,3,228,114,0,1278,1279,5,146,0,0,1279,1281,3,228,114,
  	0,1280,1278,1,0,0,0,1281,1282,1,0,0,0,1282,1280,1,0,0,0,1282,1283,1,0,
  	0,0,1283,1285,1,0,0,0,1284,1286,5,146,0,0,1285,1284,1,0,0,0,1285,1286,
  	1,0,0,0,1286,1287,1,0,0,0,1287,1288,5,138,0,0,1288,227,1,0,0,0,1289,1295,
  	3,230,115,0,1290,1295,3,150,75,0,1291,1295,3,152,76,0,1292,1295,3,154,
  	77,0,1293,1295,3,136,68,0,1294,1289,1,0,0,0,1294,1290,1,0,0,0,1294,1291,
  	1,0,0,0,1294,1292,1,0,0,0,1294,1293,1,0,0,0,1295,229,1,0,0,0,1296,1298,
  	3,242,121,0,1297,1299,3,232,116,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,
  	1299,1301,1,0,0,0,1300,1302,3,240,120,0,1301,1300,1,0,0,0,1301,1302,1,
  	0,0,0,1302,231,1,0,0,0,1303,1304,5,144,0,0,1304,1306,5,139,0,0,1305,1307,
  	3,234,117,0,1306,1305,1,0,0,0,1306,1307,1,0,0,0,1307,1308,1,0,0,0,1308,
  	1309,5,140,0,0,1309,233,1,0,0,0,1310,1315,3,236,118,0,1311,1312,5,146,
  	0,0,1312,1314,3,236,118,0,1313,1311,1,0,0,0,1314,1317,1,0,0,0,1315,1313,
  	1,0,0,0,1315,1316,1,0,0,0,1316,235,1,0,0,0,1317,1315,1,0,0,0,1318,1320,
  	3,348,174,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,1321,1,0,0,0,1321,
  	1324,3,238,119,0,1322,1323,5,144,0,0,1323,1325,3,320,160,0,1324,1322,
  	1,0,0,0,1324,1325,1,0,0,0,1325,1327,1,0,0,0,1326,1328,3,318,159,0,1327,
  	1326,1,0,0,0,1327,1328,1,0,0,0,1328,237,1,0,0,0,1329,1330,5,130,0,0,1330,
  	239,1,0,0,0,1331,1332,5,165,0,0,1332,1333,3,410,205,0,1333,241,1,0,0,
  	0,1334,1335,5,130,0,0,1335,243,1,0,0,0,1336,1337,3,246,123,0,1337,245,
  	1,0,0,0,1338,1340,5,57,0,0,1339,1341,3,258,129,0,1340,1339,1,0,0,0,1340,
  	1341,1,0,0,0,1341,1343,1,0,0,0,1342,1344,3,348,174,0,1343,1342,1,0,0,
  	0,1343,1344,1,0,0,0,1344,1345,1,0,0,0,1345,1346,3,250,125,0,1346,247,
  	1,0,0,0,1347,1349,5,57,0,0,1348,1350,3,258,129,0,1349,1348,1,0,0,0,1349,
  	1350,1,0,0,0,1350,1352,1,0,0,0,1351,1353,3,348,174,0,1352,1351,1,0,0,
  	0,1352,1353,1,0,0,0,1353,1354,1,0,0,0,1354,1355,3,250,125,0,1355,249,
  	1,0,0,0,1356,1366,3,252,126,0,1357,1359,5,137,0,0,1358,1360,3,252,126,
  	0,1359,1358,1,0,0,0,1360,1361,1,0,0,0,1361,1359,1,0,0,0,1361,1362,1,0,
  	0,0,1362,1363,1,0,0,0,1363,1364,5,138,0,0,1364,1366,1,0,0,0,1365,1356,
  	1,0,0,0,1365,1357,1,0,0,0,1366,251,1,0,0,0,1367,1370,3,254,127,0,1368,
  	1369,5,143,0,0,1369,1371,3,254,127,0,1370,1368,1,0,0,0,1371,1372,1,0,
  	0,0,1372,1370,1,0,0,0,1372,1373,1,0,0,0,1373,1376,1,0,0,0,1374,1375,5,
  	143,0,0,1375,1377,5,157,0,0,1376,1374,1,0,0,0,1376,1377,1,0,0,0,1377,
  	253,1,0,0,0,1378,1381,5,130,0,0,1379,1381,3,256,128,0,1380,1378,1,0,0,
  	0,1380,1379,1,0,0,0,1381,255,1,0,0,0,1382,1383,5,137,0,0,1383,1386,3,
  	254,127,0,1384,1385,5,146,0,0,1385,1387,3,254,127,0,1386,1384,1,0,0,0,
  	1387,1388,1,0,0,0,1388,1386,1,0,0,0,1388,1389,1,0,0,0,1389,1391,1,0,0,
  	0,1390,1392,5,146,0,0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,1392,1393,1,
  	0,0,0,1393,1394,5,138,0,0,1394,257,1,0,0,0,1395,1396,7,2,0,0,1396,259,
  	1,0,0,0,1397,1399,5,88,0,0,1398,1400,3,348,174,0,1399,1398,1,0,0,0,1399,
  	1400,1,0,0,0,1400,1401,1,0,0,0,1401,1402,3,262,131,0,1402,261,1,0,0,0,
  	1403,1409,5,107,0,0,1404,1405,5,137,0,0,1405,1406,3,266,133,0,1406,1407,
  	5,138,0,0,1407,1409,1,0,0,0,1408,1403,1,0,0,0,1408,1404,1,0,0,0,1409,
  	263,1,0,0,0,1410,1411,3,492,246,0,1411,265,1,0,0,0,1412,1414,3,264,132,
  	0,1413,1412,1,0,0,0,1414,1415,1,0,0,0,1415,1413,1,0,0,0,1415,1416,1,0,
  	0,0,1416,267,1,0,0,0,1417,1419,5,86,0,0,1418,1420,3,348,174,0,1419,1418,
  	1,0,0,0,1419,1420,1,0,0,0,1420,1421,1,0,0,0,1421,1422,3,270,135,0,1422,
  	269,1,0,0,0,1423,1429,5,107,0,0,1424,1425,5,137,0,0,1425,1426,3,274,137,
  	0,1426,1427,5,138,0,0,1427,1429,1,0,0,0,1428,1423,1,0,0,0,1428,1424,1,
  	0,0,0,1429,271,1,0,0,0,1430,1431,3,492,246,0,1431,273,1,0,0,0,1432,1434,
  	3,272,136,0,1433,1432,1,0,0,0,1434,1435,1,0,0,0,1435,1433,1,0,0,0,1435,
  	1436,1,0,0,0,1436,275,1,0,0,0,1437,1439,5,73,0,0,1438,1440,3,348,174,
  	0,1439,1438,1,0,0,0,1439,1440,1,0,0,0,1440,1447,1,0,0,0,1441,1443,5,73,
  	0,0,1442,1444,3,348,174,0,1443,1442,1,0,0,0,1443,1444,1,0,0,0,1444,1445,
  	1,0,0,0,1445,1447,3,340,170,0,1446,1437,1,0,0,0,1446,1441,1,0,0,0,1447,
  	277,1,0,0,0,1448,1450,5,75,0,0,1449,1451,3,348,174,0,1450,1449,1,0,0,
  	0,1450,1451,1,0,0,0,1451,1452,1,0,0,0,1452,1453,3,340,170,0,1453,279,
  	1,0,0,0,1454,1455,5,2,0,0,1455,1456,5,113,0,0,1456,1457,3,438,219,0,1457,
  	281,1,0,0,0,1458,1459,7,3,0,0,1459,283,1,0,0,0,1460,1462,5,52,0,0,1461,
  	1463,3,348,174,0,1462,1461,1,0,0,0,1462,1463,1,0,0,0,1463,1465,1,0,0,
  	0,1464,1466,3,300,150,0,1465,1464,1,0,0,0,1465,1466,1,0,0,0,1466,1467,
  	1,0,0,0,1467,1468,3,286,143,0,1468,285,1,0,0,0,1469,1472,3,342,171,0,
  	1470,1472,3,410,205,0,1471,1469,1,0,0,0,1471,1470,1,0,0,0,1472,287,1,
  	0,0,0,1473,1474,5,94,0,0,1474,1476,5,137,0,0,1475,1477,3,290,145,0,1476,
  	1475,1,0,0,0,1477,1478,1,0,0,0,1478,1476,1,0,0,0,1478,1479,1,0,0,0,1479,
  	1480,1,0,0,0,1480,1481,5,138,0,0,1481,1485,1,0,0,0,1482,1483,5,94,0,0,
  	1483,1485,3,290,145,0,1484,1473,1,0,0,0,1484,1482,1,0,0,0,1485,289,1,
  	0,0,0,1486,1489,3,292,146,0,1487,1489,3,294,147,0,1488,1486,1,0,0,0,1488,
  	1487,1,0,0,0,1489,291,1,0,0,0,1490,1491,5,37,0,0,1491,1494,3,410,205,
  	0,1492,1493,5,129,0,0,1493,1495,3,410,205,0,1494,1492,1,0,0,0,1494,1495,
  	1,0,0,0,1495,293,1,0,0,0,1496,1497,5,35,0,0,1497,1498,5,129,0,0,1498,
  	1499,3,296,148,0,1499,1500,3,14,7,0,1500,1501,5,96,0,0,1501,1502,1,0,
  	0,0,1502,1505,3,410,205,0,1503,1504,5,129,0,0,1504,1506,3,410,205,0,1505,
  	1503,1,0,0,0,1505,1506,1,0,0,0,1506,295,1,0,0,0,1507,1508,5,130,0,0,1508,
  	297,1,0,0,0,1509,1510,5,130,0,0,1510,299,1,0,0,0,1511,1512,3,308,154,
  	0,1512,1514,3,306,153,0,1513,1515,3,304,152,0,1514,1513,1,0,0,0,1514,
  	1515,1,0,0,0,1515,1517,1,0,0,0,1516,1518,3,288,144,0,1517,1516,1,0,0,
  	0,1517,1518,1,0,0,0,1518,301,1,0,0,0,1519,1520,7,4,0,0,1520,303,1,0,0,
  	0,1521,1523,3,302,151,0,1522,1521,1,0,0,0,1523,1524,1,0,0,0,1524,1522,
  	1,0,0,0,1524,1525,1,0,0,0,1525,305,1,0,0,0,1526,1528,5,210,0,0,1527,1529,
  	3,348,174,0,1528,1527,1,0,0,0,1528,1529,1,0,0,0,1529,1530,1,0,0,0,1530,
  	1531,3,438,219,0,1531,307,1,0,0,0,1532,1534,5,139,0,0,1533,1535,3,310,
  	155,0,1534,1533,1,0,0,0,1534,1535,1,0,0,0,1535,1536,1,0,0,0,1536,1537,
  	5,140,0,0,1537,309,1,0,0,0,1538,1543,3,312,156,0,1539,1540,5,146,0,0,
  	1540,1542,3,312,156,0,1541,1539,1,0,0,0,1542,1545,1,0,0,0,1543,1541,1,
  	0,0,0,1543,1544,1,0,0,0,1544,311,1,0,0,0,1545,1543,1,0,0,0,1546,1548,
  	3,348,174,0,1547,1546,1,0,0,0,1547,1548,1,0,0,0,1548,1550,1,0,0,0,1549,
  	1551,3,314,157,0,1550,1549,1,0,0,0,1550,1551,1,0,0,0,1551,1552,1,0,0,
  	0,1552,1555,3,316,158,0,1553,1554,5,144,0,0,1554,1556,3,320,160,0,1555,
  	1553,1,0,0,0,1555,1556,1,0,0,0,1556,1558,1,0,0,0,1557,1559,3,318,159,
  	0,1558,1557,1,0,0,0,1558,1559,1,0,0,0,1559,313,1,0,0,0,1560,1561,5,130,
  	0,0,1561,315,1,0,0,0,1562,1563,5,130,0,0,1563,317,1,0,0,0,1564,1565,5,
  	165,0,0,1565,1566,3,410,205,0,1566,319,1,0,0,0,1567,1569,3,348,174,0,
  	1568,1567,1,0,0,0,1568,1569,1,0,0,0,1569,1570,1,0,0,0,1570,1571,3,438,
  	219,0,1571,321,1,0,0,0,1572,1574,5,126,0,0,1573,1575,3,326,163,0,1574,
  	1573,1,0,0,0,1574,1575,1,0,0,0,1575,1576,1,0,0,0,1576,1577,3,410,205,
  	0,1577,323,1,0,0,0,1578,1580,5,125,0,0,1579,1581,3,326,163,0,1580,1579,
  	1,0,0,0,1580,1581,1,0,0,0,1581,1582,1,0,0,0,1582,1583,3,410,205,0,1583,
  	325,1,0,0,0,1584,1585,7,5,0,0,1585,327,1,0,0,0,1586,1588,5,52,0,0,1587,
  	1586,1,0,0,0,1587,1588,1,0,0,0,1588,1590,1,0,0,0,1589,1591,3,330,165,
  	0,1590,1589,1,0,0,0,1590,1591,1,0,0,0,1591,1593,1,0,0,0,1592,1594,3,300,
  	150,0,1593,1592,1,0,0,0,1593,1594,1,0,0,0,1594,1595,1,0,0,0,1595,1596,
  	3,342,171,0,1596,329,1,0,0,0,1597,1598,5,141,0,0,1598,1599,3,332,166,
  	0,1599,1600,5,142,0,0,1600,331,1,0,0,0,1601,1603,3,334,167,0,1602,1601,
  	1,0,0,0,1603,1604,1,0,0,0,1604,1602,1,0,0,0,1604,1605,1,0,0,0,1605,333,
  	1,0,0,0,1606,1607,5,130,0,0,1607,335,1,0,0,0,1608,1610,5,29,0,0,1609,
  	1611,3,338,169,0,1610,1609,1,0,0,0,1610,1611,1,0,0,0,1611,1612,1,0,0,
  	0,1612,1613,3,342,171,0,1613,337,1,0,0,0,1614,1615,7,6,0,0,1615,339,1,
  	0,0,0,1616,1618,5,137,0,0,1617,1619,3,4,2,0,1618,1617,1,0,0,0,1618,1619,
  	1,0,0,0,1619,1620,1,0,0,0,1620,1621,5,138,0,0,1621,341,1,0,0,0,1622,1624,
  	3,344,172,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,1625,1,0,0,0,1625,
  	1627,5,137,0,0,1626,1628,3,4,2,0,1627,1626,1,0,0,0,1627,1628,1,0,0,0,
  	1628,1629,1,0,0,0,1629,1630,5,138,0,0,1630,343,1,0,0,0,1631,1632,5,130,
  	0,0,1632,1633,5,144,0,0,1633,345,1,0,0,0,1634,1635,5,147,0,0,1635,1636,
  	3,350,175,0,1636,347,1,0,0,0,1637,1639,3,346,173,0,1638,1637,1,0,0,0,
  	1639,1640,1,0,0,0,1640,1638,1,0,0,0,1640,1641,1,0,0,0,1641,349,1,0,0,
  	0,1642,1643,3,492,246,0,1643,351,1,0,0,0,1644,1646,3,354,177,0,1645,1644,
  	1,0,0,0,1645,1646,1,0,0,0,1646,1647,1,0,0,0,1647,1650,3,364,182,0,1648,
  	1650,3,354,177,0,1649,1645,1,0,0,0,1649,1648,1,0,0,0,1650,353,1,0,0,0,
  	1651,1653,5,139,0,0,1652,1654,3,356,178,0,1653,1652,1,0,0,0,1653,1654,
  	1,0,0,0,1654,1655,1,0,0,0,1655,1656,5,140,0,0,1656,355,1,0,0,0,1657,1662,
  	3,358,179,0,1658,1659,5,146,0,0,1659,1661,3,358,179,0,1660,1658,1,0,0,
  	0,1661,1664,1,0,0,0,1662,1660,1,0,0,0,1662,1663,1,0,0,0,1663,357,1,0,
  	0,0,1664,1662,1,0,0,0,1665,1667,3,360,180,0,1666,1665,1,0,0,0,1666,1667,
  	1,0,0,0,1667,1670,1,0,0,0,1668,1671,5,130,0,0,1669,1671,3,410,205,0,1670,
  	1668,1,0,0,0,1670,1669,1,0,0,0,1671,359,1,0,0,0,1672,1673,5,130,0,0,1673,
  	1674,5,165,0,0,1674,361,1,0,0,0,1675,1677,3,360,180,0,1676,1675,1,0,0,
  	0,1677,1678,1,0,0,0,1678,1676,1,0,0,0,1678,1679,1,0,0,0,1679,363,1,0,
  	0,0,1680,1682,3,328,164,0,1681,1683,3,368,184,0,1682,1681,1,0,0,0,1683,
  	1684,1,0,0,0,1684,1682,1,0,0,0,1684,1685,1,0,0,0,1685,365,1,0,0,0,1686,
  	1687,5,130,0,0,1687,1688,5,165,0,0,1688,1689,3,328,164,0,1689,367,1,0,
  	0,0,1690,1692,3,366,183,0,1691,1690,1,0,0,0,1692,1693,1,0,0,0,1693,1691,
  	1,0,0,0,1693,1694,1,0,0,0,1694,369,1,0,0,0,1695,1696,7,7,0,0,1696,371,
  	1,0,0,0,1697,1698,7,8,0,0,1698,373,1,0,0,0,1699,1700,7,9,0,0,1700,375,
  	1,0,0,0,1701,1702,7,10,0,0,1702,377,1,0,0,0,1703,1704,7,11,0,0,1704,379,
  	1,0,0,0,1705,1706,5,78,0,0,1706,381,1,0,0,0,1707,1708,7,12,0,0,1708,383,
  	1,0,0,0,1709,1710,7,13,0,0,1710,385,1,0,0,0,1711,1712,7,14,0,0,1712,387,
  	1,0,0,0,1713,1714,7,15,0,0,1714,389,1,0,0,0,1715,1716,7,16,0,0,1716,391,
  	1,0,0,0,1717,1718,5,209,0,0,1718,393,1,0,0,0,1719,1720,7,17,0,0,1720,
  	395,1,0,0,0,1721,1722,5,210,0,0,1722,397,1,0,0,0,1723,1725,5,112,0,0,
  	1724,1726,7,17,0,0,1725,1724,1,0,0,0,1725,1726,1,0,0,0,1726,399,1,0,0,
  	0,1727,1733,5,68,0,0,1728,1730,5,5,0,0,1729,1731,7,17,0,0,1730,1729,1,
  	0,0,0,1730,1731,1,0,0,0,1731,1733,1,0,0,0,1732,1727,1,0,0,0,1732,1728,
  	1,0,0,0,1733,401,1,0,0,0,1734,1735,5,10,0,0,1735,403,1,0,0,0,1736,1737,
  	5,8,0,0,1737,405,1,0,0,0,1738,1739,7,18,0,0,1739,407,1,0,0,0,1740,1741,
  	5,141,0,0,1741,1746,3,410,205,0,1742,1743,5,146,0,0,1743,1745,3,410,205,
  	0,1744,1742,1,0,0,0,1745,1748,1,0,0,0,1746,1744,1,0,0,0,1746,1747,1,0,
  	0,0,1747,1750,1,0,0,0,1748,1746,1,0,0,0,1749,1751,5,146,0,0,1750,1749,
  	1,0,0,0,1750,1751,1,0,0,0,1751,1752,1,0,0,0,1752,1753,5,142,0,0,1753,
  	409,1,0,0,0,1754,1755,6,205,-1,0,1755,1756,5,139,0,0,1756,1757,3,410,
  	205,0,1757,1758,5,140,0,0,1758,1837,1,0,0,0,1759,1837,3,496,248,0,1760,
  	1761,5,143,0,0,1761,1837,3,494,247,0,1762,1763,3,372,186,0,1763,1764,
  	3,410,205,46,1764,1837,1,0,0,0,1765,1837,3,492,246,0,1766,1767,3,398,
  	199,0,1767,1768,3,410,205,41,1768,1837,1,0,0,0,1769,1770,3,404,202,0,
  	1770,1771,3,410,205,39,1771,1837,1,0,0,0,1772,1773,3,402,201,0,1773,1774,
  	3,410,205,38,1774,1837,1,0,0,0,1775,1776,3,384,192,0,1776,1777,3,410,
  	205,35,1777,1837,1,0,0,0,1778,1779,3,380,190,0,1779,1780,3,410,205,33,
  	1780,1837,1,0,0,0,1781,1837,3,246,123,0,1782,1837,3,328,164,0,1783,1784,
  	5,143,0,0,1784,1837,5,61,0,0,1785,1786,5,143,0,0,1786,1837,5,30,0,0,1787,
  	1837,3,412,206,0,1788,1837,3,438,219,0,1789,1837,5,122,0,0,1790,1837,
  	5,41,0,0,1791,1792,5,109,0,0,1792,1837,3,410,205,20,1793,1795,5,96,0,
  	0,1794,1796,3,410,205,0,1795,1794,1,0,0,0,1795,1796,1,0,0,0,1796,1837,
  	1,0,0,0,1797,1799,5,12,0,0,1798,1800,3,344,172,0,1799,1798,1,0,0,0,1799,
  	1800,1,0,0,0,1800,1803,1,0,0,0,1801,1802,5,129,0,0,1802,1804,3,410,205,
  	0,1803,1801,1,0,0,0,1803,1804,1,0,0,0,1804,1837,1,0,0,0,1805,1807,5,27,
  	0,0,1806,1808,3,344,172,0,1807,1806,1,0,0,0,1807,1808,1,0,0,0,1808,1837,
  	1,0,0,0,1809,1810,5,7,0,0,1810,1813,3,410,205,0,1811,1812,5,129,0,0,1812,
  	1814,3,410,205,0,1813,1811,1,0,0,0,1813,1814,1,0,0,0,1814,1837,1,0,0,
  	0,1815,1816,5,24,0,0,1816,1837,3,410,205,15,1817,1818,3,388,194,0,1818,
  	1819,3,410,205,14,1819,1837,1,0,0,0,1820,1822,5,161,0,0,1821,1823,3,410,
  	205,0,1822,1821,1,0,0,0,1822,1823,1,0,0,0,1823,1837,1,0,0,0,1824,1825,
  	5,123,0,0,1825,1826,3,6,3,0,1826,1827,5,58,0,0,1827,1828,3,410,205,8,
  	1828,1837,1,0,0,0,1829,1830,5,124,0,0,1830,1837,3,410,205,7,1831,1837,
  	3,20,10,0,1832,1837,3,424,212,0,1833,1837,3,426,213,0,1834,1837,3,428,
  	214,0,1835,1837,3,430,215,0,1836,1754,1,0,0,0,1836,1759,1,0,0,0,1836,
  	1760,1,0,0,0,1836,1762,1,0,0,0,1836,1765,1,0,0,0,1836,1766,1,0,0,0,1836,
  	1769,1,0,0,0,1836,1772,1,0,0,0,1836,1775,1,0,0,0,1836,1778,1,0,0,0,1836,
  	1781,1,0,0,0,1836,1782,1,0,0,0,1836,1783,1,0,0,0,1836,1785,1,0,0,0,1836,
  	1787,1,0,0,0,1836,1788,1,0,0,0,1836,1789,1,0,0,0,1836,1790,1,0,0,0,1836,
  	1791,1,0,0,0,1836,1793,1,0,0,0,1836,1797,1,0,0,0,1836,1805,1,0,0,0,1836,
  	1809,1,0,0,0,1836,1815,1,0,0,0,1836,1817,1,0,0,0,1836,1820,1,0,0,0,1836,
  	1824,1,0,0,0,1836,1829,1,0,0,0,1836,1831,1,0,0,0,1836,1832,1,0,0,0,1836,
  	1833,1,0,0,0,1836,1834,1,0,0,0,1836,1835,1,0,0,0,1837,1950,1,0,0,0,1838,
  	1839,10,54,0,0,1839,1840,5,146,0,0,1840,1949,3,410,205,55,1841,1842,10,
  	49,0,0,1842,1843,3,392,196,0,1843,1844,3,410,205,50,1844,1949,1,0,0,0,
  	1845,1846,10,47,0,0,1846,1847,3,370,185,0,1847,1848,3,410,205,48,1848,
  	1949,1,0,0,0,1849,1850,10,43,0,0,1850,1851,3,374,187,0,1851,1852,3,410,
  	205,44,1852,1949,1,0,0,0,1853,1854,10,42,0,0,1854,1855,3,376,188,0,1855,
  	1856,3,410,205,43,1856,1949,1,0,0,0,1857,1858,10,37,0,0,1858,1859,3,390,
  	195,0,1859,1860,3,410,205,38,1860,1949,1,0,0,0,1861,1862,10,36,0,0,1862,
  	1863,3,382,191,0,1863,1864,3,410,205,37,1864,1949,1,0,0,0,1865,1866,10,
  	34,0,0,1866,1867,3,378,189,0,1867,1868,3,410,205,35,1868,1949,1,0,0,0,
  	1869,1870,10,10,0,0,1870,1871,3,406,203,0,1871,1872,3,410,205,11,1872,
  	1949,1,0,0,0,1873,1874,10,53,0,0,1874,1875,5,143,0,0,1875,1949,3,494,
  	247,0,1876,1877,10,51,0,0,1877,1949,3,352,176,0,1878,1879,10,50,0,0,1879,
  	1949,3,394,197,0,1880,1881,10,48,0,0,1881,1949,3,352,176,0,1882,1883,
  	10,44,0,0,1883,1949,3,408,204,0,1884,1885,10,40,0,0,1885,1897,5,15,0,
  	0,1886,1891,3,524,262,0,1887,1888,5,146,0,0,1888,1890,3,524,262,0,1889,
  	1887,1,0,0,0,1890,1893,1,0,0,0,1891,1889,1,0,0,0,1891,1892,1,0,0,0,1892,
  	1895,1,0,0,0,1893,1891,1,0,0,0,1894,1896,3,414,207,0,1895,1894,1,0,0,
  	0,1895,1896,1,0,0,0,1896,1898,1,0,0,0,1897,1886,1,0,0,0,1897,1898,1,0,
  	0,0,1898,1902,1,0,0,0,1899,1900,5,106,0,0,1900,1903,3,410,205,0,1901,
  	1903,3,342,171,0,1902,1899,1,0,0,0,1902,1901,1,0,0,0,1903,1949,1,0,0,
  	0,1904,1905,10,31,0,0,1905,1906,3,400,200,0,1906,1907,3,438,219,0,1907,
  	1949,1,0,0,0,1908,1909,10,29,0,0,1909,1910,5,143,0,0,1910,1949,5,61,0,
  	0,1911,1912,10,27,0,0,1912,1913,5,143,0,0,1913,1949,5,30,0,0,1914,1915,
  	10,25,0,0,1915,1916,5,143,0,0,1916,1949,5,97,0,0,1917,1918,10,13,0,0,
  	1918,1949,5,201,0,0,1919,1920,10,12,0,0,1920,1949,5,202,0,0,1921,1922,
  	10,9,0,0,1922,1923,5,129,0,0,1923,1925,5,137,0,0,1924,1926,3,410,205,
  	0,1925,1924,1,0,0,0,1926,1927,1,0,0,0,1927,1925,1,0,0,0,1927,1928,1,0,
  	0,0,1928,1929,1,0,0,0,1929,1930,5,138,0,0,1930,1949,1,0,0,0,1931,1932,
  	10,1,0,0,1932,1942,5,71,0,0,1933,1943,3,432,216,0,1934,1936,5,137,0,0,
  	1935,1937,3,432,216,0,1936,1935,1,0,0,0,1937,1938,1,0,0,0,1938,1936,1,
  	0,0,0,1938,1939,1,0,0,0,1939,1940,1,0,0,0,1940,1941,5,138,0,0,1941,1943,
  	1,0,0,0,1942,1933,1,0,0,0,1942,1934,1,0,0,0,1943,1946,1,0,0,0,1944,1945,
  	5,34,0,0,1945,1947,3,418,209,0,1946,1944,1,0,0,0,1946,1947,1,0,0,0,1947,
  	1949,1,0,0,0,1948,1838,1,0,0,0,1948,1841,1,0,0,0,1948,1845,1,0,0,0,1948,
  	1849,1,0,0,0,1948,1853,1,0,0,0,1948,1857,1,0,0,0,1948,1861,1,0,0,0,1948,
  	1865,1,0,0,0,1948,1869,1,0,0,0,1948,1873,1,0,0,0,1948,1876,1,0,0,0,1948,
  	1878,1,0,0,0,1948,1880,1,0,0,0,1948,1882,1,0,0,0,1948,1884,1,0,0,0,1948,
  	1904,1,0,0,0,1948,1908,1,0,0,0,1948,1911,1,0,0,0,1948,1914,1,0,0,0,1948,
  	1917,1,0,0,0,1948,1919,1,0,0,0,1948,1921,1,0,0,0,1948,1931,1,0,0,0,1949,
  	1952,1,0,0,0,1950,1948,1,0,0,0,1950,1951,1,0,0,0,1951,411,1,0,0,0,1952,
  	1950,1,0,0,0,1953,1954,3,342,171,0,1954,413,1,0,0,0,1955,1956,5,94,0,
  	0,1956,1957,3,410,205,0,1957,415,1,0,0,0,1958,1959,5,106,0,0,1959,1962,
  	3,410,205,0,1960,1962,3,342,171,0,1961,1958,1,0,0,0,1961,1960,1,0,0,0,
  	1962,417,1,0,0,0,1963,1966,3,410,205,0,1964,1966,3,342,171,0,1965,1963,
  	1,0,0,0,1965,1964,1,0,0,0,1966,419,1,0,0,0,1967,1968,5,106,0,0,1968,1971,
  	3,438,219,0,1969,1971,3,342,171,0,1970,1967,1,0,0,0,1970,1969,1,0,0,0,
  	1971,421,1,0,0,0,1972,1975,3,438,219,0,1973,1975,3,342,171,0,1974,1972,
  	1,0,0,0,1974,1973,1,0,0,0,1975,423,1,0,0,0,1976,1977,5,55,0,0,1977,1978,
  	3,410,205,0,1978,1981,3,416,208,0,1979,1980,5,34,0,0,1980,1982,3,418,
  	209,0,1981,1979,1,0,0,0,1981,1982,1,0,0,0,1982,425,1,0,0,0,1983,1984,
  	5,128,0,0,1984,1985,3,410,205,0,1985,1988,3,416,208,0,1986,1987,5,129,
  	0,0,1987,1989,3,416,208,0,1988,1986,1,0,0,0,1988,1989,1,0,0,0,1989,1992,
  	1,0,0,0,1990,1991,5,34,0,0,1991,1993,3,418,209,0,1992,1990,1,0,0,0,1992,
  	1993,1,0,0,0,1993,427,1,0,0,0,1994,1995,5,95,0,0,1995,1996,3,410,205,
  	0,1996,1999,3,416,208,0,1997,1998,5,129,0,0,1998,2000,3,416,208,0,1999,
  	1997,1,0,0,0,1999,2000,1,0,0,0,2000,2003,1,0,0,0,2001,2002,5,34,0,0,2002,
  	2004,3,418,209,0,2003,2001,1,0,0,0,2003,2004,1,0,0,0,2004,429,1,0,0,0,
  	2005,2006,5,50,0,0,2006,2007,5,130,0,0,2007,2009,5,58,0,0,2008,2010,3,
  	348,174,0,2009,2008,1,0,0,0,2009,2010,1,0,0,0,2010,2011,1,0,0,0,2011,
  	2013,3,410,205,0,2012,2014,3,414,207,0,2013,2012,1,0,0,0,2013,2014,1,
  	0,0,0,2014,2015,1,0,0,0,2015,2018,3,416,208,0,2016,2017,5,129,0,0,2017,
  	2019,3,416,208,0,2018,2016,1,0,0,0,2018,2019,1,0,0,0,2019,2022,1,0,0,
  	0,2020,2021,5,34,0,0,2021,2023,3,418,209,0,2022,2020,1,0,0,0,2022,2023,
  	1,0,0,0,2023,431,1,0,0,0,2024,2025,3,434,217,0,2025,2028,5,144,0,0,2026,
  	2029,3,410,205,0,2027,2029,3,342,171,0,2028,2026,1,0,0,0,2028,2027,1,
  	0,0,0,2029,433,1,0,0,0,2030,2032,3,348,174,0,2031,2030,1,0,0,0,2031,2032,
  	1,0,0,0,2032,2033,1,0,0,0,2033,2034,3,436,218,0,2034,435,1,0,0,0,2035,
  	2037,3,524,262,0,2036,2038,3,414,207,0,2037,2036,1,0,0,0,2037,2038,1,
  	0,0,0,2038,2046,1,0,0,0,2039,2040,5,146,0,0,2040,2042,3,524,262,0,2041,
  	2043,3,414,207,0,2042,2041,1,0,0,0,2042,2043,1,0,0,0,2043,2045,1,0,0,
  	0,2044,2039,1,0,0,0,2045,2048,1,0,0,0,2046,2044,1,0,0,0,2046,2047,1,0,
  	0,0,2047,437,1,0,0,0,2048,2046,1,0,0,0,2049,2050,6,219,-1,0,2050,2094,
  	5,130,0,0,2051,2052,5,140,0,0,2052,2053,3,438,219,0,2053,2054,5,139,0,
  	0,2054,2094,1,0,0,0,2055,2056,3,492,246,0,2056,2057,3,352,176,0,2057,
  	2094,1,0,0,0,2058,2094,3,492,246,0,2059,2094,3,440,220,0,2060,2094,3,
  	446,223,0,2061,2094,3,450,225,0,2062,2094,3,442,221,0,2063,2094,3,452,
  	226,0,2064,2094,3,454,227,0,2065,2094,3,464,232,0,2066,2094,3,424,212,
  	0,2067,2094,3,426,213,0,2068,2094,3,428,214,0,2069,2094,3,430,215,0,2070,
  	2094,3,412,206,0,2071,2094,5,122,0,0,2072,2094,5,41,0,0,2073,2074,5,109,
  	0,0,2074,2094,3,410,205,0,2075,2077,5,96,0,0,2076,2078,3,438,219,0,2077,
  	2076,1,0,0,0,2077,2078,1,0,0,0,2078,2094,1,0,0,0,2079,2081,5,12,0,0,2080,
  	2082,3,344,172,0,2081,2080,1,0,0,0,2081,2082,1,0,0,0,2082,2085,1,0,0,
  	0,2083,2084,5,129,0,0,2084,2086,3,438,219,0,2085,2083,1,0,0,0,2085,2086,
  	1,0,0,0,2086,2094,1,0,0,0,2087,2089,5,27,0,0,2088,2090,3,344,172,0,2089,
  	2088,1,0,0,0,2089,2090,1,0,0,0,2090,2094,1,0,0,0,2091,2092,5,24,0,0,2092,
  	2094,3,438,219,1,2093,2049,1,0,0,0,2093,2051,1,0,0,0,2093,2055,1,0,0,
  	0,2093,2058,1,0,0,0,2093,2059,1,0,0,0,2093,2060,1,0,0,0,2093,2061,1,0,
  	0,0,2093,2062,1,0,0,0,2093,2063,1,0,0,0,2093,2064,1,0,0,0,2093,2065,1,
  	0,0,0,2093,2066,1,0,0,0,2093,2067,1,0,0,0,2093,2068,1,0,0,0,2093,2069,
  	1,0,0,0,2093,2070,1,0,0,0,2093,2071,1,0,0,0,2093,2072,1,0,0,0,2093,2073,
  	1,0,0,0,2093,2075,1,0,0,0,2093,2079,1,0,0,0,2093,2087,1,0,0,0,2093,2091,
  	1,0,0,0,2094,2101,1,0,0,0,2095,2096,10,21,0,0,2096,2100,3,408,204,0,2097,
  	2098,10,13,0,0,2098,2100,5,200,0,0,2099,2095,1,0,0,0,2099,2097,1,0,0,
  	0,2100,2103,1,0,0,0,2101,2099,1,0,0,0,2101,2102,1,0,0,0,2102,439,1,0,
  	0,0,2103,2101,1,0,0,0,2104,2116,3,444,222,0,2105,2116,3,468,234,0,2106,
  	2116,3,470,235,0,2107,2116,3,472,236,0,2108,2116,3,474,237,0,2109,2116,
  	3,476,238,0,2110,2116,3,478,239,0,2111,2116,3,480,240,0,2112,2116,3,476,
  	238,0,2113,2116,3,482,241,0,2114,2116,3,484,242,0,2115,2104,1,0,0,0,2115,
  	2105,1,0,0,0,2115,2106,1,0,0,0,2115,2107,1,0,0,0,2115,2108,1,0,0,0,2115,
  	2109,1,0,0,0,2115,2110,1,0,0,0,2115,2111,1,0,0,0,2115,2112,1,0,0,0,2115,
  	2113,1,0,0,0,2115,2114,1,0,0,0,2116,441,1,0,0,0,2117,2122,3,456,228,0,
  	2118,2122,3,458,229,0,2119,2122,3,460,230,0,2120,2122,3,462,231,0,2121,
  	2117,1,0,0,0,2121,2118,1,0,0,0,2121,2119,1,0,0,0,2121,2120,1,0,0,0,2122,
  	443,1,0,0,0,2123,2124,5,77,0,0,2124,445,1,0,0,0,2125,2136,5,139,0,0,2126,
  	2127,3,448,224,0,2127,2128,5,146,0,0,2128,2130,1,0,0,0,2129,2126,1,0,
  	0,0,2130,2131,1,0,0,0,2131,2129,1,0,0,0,2131,2132,1,0,0,0,2132,2134,1,
  	0,0,0,2133,2135,3,448,224,0,2134,2133,1,0,0,0,2134,2135,1,0,0,0,2135,
  	2137,1,0,0,0,2136,2129,1,0,0,0,2136,2137,1,0,0,0,2137,2138,1,0,0,0,2138,
  	2139,5,140,0,0,2139,447,1,0,0,0,2140,2142,3,348,174,0,2141,2140,1,0,0,
  	0,2141,2142,1,0,0,0,2142,2143,1,0,0,0,2143,2151,3,438,219,0,2144,2145,
  	5,130,0,0,2145,2147,5,144,0,0,2146,2148,3,348,174,0,2147,2146,1,0,0,0,
  	2147,2148,1,0,0,0,2148,2149,1,0,0,0,2149,2151,3,438,219,0,2150,2141,1,
  	0,0,0,2150,2144,1,0,0,0,2151,449,1,0,0,0,2152,2153,5,148,0,0,2153,2154,
  	3,438,219,0,2154,451,1,0,0,0,2155,2156,5,4,0,0,2156,2157,3,438,219,0,
  	2157,453,1,0,0,0,2158,2159,5,99,0,0,2159,2160,3,438,219,0,2160,455,1,
  	0,0,0,2161,2164,5,141,0,0,2162,2165,3,410,205,0,2163,2165,5,150,0,0,2164,
  	2162,1,0,0,0,2164,2163,1,0,0,0,2165,2171,1,0,0,0,2166,2167,5,146,0,0,
  	2167,2170,3,410,205,0,2168,2170,5,150,0,0,2169,2166,1,0,0,0,2169,2168,
  	1,0,0,0,2170,2173,1,0,0,0,2171,2169,1,0,0,0,2171,2172,1,0,0,0,2172,2175,
  	1,0,0,0,2173,2171,1,0,0,0,2174,2176,5,146,0,0,2175,2174,1,0,0,0,2175,
  	2176,1,0,0,0,2176,2177,1,0,0,0,2177,2180,5,142,0,0,2178,2181,3,438,219,
  	0,2179,2181,5,150,0,0,2180,2178,1,0,0,0,2180,2179,1,0,0,0,2181,457,1,
  	0,0,0,2182,2183,5,141,0,0,2183,2186,5,142,0,0,2184,2187,3,438,219,0,2185,
  	2187,5,150,0,0,2186,2184,1,0,0,0,2186,2185,1,0,0,0,2187,459,1,0,0,0,2188,
  	2191,5,141,0,0,2189,2192,3,438,219,0,2190,2192,5,150,0,0,2191,2189,1,
  	0,0,0,2191,2190,1,0,0,0,2192,2193,1,0,0,0,2193,2196,5,144,0,0,2194,2197,
  	3,438,219,0,2195,2197,5,150,0,0,2196,2194,1,0,0,0,2196,2195,1,0,0,0,2197,
  	2198,1,0,0,0,2198,2199,5,142,0,0,2199,461,1,0,0,0,2200,2201,5,141,0,0,
  	2201,2204,5,144,0,0,2202,2205,3,438,219,0,2203,2205,5,150,0,0,2204,2202,
  	1,0,0,0,2204,2203,1,0,0,0,2205,2206,1,0,0,0,2206,2207,5,142,0,0,2207,
  	463,1,0,0,0,2208,2209,5,26,0,0,2209,2210,3,438,219,0,2210,465,1,0,0,0,
  	2211,2220,3,468,234,0,2212,2220,3,470,235,0,2213,2220,3,472,236,0,2214,
  	2220,3,474,237,0,2215,2220,3,476,238,0,2216,2220,3,478,239,0,2217,2220,
  	3,480,240,0,2218,2220,3,482,241,0,2219,2211,1,0,0,0,2219,2212,1,0,0,0,
  	2219,2213,1,0,0,0,2219,2214,1,0,0,0,2219,2215,1,0,0,0,2219,2216,1,0,0,
  	0,2219,2217,1,0,0,0,2219,2218,1,0,0,0,2220,467,1,0,0,0,2221,2222,7,19,
  	0,0,2222,469,1,0,0,0,2223,2224,7,20,0,0,2224,471,1,0,0,0,2225,2226,5,
  	11,0,0,2226,473,1,0,0,0,2227,2228,5,13,0,0,2228,475,1,0,0,0,2229,2230,
  	5,121,0,0,2230,477,1,0,0,0,2231,2232,7,21,0,0,2232,479,1,0,0,0,2233,2234,
  	5,101,0,0,2234,481,1,0,0,0,2235,2236,7,22,0,0,2236,483,1,0,0,0,2237,2238,
  	5,113,0,0,2238,485,1,0,0,0,2239,2240,5,139,0,0,2240,2248,5,140,0,0,2241,
  	2242,5,139,0,0,2242,2243,3,490,245,0,2243,2244,5,146,0,0,2244,2245,3,
  	488,244,0,2245,2246,5,140,0,0,2246,2248,1,0,0,0,2247,2239,1,0,0,0,2247,
  	2241,1,0,0,0,2248,487,1,0,0,0,2249,2254,3,490,245,0,2250,2251,5,146,0,
  	0,2251,2253,3,490,245,0,2252,2250,1,0,0,0,2253,2256,1,0,0,0,2254,2252,
  	1,0,0,0,2254,2255,1,0,0,0,2255,489,1,0,0,0,2256,2254,1,0,0,0,2257,2258,
  	5,130,0,0,2258,2260,5,165,0,0,2259,2257,1,0,0,0,2259,2260,1,0,0,0,2260,
  	2261,1,0,0,0,2261,2262,3,410,205,0,2262,491,1,0,0,0,2263,2264,5,54,0,
  	0,2264,2266,5,143,0,0,2265,2263,1,0,0,0,2265,2266,1,0,0,0,2266,2267,1,
  	0,0,0,2267,2272,3,494,247,0,2268,2269,5,143,0,0,2269,2271,3,494,247,0,
  	2270,2268,1,0,0,0,2271,2274,1,0,0,0,2272,2273,1,0,0,0,2272,2270,1,0,0,
  	0,2273,493,1,0,0,0,2274,2272,1,0,0,0,2275,2276,7,23,0,0,2276,495,1,0,
  	0,0,2277,2278,3,498,249,0,2278,497,1,0,0,0,2279,2287,3,500,250,0,2280,
  	2287,3,506,253,0,2281,2287,3,516,258,0,2282,2287,3,508,254,0,2283,2287,
  	3,510,255,0,2284,2287,3,512,256,0,2285,2287,3,514,257,0,2286,2279,1,0,
  	0,0,2286,2280,1,0,0,0,2286,2281,1,0,0,0,2286,2282,1,0,0,0,2286,2283,1,
  	0,0,0,2286,2284,1,0,0,0,2286,2285,1,0,0,0,2287,499,1,0,0,0,2288,2291,
  	3,502,251,0,2289,2291,3,504,252,0,2290,2288,1,0,0,0,2290,2289,1,0,0,0,
  	2291,501,1,0,0,0,2292,2293,7,24,0,0,2293,503,1,0,0,0,2294,2295,5,136,
  	0,0,2295,505,1,0,0,0,2296,2297,7,25,0,0,2297,507,1,0,0,0,2298,2299,5,
  	79,0,0,2299,509,1,0,0,0,2300,2301,5,119,0,0,2301,511,1,0,0,0,2302,2303,
  	5,28,0,0,2303,513,1,0,0,0,2304,2316,5,137,0,0,2305,2310,3,410,205,0,2306,
  	2307,5,146,0,0,2307,2309,3,410,205,0,2308,2306,1,0,0,0,2309,2312,1,0,
  	0,0,2310,2308,1,0,0,0,2310,2311,1,0,0,0,2311,2314,1,0,0,0,2312,2310,1,
  	0,0,0,2313,2315,5,146,0,0,2314,2313,1,0,0,0,2314,2315,1,0,0,0,2315,2317,
  	1,0,0,0,2316,2305,1,0,0,0,2316,2317,1,0,0,0,2317,2318,1,0,0,0,2318,2319,
  	5,138,0,0,2319,515,1,0,0,0,2320,2324,3,518,259,0,2321,2324,3,522,261,
  	0,2322,2324,3,520,260,0,2323,2320,1,0,0,0,2323,2321,1,0,0,0,2323,2322,
  	1,0,0,0,2324,517,1,0,0,0,2325,2327,5,224,0,0,2326,2328,5,237,0,0,2327,
  	2326,1,0,0,0,2328,2329,1,0,0,0,2329,2327,1,0,0,0,2329,2330,1,0,0,0,2330,
  	2331,1,0,0,0,2331,2340,5,236,0,0,2332,2334,5,225,0,0,2333,2335,5,235,
  	0,0,2334,2333,1,0,0,0,2335,2336,1,0,0,0,2336,2334,1,0,0,0,2336,2337,1,
  	0,0,0,2337,2338,1,0,0,0,2338,2340,5,234,0,0,2339,2325,1,0,0,0,2339,2332,
  	1,0,0,0,2340,519,1,0,0,0,2341,2345,5,227,0,0,2342,2344,5,230,0,0,2343,
  	2342,1,0,0,0,2344,2347,1,0,0,0,2345,2343,1,0,0,0,2345,2346,1,0,0,0,2346,
  	2348,1,0,0,0,2347,2345,1,0,0,0,2348,2358,5,229,0,0,2349,2353,5,226,0,
  	0,2350,2352,5,233,0,0,2351,2350,1,0,0,0,2352,2355,1,0,0,0,2353,2351,1,
  	0,0,0,2353,2354,1,0,0,0,2354,2356,1,0,0,0,2355,2353,1,0,0,0,2356,2358,
  	5,232,0,0,2357,2341,1,0,0,0,2357,2349,1,0,0,0,2358,521,1,0,0,0,2359,2373,
  	5,227,0,0,2360,2372,5,230,0,0,2361,2367,5,228,0,0,2362,2368,3,410,205,
  	0,2363,2364,3,490,245,0,2364,2365,5,146,0,0,2365,2366,3,488,244,0,2366,
  	2368,1,0,0,0,2367,2362,1,0,0,0,2367,2363,1,0,0,0,2368,2369,1,0,0,0,2369,
  	2370,5,138,0,0,2370,2372,1,0,0,0,2371,2360,1,0,0,0,2371,2361,1,0,0,0,
  	2372,2375,1,0,0,0,2373,2371,1,0,0,0,2373,2374,1,0,0,0,2374,2376,1,0,0,
  	0,2375,2373,1,0,0,0,2376,2396,5,229,0,0,2377,2391,5,226,0,0,2378,2390,
  	5,233,0,0,2379,2385,5,231,0,0,2380,2386,3,410,205,0,2381,2382,3,490,245,
  	0,2382,2383,5,146,0,0,2383,2384,3,488,244,0,2384,2386,1,0,0,0,2385,2380,
  	1,0,0,0,2385,2381,1,0,0,0,2386,2387,1,0,0,0,2387,2388,5,138,0,0,2388,
  	2390,1,0,0,0,2389,2378,1,0,0,0,2389,2379,1,0,0,0,2390,2393,1,0,0,0,2391,
  	2389,1,0,0,0,2391,2392,1,0,0,0,2392,2394,1,0,0,0,2393,2391,1,0,0,0,2394,
  	2396,5,232,0,0,2395,2359,1,0,0,0,2395,2377,1,0,0,0,2396,523,1,0,0,0,2397,
  	2398,6,262,-1,0,2398,2401,3,530,265,0,2399,2400,5,144,0,0,2400,2402,3,
  	320,160,0,2401,2399,1,0,0,0,2401,2402,1,0,0,0,2402,2420,1,0,0,0,2403,
  	2406,3,532,266,0,2404,2405,5,144,0,0,2405,2407,3,320,160,0,2406,2404,
  	1,0,0,0,2406,2407,1,0,0,0,2407,2420,1,0,0,0,2408,2411,3,534,267,0,2409,
  	2410,5,144,0,0,2410,2412,3,320,160,0,2411,2409,1,0,0,0,2411,2412,1,0,
  	0,0,2412,2420,1,0,0,0,2413,2420,3,536,268,0,2414,2420,3,538,269,0,2415,
  	2420,3,540,270,0,2416,2417,5,68,0,0,2417,2420,3,438,219,0,2418,2420,3,
  	410,205,0,2419,2397,1,0,0,0,2419,2403,1,0,0,0,2419,2408,1,0,0,0,2419,
  	2413,1,0,0,0,2419,2414,1,0,0,0,2419,2415,1,0,0,0,2419,2416,1,0,0,0,2419,
  	2418,1,0,0,0,2420,2426,1,0,0,0,2421,2422,10,2,0,0,2422,2423,5,5,0,0,2423,
  	2425,3,438,219,0,2424,2421,1,0,0,0,2425,2428,1,0,0,0,2426,2424,1,0,0,
  	0,2426,2427,1,0,0,0,2427,525,1,0,0,0,2428,2426,1,0,0,0,2429,2434,3,528,
  	264,0,2430,2431,5,146,0,0,2431,2433,3,528,264,0,2432,2430,1,0,0,0,2433,
  	2436,1,0,0,0,2434,2432,1,0,0,0,2434,2435,1,0,0,0,2435,2438,1,0,0,0,2436,
  	2434,1,0,0,0,2437,2439,5,146,0,0,2438,2437,1,0,0,0,2438,2439,1,0,0,0,
  	2439,527,1,0,0,0,2440,2445,3,524,262,0,2441,2442,5,130,0,0,2442,2443,
  	5,144,0,0,2443,2445,3,524,262,0,2444,2440,1,0,0,0,2444,2441,1,0,0,0,2445,
  	529,1,0,0,0,2446,2447,5,150,0,0,2447,531,1,0,0,0,2448,2449,5,130,0,0,
  	2449,533,1,0,0,0,2450,2451,5,70,0,0,2451,2452,5,126,0,0,2452,2456,3,524,
  	262,0,2453,2454,5,70,0,0,2454,2456,3,524,262,0,2455,2450,1,0,0,0,2455,
  	2453,1,0,0,0,2456,535,1,0,0,0,2457,2459,5,139,0,0,2458,2460,3,526,263,
  	0,2459,2458,1,0,0,0,2459,2460,1,0,0,0,2460,2461,1,0,0,0,2461,2462,5,140,
  	0,0,2462,537,1,0,0,0,2463,2465,3,438,219,0,2464,2463,1,0,0,0,2464,2465,
  	1,0,0,0,2465,2466,1,0,0,0,2466,2467,5,143,0,0,2467,2469,3,242,121,0,2468,
  	2470,3,536,268,0,2469,2468,1,0,0,0,2469,2470,1,0,0,0,2470,539,1,0,0,0,
  	2471,2472,5,130,0,0,2472,2473,5,148,0,0,2473,541,1,0,0,0,2474,2475,3,
  	410,205,0,2475,543,1,0,0,0,295,545,553,556,559,564,568,576,580,588,591,
  	598,601,626,630,633,641,644,647,650,653,656,662,665,668,671,674,677,685,
  	688,691,694,700,711,718,724,734,738,743,753,758,768,774,789,792,795,801,
  	804,807,821,829,842,847,857,863,878,881,884,890,893,896,910,917,920,923,
  	928,938,945,948,951,956,968,973,980,1003,1008,1014,1017,1020,1039,1044,
  	1047,1055,1058,1061,1069,1072,1075,1084,1090,1093,1096,1099,1118,1123,
  	1131,1136,1139,1144,1149,1154,1156,1161,1166,1168,1175,1182,1186,1189,
  	1192,1195,1202,1205,1208,1211,1226,1247,1250,1254,1257,1260,1263,1266,
  	1269,1272,1282,1285,1294,1298,1301,1306,1315,1319,1324,1327,1340,1343,
  	1349,1352,1361,1365,1372,1376,1380,1388,1391,1399,1408,1415,1419,1428,
  	1435,1439,1443,1446,1450,1462,1465,1471,1478,1484,1488,1494,1505,1514,
  	1517,1524,1528,1534,1543,1547,1550,1555,1558,1568,1574,1580,1587,1590,
  	1593,1604,1610,1618,1623,1627,1640,1645,1649,1653,1662,1666,1670,1678,
  	1684,1693,1725,1730,1732,1746,1750,1795,1799,1803,1807,1813,1822,1836,
  	1891,1895,1897,1902,1927,1938,1942,1946,1948,1950,1961,1965,1970,1974,
  	1981,1988,1992,1999,2003,2009,2013,2018,2022,2028,2031,2037,2042,2046,
  	2077,2081,2085,2089,2093,2099,2101,2115,2121,2131,2134,2136,2141,2147,
  	2150,2164,2169,2171,2175,2180,2186,2191,2196,2204,2219,2247,2254,2259,
  	2265,2272,2286,2290,2310,2314,2316,2323,2329,2336,2339,2345,2353,2357,
  	2367,2371,2373,2385,2389,2391,2395,2401,2406,2411,2419,2426,2434,2438,
  	2444,2455,2459,2464,2469
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  atemparserParserStaticData = staticData.release();
}

}

AtemParser::AtemParser(TokenStream *input) : AtemParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

AtemParser::AtemParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  AtemParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *atemparserParserStaticData->atn, atemparserParserStaticData->decisionToDFA, atemparserParserStaticData->sharedContextCache, options);
}

AtemParser::~AtemParser() {
  delete _interpreter;
}

const atn::ATN& AtemParser::getATN() const {
  return *atemparserParserStaticData->atn;
}

std::string AtemParser::getGrammarFileName() const {
  return "AtemParser.g4";
}

const std::vector<std::string>& AtemParser::getRuleNames() const {
  return atemparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& AtemParser::getVocabulary() const {
  return atemparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView AtemParser::getSerializedATN() const {
  return atemparserParserStaticData->serializedATN;
}


//----------------- ProgramContext ------------------------------------------------------------------

AtemParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::ProgramContext::EOF() {
  return getToken(AtemParser::EOF, 0);
}

AtemParser::StatementsContext* AtemParser::ProgramContext::statements() {
  return getRuleContext<AtemParser::StatementsContext>(0);
}


size_t AtemParser::ProgramContext::getRuleIndex() const {
  return AtemParser::RuleProgram;
}

void AtemParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void AtemParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}

AtemParser::ProgramContext* AtemParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, AtemParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(545);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4406791681953809004) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 9223296701112183311) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 8792488957) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 193)) & 32212257801) != 0)) {
      setState(544);
      statements();
    }
    setState(547);
    match(AtemParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

AtemParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Declaration_statementContext* AtemParser::StatementContext::declaration_statement() {
  return getRuleContext<AtemParser::Declaration_statementContext>(0);
}

AtemParser::Import_statementContext* AtemParser::StatementContext::import_statement() {
  return getRuleContext<AtemParser::Import_statementContext>(0);
}

AtemParser::Defer_statementContext* AtemParser::StatementContext::defer_statement() {
  return getRuleContext<AtemParser::Defer_statementContext>(0);
}

AtemParser::ExpressionContext* AtemParser::StatementContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

tree::TerminalNode* AtemParser::StatementContext::Semicolon() {
  return getToken(AtemParser::Semicolon, 0);
}


size_t AtemParser::StatementContext::getRuleIndex() const {
  return AtemParser::RuleStatement;
}

void AtemParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void AtemParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

AtemParser::StatementContext* AtemParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 2, AtemParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(559);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordAlias:
      case AtemParser::KeywordAny:
      case AtemParser::KeywordAssert:
      case AtemParser::KeywordAsync:
      case AtemParser::KeywordAwait:
      case AtemParser::KeywordBool:
      case AtemParser::KeywordBreak:
      case AtemParser::KeywordByte:
      case AtemParser::KeywordChar8:
      case AtemParser::KeywordChar16:
      case AtemParser::KeywordChar32:
      case AtemParser::KeywordClass:
      case AtemParser::KeywordCompileTimeInt:
      case AtemParser::KeywordCompileTimeFloat:
      case AtemParser::KeywordCompileTimeString:
      case AtemParser::KeywordCompileTimeChar:
      case AtemParser::KeywordComptime:
      case AtemParser::KeywordConst:
      case AtemParser::KeywordContinue:
      case AtemParser::KeywordDefault:
      case AtemParser::KeywordDefer:
      case AtemParser::KeywordEnum:
      case AtemParser::KeywordExtend:
      case AtemParser::KeywordFallthrough:
      case AtemParser::KeywordFalse:
      case AtemParser::KeywordFilePrivate:
      case AtemParser::KeywordFloat16:
      case AtemParser::KeywordFloat32:
      case AtemParser::KeywordFloat64:
      case AtemParser::KeywordFloat80:
      case AtemParser::KeywordFloat128:
      case AtemParser::KeywordFor:
      case AtemParser::KeywordFunc:
      case AtemParser::KeywordGlobal:
      case AtemParser::KeywordIf:
      case AtemParser::KeywordImport:
      case AtemParser::KeywordInt8:
      case AtemParser::KeywordInt16:
      case AtemParser::KeywordInt32:
      case AtemParser::KeywordInt64:
      case AtemParser::KeywordInt128:
      case AtemParser::KeywordInternal:
      case AtemParser::KeywordModule:
      case AtemParser::KeywordNamespace:
      case AtemParser::KeywordNever:
      case AtemParser::KeywordNot:
      case AtemParser::KeywordNull:
      case AtemParser::KeywordOpen:
      case AtemParser::KeywordOuter:
      case AtemParser::KeywordPackage:
      case AtemParser::KeywordPrivate:
      case AtemParser::KeywordProject:
      case AtemParser::KeywordProtocol:
      case AtemParser::KeywordPublic:
      case AtemParser::KeywordRepeat:
      case AtemParser::KeywordReturn:
      case AtemParser::KeywordSelf:
      case AtemParser::KeywordSome:
      case AtemParser::KeywordStatic:
      case AtemParser::KeywordString:
      case AtemParser::KeywordStruct:
      case AtemParser::KeywordSuper:
      case AtemParser::KeywordTest:
      case AtemParser::KeywordThis:
      case AtemParser::KeywordThreadLocal:
      case AtemParser::KeywordThrow:
      case AtemParser::KeywordTrue:
      case AtemParser::KeywordTry:
      case AtemParser::KeywordType:
      case AtemParser::KeywordUInt8:
      case AtemParser::KeywordUInt16:
      case AtemParser::KeywordUInt32:
      case AtemParser::KeywordUInt64:
      case AtemParser::KeywordUInt128:
      case AtemParser::KeywordUndefined:
      case AtemParser::KeywordUnion:
      case AtemParser::KeywordUnit:
      case AtemParser::KeywordUnreachable:
      case AtemParser::KeywordUse:
      case AtemParser::KeywordUsing:
      case AtemParser::KeywordVal:
      case AtemParser::KeywordVar:
      case AtemParser::KeywordWhile:
      case AtemParser::Identifier:
      case AtemParser::BinaryLiteral:
      case AtemParser::OctalLiteral:
      case AtemParser::DecimalDigits:
      case AtemParser::DecimalLiteral:
      case AtemParser::HexadecimalLiteral:
      case AtemParser::FloatingPointLiteral:
      case AtemParser::LeftCurly:
      case AtemParser::LeftParenthese:
      case AtemParser::RightParenthese:
      case AtemParser::LeftSquare:
      case AtemParser::Dot:
      case AtemParser::Question:
      case AtemParser::Sub:
      case AtemParser::OverflowingSub:
      case AtemParser::RemainderDivide:
      case AtemParser::BitNot:
      case AtemParser::BitXor:
      case AtemParser::Reflect:
      case AtemParser::Reify:
      case AtemParser::MultiLineExtendedStringOpen:
      case AtemParser::SingleLineExtendedStringOpen:
      case AtemParser::MultiLineStringOpen:
      case AtemParser::SingleLineStringOpen: {
        enterOuterAlt(_localctx, 1);
        setState(553);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
        case 1: {
          setState(549);
          declaration_statement();
          break;
        }

        case 2: {
          setState(550);
          import_statement();
          break;
        }

        case 3: {
          setState(551);
          defer_statement();
          break;
        }

        case 4: {
          setState(552);
          expression(0);
          break;
        }

        default:
          break;
        }
        setState(556);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
        case 1: {
          setState(555);
          match(AtemParser::Semicolon);
          break;
        }

        default:
          break;
        }
        break;
      }

      case AtemParser::Semicolon: {
        enterOuterAlt(_localctx, 2);
        setState(558);
        match(AtemParser::Semicolon);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementsContext ------------------------------------------------------------------

AtemParser::StatementsContext::StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::StatementContext *> AtemParser::StatementsContext::statement() {
  return getRuleContexts<AtemParser::StatementContext>();
}

AtemParser::StatementContext* AtemParser::StatementsContext::statement(size_t i) {
  return getRuleContext<AtemParser::StatementContext>(i);
}


size_t AtemParser::StatementsContext::getRuleIndex() const {
  return AtemParser::RuleStatements;
}

void AtemParser::StatementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatements(this);
}

void AtemParser::StatementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatements(this);
}

AtemParser::StatementsContext* AtemParser::statements() {
  StatementsContext *_localctx = _tracker.createInstance<StatementsContext>(_ctx, getState());
  enterRule(_localctx, 4, AtemParser::RuleStatements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(562); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(561);
      statement();
      setState(564); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4406791681953809004) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 9223296701112183311) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 8792488957) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 193)) & 32212257801) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declaration_statement_or_listContext ------------------------------------------------------------------

AtemParser::Declaration_statement_or_listContext::Declaration_statement_or_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Declaration_statementContext* AtemParser::Declaration_statement_or_listContext::declaration_statement() {
  return getRuleContext<AtemParser::Declaration_statementContext>(0);
}

AtemParser::Declaration_statement_listContext* AtemParser::Declaration_statement_or_listContext::declaration_statement_list() {
  return getRuleContext<AtemParser::Declaration_statement_listContext>(0);
}


size_t AtemParser::Declaration_statement_or_listContext::getRuleIndex() const {
  return AtemParser::RuleDeclaration_statement_or_list;
}

void AtemParser::Declaration_statement_or_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaration_statement_or_list(this);
}

void AtemParser::Declaration_statement_or_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaration_statement_or_list(this);
}

AtemParser::Declaration_statement_or_listContext* AtemParser::declaration_statement_or_list() {
  Declaration_statement_or_listContext *_localctx = _tracker.createInstance<Declaration_statement_or_listContext>(_ctx, getState());
  enterRule(_localctx, 6, AtemParser::RuleDeclaration_statement_or_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(568);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordFilePrivate:
      case AtemParser::KeywordGlobal:
      case AtemParser::KeywordInternal:
      case AtemParser::KeywordModule:
      case AtemParser::KeywordOpen:
      case AtemParser::KeywordOuter:
      case AtemParser::KeywordPackage:
      case AtemParser::KeywordPrivate:
      case AtemParser::KeywordPublic:
      case AtemParser::KeywordSelf:
      case AtemParser::KeywordStatic:
      case AtemParser::KeywordSuper:
      case AtemParser::KeywordThis:
      case AtemParser::KeywordThreadLocal:
      case AtemParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(566);
        declaration_statement();
        break;
      }

      case AtemParser::LeftCurly: {
        enterOuterAlt(_localctx, 2);
        setState(567);
        declaration_statement_list();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declaration_statement_listContext ------------------------------------------------------------------

AtemParser::Declaration_statement_listContext::Declaration_statement_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Declaration_statement_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

std::vector<AtemParser::Declaration_statementContext *> AtemParser::Declaration_statement_listContext::declaration_statement() {
  return getRuleContexts<AtemParser::Declaration_statementContext>();
}

AtemParser::Declaration_statementContext* AtemParser::Declaration_statement_listContext::declaration_statement(size_t i) {
  return getRuleContext<AtemParser::Declaration_statementContext>(i);
}

tree::TerminalNode* AtemParser::Declaration_statement_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}

std::vector<tree::TerminalNode *> AtemParser::Declaration_statement_listContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Declaration_statement_listContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}


size_t AtemParser::Declaration_statement_listContext::getRuleIndex() const {
  return AtemParser::RuleDeclaration_statement_list;
}

void AtemParser::Declaration_statement_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaration_statement_list(this);
}

void AtemParser::Declaration_statement_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaration_statement_list(this);
}

AtemParser::Declaration_statement_listContext* AtemParser::declaration_statement_list() {
  Declaration_statement_listContext *_localctx = _tracker.createInstance<Declaration_statement_listContext>(_ctx, getState());
  enterRule(_localctx, 8, AtemParser::RuleDeclaration_statement_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(570);
    match(AtemParser::LeftCurly);
    setState(571);
    declaration_statement();
    setState(576);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(572);
        match(AtemParser::Comma);
        setState(573);
        declaration_statement(); 
      }
      setState(578);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
    }
    setState(580);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Comma) {
      setState(579);
      match(AtemParser::Comma);
    }
    setState(582);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declaration_statementContext ------------------------------------------------------------------

AtemParser::Declaration_statementContext::Declaration_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::DeclaratorContext* AtemParser::Declaration_statementContext::declarator() {
  return getRuleContext<AtemParser::DeclaratorContext>(0);
}

AtemParser::Declaration_expressionContext* AtemParser::Declaration_statementContext::declaration_expression() {
  return getRuleContext<AtemParser::Declaration_expressionContext>(0);
}


size_t AtemParser::Declaration_statementContext::getRuleIndex() const {
  return AtemParser::RuleDeclaration_statement;
}

void AtemParser::Declaration_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaration_statement(this);
}

void AtemParser::Declaration_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaration_statement(this);
}

AtemParser::Declaration_statementContext* AtemParser::declaration_statement() {
  Declaration_statementContext *_localctx = _tracker.createInstance<Declaration_statementContext>(_ctx, getState());
  enterRule(_localctx, 10, AtemParser::RuleDeclaration_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(584);
    declarator();
    setState(585);
    declaration_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclaratorContext ------------------------------------------------------------------

AtemParser::DeclaratorContext::DeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Declarator_nameContext* AtemParser::DeclaratorContext::declarator_name() {
  return getRuleContext<AtemParser::Declarator_nameContext>(0);
}

AtemParser::Declare_operatorContext* AtemParser::DeclaratorContext::declare_operator() {
  return getRuleContext<AtemParser::Declare_operatorContext>(0);
}

AtemParser::Access_level_specifierContext* AtemParser::DeclaratorContext::access_level_specifier() {
  return getRuleContext<AtemParser::Access_level_specifierContext>(0);
}

AtemParser::Storage_level_specifierContext* AtemParser::DeclaratorContext::storage_level_specifier() {
  return getRuleContext<AtemParser::Storage_level_specifierContext>(0);
}


size_t AtemParser::DeclaratorContext::getRuleIndex() const {
  return AtemParser::RuleDeclarator;
}

void AtemParser::DeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarator(this);
}

void AtemParser::DeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarator(this);
}

AtemParser::DeclaratorContext* AtemParser::declarator() {
  DeclaratorContext *_localctx = _tracker.createInstance<DeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 12, AtemParser::RuleDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(588);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & 158604569083905) != 0)) {
      setState(587);
      access_level_specifier();
    }
    setState(591);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      setState(590);
      storage_level_specifier();
      break;
    }

    default:
      break;
    }
    setState(593);
    declarator_name();
    setState(594);
    declare_operator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_operatorContext ------------------------------------------------------------------

AtemParser::Declare_operatorContext::Declare_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Declare_operatorContext::Colon() {
  return getToken(AtemParser::Colon, 0);
}

tree::TerminalNode* AtemParser::Declare_operatorContext::Assign() {
  return getToken(AtemParser::Assign, 0);
}

AtemParser::Type_expressionContext* AtemParser::Declare_operatorContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

AtemParser::AttributesContext* AtemParser::Declare_operatorContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}


size_t AtemParser::Declare_operatorContext::getRuleIndex() const {
  return AtemParser::RuleDeclare_operator;
}

void AtemParser::Declare_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclare_operator(this);
}

void AtemParser::Declare_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclare_operator(this);
}

AtemParser::Declare_operatorContext* AtemParser::declare_operator() {
  Declare_operatorContext *_localctx = _tracker.createInstance<Declare_operatorContext>(_ctx, getState());
  enterRule(_localctx, 14, AtemParser::RuleDeclare_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(596);
    match(AtemParser::Colon);
    setState(601);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4555424008199784432) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 467856678106178055) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 1587717) != 0)) {
      setState(598);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AtemParser::At) {
        setState(597);
        attributes();
      }
      setState(600);
      type_expression(0);
    }
    setState(603);
    match(AtemParser::Assign);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Empty_declare_operatorContext ------------------------------------------------------------------

AtemParser::Empty_declare_operatorContext::Empty_declare_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Empty_declare_operatorContext::Colon() {
  return getToken(AtemParser::Colon, 0);
}

tree::TerminalNode* AtemParser::Empty_declare_operatorContext::Assign() {
  return getToken(AtemParser::Assign, 0);
}


size_t AtemParser::Empty_declare_operatorContext::getRuleIndex() const {
  return AtemParser::RuleEmpty_declare_operator;
}

void AtemParser::Empty_declare_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmpty_declare_operator(this);
}

void AtemParser::Empty_declare_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmpty_declare_operator(this);
}

AtemParser::Empty_declare_operatorContext* AtemParser::empty_declare_operator() {
  Empty_declare_operatorContext *_localctx = _tracker.createInstance<Empty_declare_operatorContext>(_ctx, getState());
  enterRule(_localctx, 16, AtemParser::RuleEmpty_declare_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(605);
    match(AtemParser::Colon);
    setState(606);
    match(AtemParser::Assign);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declarator_nameContext ------------------------------------------------------------------

AtemParser::Declarator_nameContext::Declarator_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Path_expressionContext* AtemParser::Declarator_nameContext::path_expression() {
  return getRuleContext<AtemParser::Path_expressionContext>(0);
}


size_t AtemParser::Declarator_nameContext::getRuleIndex() const {
  return AtemParser::RuleDeclarator_name;
}

void AtemParser::Declarator_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarator_name(this);
}

void AtemParser::Declarator_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarator_name(this);
}

AtemParser::Declarator_nameContext* AtemParser::declarator_name() {
  Declarator_nameContext *_localctx = _tracker.createInstance<Declarator_nameContext>(_ctx, getState());
  enterRule(_localctx, 18, AtemParser::RuleDeclarator_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(608);
    path_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declaration_expressionContext ------------------------------------------------------------------

AtemParser::Declaration_expressionContext::Declaration_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Package_declarationContext* AtemParser::Declaration_expressionContext::package_declaration() {
  return getRuleContext<AtemParser::Package_declarationContext>(0);
}

AtemParser::Project_declarationContext* AtemParser::Declaration_expressionContext::project_declaration() {
  return getRuleContext<AtemParser::Project_declarationContext>(0);
}

AtemParser::Module_declarationContext* AtemParser::Declaration_expressionContext::module_declaration() {
  return getRuleContext<AtemParser::Module_declarationContext>(0);
}

AtemParser::Namespace_declarationContext* AtemParser::Declaration_expressionContext::namespace_declaration() {
  return getRuleContext<AtemParser::Namespace_declarationContext>(0);
}

AtemParser::Function_declarationContext* AtemParser::Declaration_expressionContext::function_declaration() {
  return getRuleContext<AtemParser::Function_declarationContext>(0);
}

AtemParser::Variable_declarationContext* AtemParser::Declaration_expressionContext::variable_declaration() {
  return getRuleContext<AtemParser::Variable_declarationContext>(0);
}

AtemParser::Constant_declarationContext* AtemParser::Declaration_expressionContext::constant_declaration() {
  return getRuleContext<AtemParser::Constant_declarationContext>(0);
}

AtemParser::Import_alias_declarationContext* AtemParser::Declaration_expressionContext::import_alias_declaration() {
  return getRuleContext<AtemParser::Import_alias_declarationContext>(0);
}

AtemParser::Typealias_declarationContext* AtemParser::Declaration_expressionContext::typealias_declaration() {
  return getRuleContext<AtemParser::Typealias_declarationContext>(0);
}

AtemParser::Struct_declarationContext* AtemParser::Declaration_expressionContext::struct_declaration() {
  return getRuleContext<AtemParser::Struct_declarationContext>(0);
}

AtemParser::Class_declarationContext* AtemParser::Declaration_expressionContext::class_declaration() {
  return getRuleContext<AtemParser::Class_declarationContext>(0);
}

AtemParser::Protocol_declarationContext* AtemParser::Declaration_expressionContext::protocol_declaration() {
  return getRuleContext<AtemParser::Protocol_declarationContext>(0);
}

AtemParser::Union_declarationContext* AtemParser::Declaration_expressionContext::union_declaration() {
  return getRuleContext<AtemParser::Union_declarationContext>(0);
}

AtemParser::Enum_declarationContext* AtemParser::Declaration_expressionContext::enum_declaration() {
  return getRuleContext<AtemParser::Enum_declarationContext>(0);
}

AtemParser::Extension_declarationContext* AtemParser::Declaration_expressionContext::extension_declaration() {
  return getRuleContext<AtemParser::Extension_declarationContext>(0);
}

AtemParser::Test_declarationContext* AtemParser::Declaration_expressionContext::test_declaration() {
  return getRuleContext<AtemParser::Test_declarationContext>(0);
}


size_t AtemParser::Declaration_expressionContext::getRuleIndex() const {
  return AtemParser::RuleDeclaration_expression;
}

void AtemParser::Declaration_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaration_expression(this);
}

void AtemParser::Declaration_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaration_expression(this);
}

AtemParser::Declaration_expressionContext* AtemParser::declaration_expression() {
  Declaration_expressionContext *_localctx = _tracker.createInstance<Declaration_expressionContext>(_ctx, getState());
  enterRule(_localctx, 20, AtemParser::RuleDeclaration_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(626);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordPackage: {
        enterOuterAlt(_localctx, 1);
        setState(610);
        package_declaration();
        break;
      }

      case AtemParser::KeywordProject: {
        enterOuterAlt(_localctx, 2);
        setState(611);
        project_declaration();
        break;
      }

      case AtemParser::KeywordModule: {
        enterOuterAlt(_localctx, 3);
        setState(612);
        module_declaration();
        break;
      }

      case AtemParser::KeywordNamespace: {
        enterOuterAlt(_localctx, 4);
        setState(613);
        namespace_declaration();
        break;
      }

      case AtemParser::KeywordFunc: {
        enterOuterAlt(_localctx, 5);
        setState(614);
        function_declaration();
        break;
      }

      case AtemParser::KeywordVar: {
        enterOuterAlt(_localctx, 6);
        setState(615);
        variable_declaration();
        break;
      }

      case AtemParser::KeywordVal: {
        enterOuterAlt(_localctx, 7);
        setState(616);
        constant_declaration();
        break;
      }

      case AtemParser::KeywordImport: {
        enterOuterAlt(_localctx, 8);
        setState(617);
        import_alias_declaration();
        break;
      }

      case AtemParser::KeywordAlias: {
        enterOuterAlt(_localctx, 9);
        setState(618);
        typealias_declaration();
        break;
      }

      case AtemParser::KeywordStruct: {
        enterOuterAlt(_localctx, 10);
        setState(619);
        struct_declaration();
        break;
      }

      case AtemParser::KeywordClass: {
        enterOuterAlt(_localctx, 11);
        setState(620);
        class_declaration();
        break;
      }

      case AtemParser::KeywordProtocol: {
        enterOuterAlt(_localctx, 12);
        setState(621);
        protocol_declaration();
        break;
      }

      case AtemParser::KeywordUnion: {
        enterOuterAlt(_localctx, 13);
        setState(622);
        union_declaration();
        break;
      }

      case AtemParser::KeywordEnum: {
        enterOuterAlt(_localctx, 14);
        setState(623);
        enum_declaration();
        break;
      }

      case AtemParser::KeywordExtend: {
        enterOuterAlt(_localctx, 15);
        setState(624);
        extension_declaration();
        break;
      }

      case AtemParser::KeywordTest: {
        enterOuterAlt(_localctx, 16);
        setState(625);
        test_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Test_declarationContext ------------------------------------------------------------------

AtemParser::Test_declarationContext::Test_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Test_declarationContext::KeywordTest() {
  return getToken(AtemParser::KeywordTest, 0);
}

AtemParser::Code_block_no_labelContext* AtemParser::Test_declarationContext::code_block_no_label() {
  return getRuleContext<AtemParser::Code_block_no_labelContext>(0);
}

AtemParser::AttributesContext* AtemParser::Test_declarationContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}

AtemParser::Test_nameContext* AtemParser::Test_declarationContext::test_name() {
  return getRuleContext<AtemParser::Test_nameContext>(0);
}


size_t AtemParser::Test_declarationContext::getRuleIndex() const {
  return AtemParser::RuleTest_declaration;
}

void AtemParser::Test_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTest_declaration(this);
}

void AtemParser::Test_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTest_declaration(this);
}

AtemParser::Test_declarationContext* AtemParser::test_declaration() {
  Test_declarationContext *_localctx = _tracker.createInstance<Test_declarationContext>(_ctx, getState());
  enterRule(_localctx, 22, AtemParser::RuleTest_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(628);
    match(AtemParser::KeywordTest);
    setState(630);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(629);
      attributes();
    }
    setState(633);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 224) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 224)) & 15) != 0)) {
      setState(632);
      test_name();
    }
    setState(635);
    code_block_no_label();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Test_nameContext ------------------------------------------------------------------

AtemParser::Test_nameContext::Test_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::String_literalContext* AtemParser::Test_nameContext::string_literal() {
  return getRuleContext<AtemParser::String_literalContext>(0);
}


size_t AtemParser::Test_nameContext::getRuleIndex() const {
  return AtemParser::RuleTest_name;
}

void AtemParser::Test_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTest_name(this);
}

void AtemParser::Test_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTest_name(this);
}

AtemParser::Test_nameContext* AtemParser::test_name() {
  Test_nameContext *_localctx = _tracker.createInstance<Test_nameContext>(_ctx, getState());
  enterRule(_localctx, 24, AtemParser::RuleTest_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(637);
    string_literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_declarationContext ------------------------------------------------------------------

AtemParser::Struct_declarationContext::Struct_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Struct_declarationContext::KeywordStruct() {
  return getToken(AtemParser::KeywordStruct, 0);
}

AtemParser::Member_listContext* AtemParser::Struct_declarationContext::member_list() {
  return getRuleContext<AtemParser::Member_listContext>(0);
}

AtemParser::Udt_parameter_clauseContext* AtemParser::Struct_declarationContext::udt_parameter_clause() {
  return getRuleContext<AtemParser::Udt_parameter_clauseContext>(0);
}

AtemParser::AttributesContext* AtemParser::Struct_declarationContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}

AtemParser::Final_specifierContext* AtemParser::Struct_declarationContext::final_specifier() {
  return getRuleContext<AtemParser::Final_specifierContext>(0);
}

AtemParser::Extension_listContext* AtemParser::Struct_declarationContext::extension_list() {
  return getRuleContext<AtemParser::Extension_listContext>(0);
}

AtemParser::Initializer_listContext* AtemParser::Struct_declarationContext::initializer_list() {
  return getRuleContext<AtemParser::Initializer_listContext>(0);
}

AtemParser::Deinitializer_listContext* AtemParser::Struct_declarationContext::deinitializer_list() {
  return getRuleContext<AtemParser::Deinitializer_listContext>(0);
}


size_t AtemParser::Struct_declarationContext::getRuleIndex() const {
  return AtemParser::RuleStruct_declaration;
}

void AtemParser::Struct_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_declaration(this);
}

void AtemParser::Struct_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_declaration(this);
}

AtemParser::Struct_declarationContext* AtemParser::struct_declaration() {
  Struct_declarationContext *_localctx = _tracker.createInstance<Struct_declarationContext>(_ctx, getState());
  enterRule(_localctx, 26, AtemParser::RuleStruct_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(639);
    match(AtemParser::KeywordStruct);
    setState(641);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::LeftParenthese) {
      setState(640);
      udt_parameter_clause();
    }
    setState(644);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(643);
      attributes();
    }
    setState(647);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordFinal) {
      setState(646);
      final_specifier();
    }
    setState(650);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordExtend) {
      setState(649);
      extension_list();
    }
    setState(653);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordInit) {
      setState(652);
      initializer_list();
    }
    setState(656);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordDeinit) {
      setState(655);
      deinitializer_list();
    }
    setState(658);
    member_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_declarationContext ------------------------------------------------------------------

AtemParser::Class_declarationContext::Class_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Class_declarationContext::KeywordClass() {
  return getToken(AtemParser::KeywordClass, 0);
}

AtemParser::Member_listContext* AtemParser::Class_declarationContext::member_list() {
  return getRuleContext<AtemParser::Member_listContext>(0);
}

AtemParser::Udt_parameter_clauseContext* AtemParser::Class_declarationContext::udt_parameter_clause() {
  return getRuleContext<AtemParser::Udt_parameter_clauseContext>(0);
}

AtemParser::AttributesContext* AtemParser::Class_declarationContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}

AtemParser::Final_specifierContext* AtemParser::Class_declarationContext::final_specifier() {
  return getRuleContext<AtemParser::Final_specifierContext>(0);
}

AtemParser::Extension_listContext* AtemParser::Class_declarationContext::extension_list() {
  return getRuleContext<AtemParser::Extension_listContext>(0);
}

AtemParser::Initializer_listContext* AtemParser::Class_declarationContext::initializer_list() {
  return getRuleContext<AtemParser::Initializer_listContext>(0);
}

AtemParser::Deinitializer_listContext* AtemParser::Class_declarationContext::deinitializer_list() {
  return getRuleContext<AtemParser::Deinitializer_listContext>(0);
}


size_t AtemParser::Class_declarationContext::getRuleIndex() const {
  return AtemParser::RuleClass_declaration;
}

void AtemParser::Class_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_declaration(this);
}

void AtemParser::Class_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_declaration(this);
}

AtemParser::Class_declarationContext* AtemParser::class_declaration() {
  Class_declarationContext *_localctx = _tracker.createInstance<Class_declarationContext>(_ctx, getState());
  enterRule(_localctx, 28, AtemParser::RuleClass_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(660);
    match(AtemParser::KeywordClass);
    setState(662);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::LeftParenthese) {
      setState(661);
      udt_parameter_clause();
    }
    setState(665);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(664);
      attributes();
    }
    setState(668);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordFinal) {
      setState(667);
      final_specifier();
    }
    setState(671);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordExtend) {
      setState(670);
      extension_list();
    }
    setState(674);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordInit) {
      setState(673);
      initializer_list();
    }
    setState(677);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordDeinit) {
      setState(676);
      deinitializer_list();
    }
    setState(679);
    member_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extension_declarationContext ------------------------------------------------------------------

AtemParser::Extension_declarationContext::Extension_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Extension_declarationContext::KeywordExtend() {
  return getToken(AtemParser::KeywordExtend, 0);
}

AtemParser::Path_expressionContext* AtemParser::Extension_declarationContext::path_expression() {
  return getRuleContext<AtemParser::Path_expressionContext>(0);
}

tree::TerminalNode* AtemParser::Extension_declarationContext::KeywordWith() {
  return getToken(AtemParser::KeywordWith, 0);
}

AtemParser::Member_listContext* AtemParser::Extension_declarationContext::member_list() {
  return getRuleContext<AtemParser::Member_listContext>(0);
}

AtemParser::AttributesContext* AtemParser::Extension_declarationContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}

AtemParser::Extension_listContext* AtemParser::Extension_declarationContext::extension_list() {
  return getRuleContext<AtemParser::Extension_listContext>(0);
}

AtemParser::Initializer_listContext* AtemParser::Extension_declarationContext::initializer_list() {
  return getRuleContext<AtemParser::Initializer_listContext>(0);
}

AtemParser::Deinitializer_listContext* AtemParser::Extension_declarationContext::deinitializer_list() {
  return getRuleContext<AtemParser::Deinitializer_listContext>(0);
}


size_t AtemParser::Extension_declarationContext::getRuleIndex() const {
  return AtemParser::RuleExtension_declaration;
}

void AtemParser::Extension_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtension_declaration(this);
}

void AtemParser::Extension_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtension_declaration(this);
}

AtemParser::Extension_declarationContext* AtemParser::extension_declaration() {
  Extension_declarationContext *_localctx = _tracker.createInstance<Extension_declarationContext>(_ctx, getState());
  enterRule(_localctx, 30, AtemParser::RuleExtension_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(681);
    match(AtemParser::KeywordExtend);
    setState(682);
    path_expression();
    setState(683);
    match(AtemParser::KeywordWith);
    setState(685);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(684);
      attributes();
    }
    setState(688);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordExtend) {
      setState(687);
      extension_list();
    }
    setState(691);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordInit) {
      setState(690);
      initializer_list();
    }
    setState(694);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordDeinit) {
      setState(693);
      deinitializer_list();
    }
    setState(696);
    member_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Udt_parameter_clauseContext ------------------------------------------------------------------

AtemParser::Udt_parameter_clauseContext::Udt_parameter_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Udt_parameter_clauseContext::LeftParenthese() {
  return getToken(AtemParser::LeftParenthese, 0);
}

tree::TerminalNode* AtemParser::Udt_parameter_clauseContext::RightParenthese() {
  return getToken(AtemParser::RightParenthese, 0);
}

AtemParser::Function_parameter_listContext* AtemParser::Udt_parameter_clauseContext::function_parameter_list() {
  return getRuleContext<AtemParser::Function_parameter_listContext>(0);
}


size_t AtemParser::Udt_parameter_clauseContext::getRuleIndex() const {
  return AtemParser::RuleUdt_parameter_clause;
}

void AtemParser::Udt_parameter_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUdt_parameter_clause(this);
}

void AtemParser::Udt_parameter_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUdt_parameter_clause(this);
}

AtemParser::Udt_parameter_clauseContext* AtemParser::udt_parameter_clause() {
  Udt_parameter_clauseContext *_localctx = _tracker.createInstance<Udt_parameter_clauseContext>(_ctx, getState());
  enterRule(_localctx, 32, AtemParser::RuleUdt_parameter_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(698);
    match(AtemParser::LeftParenthese);
    setState(700);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Identifier

    || _la == AtemParser::At) {
      setState(699);
      function_parameter_list();
    }
    setState(702);
    match(AtemParser::RightParenthese);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Final_specifierContext ------------------------------------------------------------------

AtemParser::Final_specifierContext::Final_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Final_specifierContext::KeywordFinal() {
  return getToken(AtemParser::KeywordFinal, 0);
}


size_t AtemParser::Final_specifierContext::getRuleIndex() const {
  return AtemParser::RuleFinal_specifier;
}

void AtemParser::Final_specifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFinal_specifier(this);
}

void AtemParser::Final_specifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFinal_specifier(this);
}

AtemParser::Final_specifierContext* AtemParser::final_specifier() {
  Final_specifierContext *_localctx = _tracker.createInstance<Final_specifierContext>(_ctx, getState());
  enterRule(_localctx, 34, AtemParser::RuleFinal_specifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(704);
    match(AtemParser::KeywordFinal);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_specifierContext ------------------------------------------------------------------

AtemParser::Member_specifierContext::Member_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Member_specifierContext::KeywordStatic() {
  return getToken(AtemParser::KeywordStatic, 0);
}

tree::TerminalNode* AtemParser::Member_specifierContext::KeywordMutable() {
  return getToken(AtemParser::KeywordMutable, 0);
}

tree::TerminalNode* AtemParser::Member_specifierContext::KeywordFinal() {
  return getToken(AtemParser::KeywordFinal, 0);
}


size_t AtemParser::Member_specifierContext::getRuleIndex() const {
  return AtemParser::RuleMember_specifier;
}

void AtemParser::Member_specifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_specifier(this);
}

void AtemParser::Member_specifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_specifier(this);
}

AtemParser::Member_specifierContext* AtemParser::member_specifier() {
  Member_specifierContext *_localctx = _tracker.createInstance<Member_specifierContext>(_ctx, getState());
  enterRule(_localctx, 36, AtemParser::RuleMember_specifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(706);
    _la = _input->LA(1);
    if (!(((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_specifiersContext ------------------------------------------------------------------

AtemParser::Member_specifiersContext::Member_specifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Member_specifierContext *> AtemParser::Member_specifiersContext::member_specifier() {
  return getRuleContexts<AtemParser::Member_specifierContext>();
}

AtemParser::Member_specifierContext* AtemParser::Member_specifiersContext::member_specifier(size_t i) {
  return getRuleContext<AtemParser::Member_specifierContext>(i);
}


size_t AtemParser::Member_specifiersContext::getRuleIndex() const {
  return AtemParser::RuleMember_specifiers;
}

void AtemParser::Member_specifiersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_specifiers(this);
}

void AtemParser::Member_specifiersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_specifiers(this);
}

AtemParser::Member_specifiersContext* AtemParser::member_specifiers() {
  Member_specifiersContext *_localctx = _tracker.createInstance<Member_specifiersContext>(_ctx, getState());
  enterRule(_localctx, 38, AtemParser::RuleMember_specifiers);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(709); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(708);
      member_specifier();
      setState(711); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extension_listContext ------------------------------------------------------------------

AtemParser::Extension_listContext::Extension_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Extension_listContext::KeywordExtend() {
  return getToken(AtemParser::KeywordExtend, 0);
}

tree::TerminalNode* AtemParser::Extension_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

tree::TerminalNode* AtemParser::Extension_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}

std::vector<AtemParser::Extension_itemContext *> AtemParser::Extension_listContext::extension_item() {
  return getRuleContexts<AtemParser::Extension_itemContext>();
}

AtemParser::Extension_itemContext* AtemParser::Extension_listContext::extension_item(size_t i) {
  return getRuleContext<AtemParser::Extension_itemContext>(i);
}


size_t AtemParser::Extension_listContext::getRuleIndex() const {
  return AtemParser::RuleExtension_list;
}

void AtemParser::Extension_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtension_list(this);
}

void AtemParser::Extension_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtension_list(this);
}

AtemParser::Extension_listContext* AtemParser::extension_list() {
  Extension_listContext *_localctx = _tracker.createInstance<Extension_listContext>(_ctx, getState());
  enterRule(_localctx, 40, AtemParser::RuleExtension_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(713);
    match(AtemParser::KeywordExtend);
    setState(714);
    match(AtemParser::LeftCurly);
    setState(716); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(715);
      extension_item();
      setState(718); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == AtemParser::KeywordImpl

    || _la == AtemParser::KeywordInherit);
    setState(720);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extension_itemContext ------------------------------------------------------------------

AtemParser::Extension_itemContext::Extension_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Inherit_clauseContext* AtemParser::Extension_itemContext::inherit_clause() {
  return getRuleContext<AtemParser::Inherit_clauseContext>(0);
}

AtemParser::Impl_clauseContext* AtemParser::Extension_itemContext::impl_clause() {
  return getRuleContext<AtemParser::Impl_clauseContext>(0);
}


size_t AtemParser::Extension_itemContext::getRuleIndex() const {
  return AtemParser::RuleExtension_item;
}

void AtemParser::Extension_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtension_item(this);
}

void AtemParser::Extension_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtension_item(this);
}

AtemParser::Extension_itemContext* AtemParser::extension_item() {
  Extension_itemContext *_localctx = _tracker.createInstance<Extension_itemContext>(_ctx, getState());
  enterRule(_localctx, 42, AtemParser::RuleExtension_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(724);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordInherit: {
        enterOuterAlt(_localctx, 1);
        setState(722);
        inherit_clause();
        break;
      }

      case AtemParser::KeywordImpl: {
        enterOuterAlt(_localctx, 2);
        setState(723);
        impl_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_clauseContext ------------------------------------------------------------------

AtemParser::Inherit_clauseContext::Inherit_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Inherit_clauseContext::KeywordInherit() {
  return getToken(AtemParser::KeywordInherit, 0);
}

AtemParser::Inherit_listContext* AtemParser::Inherit_clauseContext::inherit_list() {
  return getRuleContext<AtemParser::Inherit_listContext>(0);
}


size_t AtemParser::Inherit_clauseContext::getRuleIndex() const {
  return AtemParser::RuleInherit_clause;
}

void AtemParser::Inherit_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_clause(this);
}

void AtemParser::Inherit_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_clause(this);
}

AtemParser::Inherit_clauseContext* AtemParser::inherit_clause() {
  Inherit_clauseContext *_localctx = _tracker.createInstance<Inherit_clauseContext>(_ctx, getState());
  enterRule(_localctx, 44, AtemParser::RuleInherit_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(726);
    match(AtemParser::KeywordInherit);
    setState(727);
    inherit_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_listContext ------------------------------------------------------------------

AtemParser::Inherit_listContext::Inherit_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Inherit_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

AtemParser::Inherit_itemsContext* AtemParser::Inherit_listContext::inherit_items() {
  return getRuleContext<AtemParser::Inherit_itemsContext>(0);
}

tree::TerminalNode* AtemParser::Inherit_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}

AtemParser::Inherit_itemContext* AtemParser::Inherit_listContext::inherit_item() {
  return getRuleContext<AtemParser::Inherit_itemContext>(0);
}


size_t AtemParser::Inherit_listContext::getRuleIndex() const {
  return AtemParser::RuleInherit_list;
}

void AtemParser::Inherit_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_list(this);
}

void AtemParser::Inherit_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_list(this);
}

AtemParser::Inherit_listContext* AtemParser::inherit_list() {
  Inherit_listContext *_localctx = _tracker.createInstance<Inherit_listContext>(_ctx, getState());
  enterRule(_localctx, 46, AtemParser::RuleInherit_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(734);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::LeftCurly: {
        enterOuterAlt(_localctx, 1);
        setState(729);
        match(AtemParser::LeftCurly);
        setState(730);
        inherit_items();
        setState(731);
        match(AtemParser::RightCurly);
        break;
      }

      case AtemParser::KeywordGlobal:
      case AtemParser::KeywordModule:
      case AtemParser::KeywordOuter:
      case AtemParser::KeywordPackage:
      case AtemParser::KeywordSelf:
      case AtemParser::KeywordSuper:
      case AtemParser::KeywordThis:
      case AtemParser::Identifier: {
        enterOuterAlt(_localctx, 2);
        setState(733);
        inherit_item();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_itemContext ------------------------------------------------------------------

AtemParser::Inherit_itemContext::Inherit_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Path_expressionContext* AtemParser::Inherit_itemContext::path_expression() {
  return getRuleContext<AtemParser::Path_expressionContext>(0);
}

AtemParser::Inherit_member_listContext* AtemParser::Inherit_itemContext::inherit_member_list() {
  return getRuleContext<AtemParser::Inherit_member_listContext>(0);
}


size_t AtemParser::Inherit_itemContext::getRuleIndex() const {
  return AtemParser::RuleInherit_item;
}

void AtemParser::Inherit_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_item(this);
}

void AtemParser::Inherit_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_item(this);
}

AtemParser::Inherit_itemContext* AtemParser::inherit_item() {
  Inherit_itemContext *_localctx = _tracker.createInstance<Inherit_itemContext>(_ctx, getState());
  enterRule(_localctx, 48, AtemParser::RuleInherit_item);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(736);
    path_expression();
    setState(738);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::LeftCurly) {
      setState(737);
      inherit_member_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_itemsContext ------------------------------------------------------------------

AtemParser::Inherit_itemsContext::Inherit_itemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Inherit_itemContext *> AtemParser::Inherit_itemsContext::inherit_item() {
  return getRuleContexts<AtemParser::Inherit_itemContext>();
}

AtemParser::Inherit_itemContext* AtemParser::Inherit_itemsContext::inherit_item(size_t i) {
  return getRuleContext<AtemParser::Inherit_itemContext>(i);
}


size_t AtemParser::Inherit_itemsContext::getRuleIndex() const {
  return AtemParser::RuleInherit_items;
}

void AtemParser::Inherit_itemsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_items(this);
}

void AtemParser::Inherit_itemsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_items(this);
}

AtemParser::Inherit_itemsContext* AtemParser::inherit_items() {
  Inherit_itemsContext *_localctx = _tracker.createInstance<Inherit_itemsContext>(_ctx, getState());
  enterRule(_localctx, 50, AtemParser::RuleInherit_items);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(741); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(740);
      inherit_item();
      setState(743); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == AtemParser::KeywordGlobal || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 144115207419996161) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_member_listContext ------------------------------------------------------------------

AtemParser::Inherit_member_listContext::Inherit_member_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Inherit_member_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

AtemParser::Inherit_membersContext* AtemParser::Inherit_member_listContext::inherit_members() {
  return getRuleContext<AtemParser::Inherit_membersContext>(0);
}

tree::TerminalNode* AtemParser::Inherit_member_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}


size_t AtemParser::Inherit_member_listContext::getRuleIndex() const {
  return AtemParser::RuleInherit_member_list;
}

void AtemParser::Inherit_member_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_member_list(this);
}

void AtemParser::Inherit_member_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_member_list(this);
}

AtemParser::Inherit_member_listContext* AtemParser::inherit_member_list() {
  Inherit_member_listContext *_localctx = _tracker.createInstance<Inherit_member_listContext>(_ctx, getState());
  enterRule(_localctx, 52, AtemParser::RuleInherit_member_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(745);
    match(AtemParser::LeftCurly);
    setState(746);
    inherit_members();
    setState(747);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_memberContext ------------------------------------------------------------------

AtemParser::Inherit_memberContext::Inherit_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Inherit_type_overrideContext* AtemParser::Inherit_memberContext::inherit_type_override() {
  return getRuleContext<AtemParser::Inherit_type_overrideContext>(0);
}

AtemParser::Inherit_variable_overrideContext* AtemParser::Inherit_memberContext::inherit_variable_override() {
  return getRuleContext<AtemParser::Inherit_variable_overrideContext>(0);
}

AtemParser::Inherit_constant_overrideContext* AtemParser::Inherit_memberContext::inherit_constant_override() {
  return getRuleContext<AtemParser::Inherit_constant_overrideContext>(0);
}

AtemParser::Inherit_function_overrideContext* AtemParser::Inherit_memberContext::inherit_function_override() {
  return getRuleContext<AtemParser::Inherit_function_overrideContext>(0);
}


size_t AtemParser::Inherit_memberContext::getRuleIndex() const {
  return AtemParser::RuleInherit_member;
}

void AtemParser::Inherit_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_member(this);
}

void AtemParser::Inherit_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_member(this);
}

AtemParser::Inherit_memberContext* AtemParser::inherit_member() {
  Inherit_memberContext *_localctx = _tracker.createInstance<Inherit_memberContext>(_ctx, getState());
  enterRule(_localctx, 54, AtemParser::RuleInherit_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(753);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(749);
      inherit_type_override();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(750);
      inherit_variable_override();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(751);
      inherit_constant_override();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(752);
      inherit_function_override();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_membersContext ------------------------------------------------------------------

AtemParser::Inherit_membersContext::Inherit_membersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Inherit_memberContext *> AtemParser::Inherit_membersContext::inherit_member() {
  return getRuleContexts<AtemParser::Inherit_memberContext>();
}

AtemParser::Inherit_memberContext* AtemParser::Inherit_membersContext::inherit_member(size_t i) {
  return getRuleContext<AtemParser::Inherit_memberContext>(i);
}


size_t AtemParser::Inherit_membersContext::getRuleIndex() const {
  return AtemParser::RuleInherit_members;
}

void AtemParser::Inherit_membersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_members(this);
}

void AtemParser::Inherit_membersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_members(this);
}

AtemParser::Inherit_membersContext* AtemParser::inherit_members() {
  Inherit_membersContext *_localctx = _tracker.createInstance<Inherit_membersContext>(_ctx, getState());
  enterRule(_localctx, 56, AtemParser::RuleInherit_members);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(756); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(755);
      inherit_member();
      setState(758); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == AtemParser::KeywordOverride);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_type_overrideContext ------------------------------------------------------------------

AtemParser::Inherit_type_overrideContext::Inherit_type_overrideContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Inherit_type_overrideContext::KeywordOverride() {
  return getToken(AtemParser::KeywordOverride, 0);
}

AtemParser::Inherit_declaratorContext* AtemParser::Inherit_type_overrideContext::inherit_declarator() {
  return getRuleContext<AtemParser::Inherit_declaratorContext>(0);
}

AtemParser::Typealias_declarationContext* AtemParser::Inherit_type_overrideContext::typealias_declaration() {
  return getRuleContext<AtemParser::Typealias_declarationContext>(0);
}


size_t AtemParser::Inherit_type_overrideContext::getRuleIndex() const {
  return AtemParser::RuleInherit_type_override;
}

void AtemParser::Inherit_type_overrideContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_type_override(this);
}

void AtemParser::Inherit_type_overrideContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_type_override(this);
}

AtemParser::Inherit_type_overrideContext* AtemParser::inherit_type_override() {
  Inherit_type_overrideContext *_localctx = _tracker.createInstance<Inherit_type_overrideContext>(_ctx, getState());
  enterRule(_localctx, 58, AtemParser::RuleInherit_type_override);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(760);
    match(AtemParser::KeywordOverride);
    setState(761);
    inherit_declarator();
    setState(762);
    typealias_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_variable_overrideContext ------------------------------------------------------------------

AtemParser::Inherit_variable_overrideContext::Inherit_variable_overrideContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Inherit_variable_overrideContext::KeywordOverride() {
  return getToken(AtemParser::KeywordOverride, 0);
}

AtemParser::Inherit_declaratorContext* AtemParser::Inherit_variable_overrideContext::inherit_declarator() {
  return getRuleContext<AtemParser::Inherit_declaratorContext>(0);
}

AtemParser::Variable_declarationContext* AtemParser::Inherit_variable_overrideContext::variable_declaration() {
  return getRuleContext<AtemParser::Variable_declarationContext>(0);
}

AtemParser::Getter_and_setter_listContext* AtemParser::Inherit_variable_overrideContext::getter_and_setter_list() {
  return getRuleContext<AtemParser::Getter_and_setter_listContext>(0);
}


size_t AtemParser::Inherit_variable_overrideContext::getRuleIndex() const {
  return AtemParser::RuleInherit_variable_override;
}

void AtemParser::Inherit_variable_overrideContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_variable_override(this);
}

void AtemParser::Inherit_variable_overrideContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_variable_override(this);
}

AtemParser::Inherit_variable_overrideContext* AtemParser::inherit_variable_override() {
  Inherit_variable_overrideContext *_localctx = _tracker.createInstance<Inherit_variable_overrideContext>(_ctx, getState());
  enterRule(_localctx, 60, AtemParser::RuleInherit_variable_override);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(764);
    match(AtemParser::KeywordOverride);
    setState(765);
    inherit_declarator();
    setState(766);
    variable_declaration();
    setState(768);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordWith) {
      setState(767);
      getter_and_setter_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_constant_overrideContext ------------------------------------------------------------------

AtemParser::Inherit_constant_overrideContext::Inherit_constant_overrideContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Inherit_constant_overrideContext::KeywordOverride() {
  return getToken(AtemParser::KeywordOverride, 0);
}

AtemParser::Inherit_declaratorContext* AtemParser::Inherit_constant_overrideContext::inherit_declarator() {
  return getRuleContext<AtemParser::Inherit_declaratorContext>(0);
}

AtemParser::Constant_declarationContext* AtemParser::Inherit_constant_overrideContext::constant_declaration() {
  return getRuleContext<AtemParser::Constant_declarationContext>(0);
}

AtemParser::Getter_listContext* AtemParser::Inherit_constant_overrideContext::getter_list() {
  return getRuleContext<AtemParser::Getter_listContext>(0);
}


size_t AtemParser::Inherit_constant_overrideContext::getRuleIndex() const {
  return AtemParser::RuleInherit_constant_override;
}

void AtemParser::Inherit_constant_overrideContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_constant_override(this);
}

void AtemParser::Inherit_constant_overrideContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_constant_override(this);
}

AtemParser::Inherit_constant_overrideContext* AtemParser::inherit_constant_override() {
  Inherit_constant_overrideContext *_localctx = _tracker.createInstance<Inherit_constant_overrideContext>(_ctx, getState());
  enterRule(_localctx, 62, AtemParser::RuleInherit_constant_override);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(770);
    match(AtemParser::KeywordOverride);
    setState(771);
    inherit_declarator();
    setState(772);
    constant_declaration();
    setState(774);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordWith) {
      setState(773);
      getter_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_function_overrideContext ------------------------------------------------------------------

AtemParser::Inherit_function_overrideContext::Inherit_function_overrideContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Inherit_function_overrideContext::KeywordOverride() {
  return getToken(AtemParser::KeywordOverride, 0);
}

AtemParser::Inherit_declaratorContext* AtemParser::Inherit_function_overrideContext::inherit_declarator() {
  return getRuleContext<AtemParser::Inherit_declaratorContext>(0);
}

AtemParser::Function_declarationContext* AtemParser::Inherit_function_overrideContext::function_declaration() {
  return getRuleContext<AtemParser::Function_declarationContext>(0);
}


size_t AtemParser::Inherit_function_overrideContext::getRuleIndex() const {
  return AtemParser::RuleInherit_function_override;
}

void AtemParser::Inherit_function_overrideContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_function_override(this);
}

void AtemParser::Inherit_function_overrideContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_function_override(this);
}

AtemParser::Inherit_function_overrideContext* AtemParser::inherit_function_override() {
  Inherit_function_overrideContext *_localctx = _tracker.createInstance<Inherit_function_overrideContext>(_ctx, getState());
  enterRule(_localctx, 64, AtemParser::RuleInherit_function_override);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(776);
    match(AtemParser::KeywordOverride);
    setState(777);
    inherit_declarator();
    setState(778);
    function_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_initializer_overrideContext ------------------------------------------------------------------

AtemParser::Inherit_initializer_overrideContext::Inherit_initializer_overrideContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Inherit_initializer_overrideContext::KeywordOverride() {
  return getToken(AtemParser::KeywordOverride, 0);
}

AtemParser::Empty_inherit_declaratorContext* AtemParser::Inherit_initializer_overrideContext::empty_inherit_declarator() {
  return getRuleContext<AtemParser::Empty_inherit_declaratorContext>(0);
}

AtemParser::Initializer_declarationContext* AtemParser::Inherit_initializer_overrideContext::initializer_declaration() {
  return getRuleContext<AtemParser::Initializer_declarationContext>(0);
}


size_t AtemParser::Inherit_initializer_overrideContext::getRuleIndex() const {
  return AtemParser::RuleInherit_initializer_override;
}

void AtemParser::Inherit_initializer_overrideContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_initializer_override(this);
}

void AtemParser::Inherit_initializer_overrideContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_initializer_override(this);
}

AtemParser::Inherit_initializer_overrideContext* AtemParser::inherit_initializer_override() {
  Inherit_initializer_overrideContext *_localctx = _tracker.createInstance<Inherit_initializer_overrideContext>(_ctx, getState());
  enterRule(_localctx, 66, AtemParser::RuleInherit_initializer_override);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(780);
    match(AtemParser::KeywordOverride);
    setState(781);
    empty_inherit_declarator();
    setState(782);
    initializer_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_deinitializer_overrideContext ------------------------------------------------------------------

AtemParser::Inherit_deinitializer_overrideContext::Inherit_deinitializer_overrideContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Inherit_deinitializer_overrideContext::KeywordOverride() {
  return getToken(AtemParser::KeywordOverride, 0);
}

AtemParser::Empty_inherit_declaratorContext* AtemParser::Inherit_deinitializer_overrideContext::empty_inherit_declarator() {
  return getRuleContext<AtemParser::Empty_inherit_declaratorContext>(0);
}

AtemParser::Deinitializer_declarationContext* AtemParser::Inherit_deinitializer_overrideContext::deinitializer_declaration() {
  return getRuleContext<AtemParser::Deinitializer_declarationContext>(0);
}


size_t AtemParser::Inherit_deinitializer_overrideContext::getRuleIndex() const {
  return AtemParser::RuleInherit_deinitializer_override;
}

void AtemParser::Inherit_deinitializer_overrideContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_deinitializer_override(this);
}

void AtemParser::Inherit_deinitializer_overrideContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_deinitializer_override(this);
}

AtemParser::Inherit_deinitializer_overrideContext* AtemParser::inherit_deinitializer_override() {
  Inherit_deinitializer_overrideContext *_localctx = _tracker.createInstance<Inherit_deinitializer_overrideContext>(_ctx, getState());
  enterRule(_localctx, 68, AtemParser::RuleInherit_deinitializer_override);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(784);
    match(AtemParser::KeywordOverride);
    setState(785);
    empty_inherit_declarator();
    setState(786);
    deinitializer_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_declaratorContext ------------------------------------------------------------------

AtemParser::Inherit_declaratorContext::Inherit_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Inherit_nameContext* AtemParser::Inherit_declaratorContext::inherit_name() {
  return getRuleContext<AtemParser::Inherit_nameContext>(0);
}

AtemParser::Declare_operatorContext* AtemParser::Inherit_declaratorContext::declare_operator() {
  return getRuleContext<AtemParser::Declare_operatorContext>(0);
}

AtemParser::Access_level_specifierContext* AtemParser::Inherit_declaratorContext::access_level_specifier() {
  return getRuleContext<AtemParser::Access_level_specifierContext>(0);
}

AtemParser::Storage_level_specifierContext* AtemParser::Inherit_declaratorContext::storage_level_specifier() {
  return getRuleContext<AtemParser::Storage_level_specifierContext>(0);
}

AtemParser::Member_specifiersContext* AtemParser::Inherit_declaratorContext::member_specifiers() {
  return getRuleContext<AtemParser::Member_specifiersContext>(0);
}


size_t AtemParser::Inherit_declaratorContext::getRuleIndex() const {
  return AtemParser::RuleInherit_declarator;
}

void AtemParser::Inherit_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_declarator(this);
}

void AtemParser::Inherit_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_declarator(this);
}

AtemParser::Inherit_declaratorContext* AtemParser::inherit_declarator() {
  Inherit_declaratorContext *_localctx = _tracker.createInstance<Inherit_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 70, AtemParser::RuleInherit_declarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(789);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & 158604569083905) != 0)) {
      setState(788);
      access_level_specifier();
    }
    setState(792);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      setState(791);
      storage_level_specifier();
      break;
    }

    default:
      break;
    }
    setState(795);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0)) {
      setState(794);
      member_specifiers();
    }
    setState(797);
    inherit_name();
    setState(798);
    declare_operator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Empty_inherit_declaratorContext ------------------------------------------------------------------

AtemParser::Empty_inherit_declaratorContext::Empty_inherit_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Empty_declare_operatorContext* AtemParser::Empty_inherit_declaratorContext::empty_declare_operator() {
  return getRuleContext<AtemParser::Empty_declare_operatorContext>(0);
}

AtemParser::Access_level_specifierContext* AtemParser::Empty_inherit_declaratorContext::access_level_specifier() {
  return getRuleContext<AtemParser::Access_level_specifierContext>(0);
}

AtemParser::Storage_level_specifierContext* AtemParser::Empty_inherit_declaratorContext::storage_level_specifier() {
  return getRuleContext<AtemParser::Storage_level_specifierContext>(0);
}

AtemParser::Member_specifiersContext* AtemParser::Empty_inherit_declaratorContext::member_specifiers() {
  return getRuleContext<AtemParser::Member_specifiersContext>(0);
}


size_t AtemParser::Empty_inherit_declaratorContext::getRuleIndex() const {
  return AtemParser::RuleEmpty_inherit_declarator;
}

void AtemParser::Empty_inherit_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmpty_inherit_declarator(this);
}

void AtemParser::Empty_inherit_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmpty_inherit_declarator(this);
}

AtemParser::Empty_inherit_declaratorContext* AtemParser::empty_inherit_declarator() {
  Empty_inherit_declaratorContext *_localctx = _tracker.createInstance<Empty_inherit_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 72, AtemParser::RuleEmpty_inherit_declarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(801);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & 158604569083905) != 0)) {
      setState(800);
      access_level_specifier();
    }
    setState(804);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      setState(803);
      storage_level_specifier();
      break;
    }

    default:
      break;
    }
    setState(807);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0)) {
      setState(806);
      member_specifiers();
    }
    setState(809);
    empty_declare_operator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inherit_nameContext ------------------------------------------------------------------

AtemParser::Inherit_nameContext::Inherit_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Inherit_nameContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}


size_t AtemParser::Inherit_nameContext::getRuleIndex() const {
  return AtemParser::RuleInherit_name;
}

void AtemParser::Inherit_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInherit_name(this);
}

void AtemParser::Inherit_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInherit_name(this);
}

AtemParser::Inherit_nameContext* AtemParser::inherit_name() {
  Inherit_nameContext *_localctx = _tracker.createInstance<Inherit_nameContext>(_ctx, getState());
  enterRule(_localctx, 74, AtemParser::RuleInherit_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(811);
    match(AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Impl_clauseContext ------------------------------------------------------------------

AtemParser::Impl_clauseContext::Impl_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Impl_clauseContext::KeywordImpl() {
  return getToken(AtemParser::KeywordImpl, 0);
}

AtemParser::Impl_listContext* AtemParser::Impl_clauseContext::impl_list() {
  return getRuleContext<AtemParser::Impl_listContext>(0);
}


size_t AtemParser::Impl_clauseContext::getRuleIndex() const {
  return AtemParser::RuleImpl_clause;
}

void AtemParser::Impl_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImpl_clause(this);
}

void AtemParser::Impl_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImpl_clause(this);
}

AtemParser::Impl_clauseContext* AtemParser::impl_clause() {
  Impl_clauseContext *_localctx = _tracker.createInstance<Impl_clauseContext>(_ctx, getState());
  enterRule(_localctx, 76, AtemParser::RuleImpl_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(813);
    match(AtemParser::KeywordImpl);
    setState(814);
    impl_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Impl_listContext ------------------------------------------------------------------

AtemParser::Impl_listContext::Impl_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Impl_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

AtemParser::Impl_itemsContext* AtemParser::Impl_listContext::impl_items() {
  return getRuleContext<AtemParser::Impl_itemsContext>(0);
}

tree::TerminalNode* AtemParser::Impl_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}

AtemParser::Impl_itemContext* AtemParser::Impl_listContext::impl_item() {
  return getRuleContext<AtemParser::Impl_itemContext>(0);
}


size_t AtemParser::Impl_listContext::getRuleIndex() const {
  return AtemParser::RuleImpl_list;
}

void AtemParser::Impl_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImpl_list(this);
}

void AtemParser::Impl_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImpl_list(this);
}

AtemParser::Impl_listContext* AtemParser::impl_list() {
  Impl_listContext *_localctx = _tracker.createInstance<Impl_listContext>(_ctx, getState());
  enterRule(_localctx, 78, AtemParser::RuleImpl_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(821);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::LeftCurly: {
        enterOuterAlt(_localctx, 1);
        setState(816);
        match(AtemParser::LeftCurly);
        setState(817);
        impl_items();
        setState(818);
        match(AtemParser::RightCurly);
        break;
      }

      case AtemParser::KeywordGlobal:
      case AtemParser::KeywordModule:
      case AtemParser::KeywordOuter:
      case AtemParser::KeywordPackage:
      case AtemParser::KeywordSelf:
      case AtemParser::KeywordSuper:
      case AtemParser::KeywordThis:
      case AtemParser::Identifier: {
        enterOuterAlt(_localctx, 2);
        setState(820);
        impl_item();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Impl_itemContext ------------------------------------------------------------------

AtemParser::Impl_itemContext::Impl_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Path_expressionContext* AtemParser::Impl_itemContext::path_expression() {
  return getRuleContext<AtemParser::Path_expressionContext>(0);
}

AtemParser::Impl_with_clauseContext* AtemParser::Impl_itemContext::impl_with_clause() {
  return getRuleContext<AtemParser::Impl_with_clauseContext>(0);
}


size_t AtemParser::Impl_itemContext::getRuleIndex() const {
  return AtemParser::RuleImpl_item;
}

void AtemParser::Impl_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImpl_item(this);
}

void AtemParser::Impl_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImpl_item(this);
}

AtemParser::Impl_itemContext* AtemParser::impl_item() {
  Impl_itemContext *_localctx = _tracker.createInstance<Impl_itemContext>(_ctx, getState());
  enterRule(_localctx, 80, AtemParser::RuleImpl_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(823);
    path_expression();
    setState(824);
    impl_with_clause();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Impl_itemsContext ------------------------------------------------------------------

AtemParser::Impl_itemsContext::Impl_itemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Impl_itemContext *> AtemParser::Impl_itemsContext::impl_item() {
  return getRuleContexts<AtemParser::Impl_itemContext>();
}

AtemParser::Impl_itemContext* AtemParser::Impl_itemsContext::impl_item(size_t i) {
  return getRuleContext<AtemParser::Impl_itemContext>(i);
}


size_t AtemParser::Impl_itemsContext::getRuleIndex() const {
  return AtemParser::RuleImpl_items;
}

void AtemParser::Impl_itemsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImpl_items(this);
}

void AtemParser::Impl_itemsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImpl_items(this);
}

AtemParser::Impl_itemsContext* AtemParser::impl_items() {
  Impl_itemsContext *_localctx = _tracker.createInstance<Impl_itemsContext>(_ctx, getState());
  enterRule(_localctx, 82, AtemParser::RuleImpl_items);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(827); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(826);
      impl_item();
      setState(829); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == AtemParser::KeywordGlobal || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 144115207419996161) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Impl_with_clauseContext ------------------------------------------------------------------

AtemParser::Impl_with_clauseContext::Impl_with_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Impl_with_clauseContext::KeywordWith() {
  return getToken(AtemParser::KeywordWith, 0);
}

AtemParser::Impl_member_listContext* AtemParser::Impl_with_clauseContext::impl_member_list() {
  return getRuleContext<AtemParser::Impl_member_listContext>(0);
}


size_t AtemParser::Impl_with_clauseContext::getRuleIndex() const {
  return AtemParser::RuleImpl_with_clause;
}

void AtemParser::Impl_with_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImpl_with_clause(this);
}

void AtemParser::Impl_with_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImpl_with_clause(this);
}

AtemParser::Impl_with_clauseContext* AtemParser::impl_with_clause() {
  Impl_with_clauseContext *_localctx = _tracker.createInstance<Impl_with_clauseContext>(_ctx, getState());
  enterRule(_localctx, 84, AtemParser::RuleImpl_with_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(831);
    match(AtemParser::KeywordWith);
    setState(832);
    impl_member_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Impl_member_listContext ------------------------------------------------------------------

AtemParser::Impl_member_listContext::Impl_member_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Impl_member_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

AtemParser::Impl_membersContext* AtemParser::Impl_member_listContext::impl_members() {
  return getRuleContext<AtemParser::Impl_membersContext>(0);
}

tree::TerminalNode* AtemParser::Impl_member_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}


size_t AtemParser::Impl_member_listContext::getRuleIndex() const {
  return AtemParser::RuleImpl_member_list;
}

void AtemParser::Impl_member_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImpl_member_list(this);
}

void AtemParser::Impl_member_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImpl_member_list(this);
}

AtemParser::Impl_member_listContext* AtemParser::impl_member_list() {
  Impl_member_listContext *_localctx = _tracker.createInstance<Impl_member_listContext>(_ctx, getState());
  enterRule(_localctx, 86, AtemParser::RuleImpl_member_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(834);
    match(AtemParser::LeftCurly);
    setState(835);
    impl_members();
    setState(836);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Impl_memberContext ------------------------------------------------------------------

AtemParser::Impl_memberContext::Impl_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Associated_type_implContext* AtemParser::Impl_memberContext::associated_type_impl() {
  return getRuleContext<AtemParser::Associated_type_implContext>(0);
}

AtemParser::Associated_variable_implContext* AtemParser::Impl_memberContext::associated_variable_impl() {
  return getRuleContext<AtemParser::Associated_variable_implContext>(0);
}

AtemParser::Associated_constant_implContext* AtemParser::Impl_memberContext::associated_constant_impl() {
  return getRuleContext<AtemParser::Associated_constant_implContext>(0);
}

AtemParser::Associated_function_implContext* AtemParser::Impl_memberContext::associated_function_impl() {
  return getRuleContext<AtemParser::Associated_function_implContext>(0);
}


size_t AtemParser::Impl_memberContext::getRuleIndex() const {
  return AtemParser::RuleImpl_member;
}

void AtemParser::Impl_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImpl_member(this);
}

void AtemParser::Impl_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImpl_member(this);
}

AtemParser::Impl_memberContext* AtemParser::impl_member() {
  Impl_memberContext *_localctx = _tracker.createInstance<Impl_memberContext>(_ctx, getState());
  enterRule(_localctx, 88, AtemParser::RuleImpl_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(842);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(838);
      associated_type_impl();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(839);
      associated_variable_impl();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(840);
      associated_constant_impl();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(841);
      associated_function_impl();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Impl_membersContext ------------------------------------------------------------------

AtemParser::Impl_membersContext::Impl_membersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Impl_memberContext *> AtemParser::Impl_membersContext::impl_member() {
  return getRuleContexts<AtemParser::Impl_memberContext>();
}

AtemParser::Impl_memberContext* AtemParser::Impl_membersContext::impl_member(size_t i) {
  return getRuleContext<AtemParser::Impl_memberContext>(i);
}


size_t AtemParser::Impl_membersContext::getRuleIndex() const {
  return AtemParser::RuleImpl_members;
}

void AtemParser::Impl_membersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImpl_members(this);
}

void AtemParser::Impl_membersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImpl_members(this);
}

AtemParser::Impl_membersContext* AtemParser::impl_members() {
  Impl_membersContext *_localctx = _tracker.createInstance<Impl_membersContext>(_ctx, getState());
  enterRule(_localctx, 90, AtemParser::RuleImpl_members);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(845); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(844);
      impl_member();
      setState(847); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == AtemParser::KeywordRequire);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Associated_type_implContext ------------------------------------------------------------------

AtemParser::Associated_type_implContext::Associated_type_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Associated_type_implContext::KeywordRequire() {
  return getToken(AtemParser::KeywordRequire, 0);
}

AtemParser::Associated_declaratorContext* AtemParser::Associated_type_implContext::associated_declarator() {
  return getRuleContext<AtemParser::Associated_declaratorContext>(0);
}

AtemParser::Typealias_declarationContext* AtemParser::Associated_type_implContext::typealias_declaration() {
  return getRuleContext<AtemParser::Typealias_declarationContext>(0);
}


size_t AtemParser::Associated_type_implContext::getRuleIndex() const {
  return AtemParser::RuleAssociated_type_impl;
}

void AtemParser::Associated_type_implContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociated_type_impl(this);
}

void AtemParser::Associated_type_implContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociated_type_impl(this);
}

AtemParser::Associated_type_implContext* AtemParser::associated_type_impl() {
  Associated_type_implContext *_localctx = _tracker.createInstance<Associated_type_implContext>(_ctx, getState());
  enterRule(_localctx, 92, AtemParser::RuleAssociated_type_impl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(849);
    match(AtemParser::KeywordRequire);
    setState(850);
    associated_declarator();
    setState(851);
    typealias_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Associated_variable_implContext ------------------------------------------------------------------

AtemParser::Associated_variable_implContext::Associated_variable_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Associated_variable_implContext::KeywordRequire() {
  return getToken(AtemParser::KeywordRequire, 0);
}

AtemParser::Associated_declaratorContext* AtemParser::Associated_variable_implContext::associated_declarator() {
  return getRuleContext<AtemParser::Associated_declaratorContext>(0);
}

AtemParser::Variable_declarationContext* AtemParser::Associated_variable_implContext::variable_declaration() {
  return getRuleContext<AtemParser::Variable_declarationContext>(0);
}

AtemParser::Getter_and_setter_listContext* AtemParser::Associated_variable_implContext::getter_and_setter_list() {
  return getRuleContext<AtemParser::Getter_and_setter_listContext>(0);
}


size_t AtemParser::Associated_variable_implContext::getRuleIndex() const {
  return AtemParser::RuleAssociated_variable_impl;
}

void AtemParser::Associated_variable_implContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociated_variable_impl(this);
}

void AtemParser::Associated_variable_implContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociated_variable_impl(this);
}

AtemParser::Associated_variable_implContext* AtemParser::associated_variable_impl() {
  Associated_variable_implContext *_localctx = _tracker.createInstance<Associated_variable_implContext>(_ctx, getState());
  enterRule(_localctx, 94, AtemParser::RuleAssociated_variable_impl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(853);
    match(AtemParser::KeywordRequire);
    setState(854);
    associated_declarator();
    setState(855);
    variable_declaration();
    setState(857);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordWith) {
      setState(856);
      getter_and_setter_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Associated_constant_implContext ------------------------------------------------------------------

AtemParser::Associated_constant_implContext::Associated_constant_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Associated_constant_implContext::KeywordRequire() {
  return getToken(AtemParser::KeywordRequire, 0);
}

AtemParser::Associated_declaratorContext* AtemParser::Associated_constant_implContext::associated_declarator() {
  return getRuleContext<AtemParser::Associated_declaratorContext>(0);
}

AtemParser::Constant_declarationContext* AtemParser::Associated_constant_implContext::constant_declaration() {
  return getRuleContext<AtemParser::Constant_declarationContext>(0);
}

AtemParser::Getter_listContext* AtemParser::Associated_constant_implContext::getter_list() {
  return getRuleContext<AtemParser::Getter_listContext>(0);
}


size_t AtemParser::Associated_constant_implContext::getRuleIndex() const {
  return AtemParser::RuleAssociated_constant_impl;
}

void AtemParser::Associated_constant_implContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociated_constant_impl(this);
}

void AtemParser::Associated_constant_implContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociated_constant_impl(this);
}

AtemParser::Associated_constant_implContext* AtemParser::associated_constant_impl() {
  Associated_constant_implContext *_localctx = _tracker.createInstance<Associated_constant_implContext>(_ctx, getState());
  enterRule(_localctx, 96, AtemParser::RuleAssociated_constant_impl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(859);
    match(AtemParser::KeywordRequire);
    setState(860);
    associated_declarator();
    setState(861);
    constant_declaration();
    setState(863);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordWith) {
      setState(862);
      getter_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Associated_function_implContext ------------------------------------------------------------------

AtemParser::Associated_function_implContext::Associated_function_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Associated_function_implContext::KeywordRequire() {
  return getToken(AtemParser::KeywordRequire, 0);
}

AtemParser::Associated_declaratorContext* AtemParser::Associated_function_implContext::associated_declarator() {
  return getRuleContext<AtemParser::Associated_declaratorContext>(0);
}

AtemParser::Function_declarationContext* AtemParser::Associated_function_implContext::function_declaration() {
  return getRuleContext<AtemParser::Function_declarationContext>(0);
}


size_t AtemParser::Associated_function_implContext::getRuleIndex() const {
  return AtemParser::RuleAssociated_function_impl;
}

void AtemParser::Associated_function_implContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociated_function_impl(this);
}

void AtemParser::Associated_function_implContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociated_function_impl(this);
}

AtemParser::Associated_function_implContext* AtemParser::associated_function_impl() {
  Associated_function_implContext *_localctx = _tracker.createInstance<Associated_function_implContext>(_ctx, getState());
  enterRule(_localctx, 98, AtemParser::RuleAssociated_function_impl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(865);
    match(AtemParser::KeywordRequire);
    setState(866);
    associated_declarator();
    setState(867);
    function_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Associated_initializer_implContext ------------------------------------------------------------------

AtemParser::Associated_initializer_implContext::Associated_initializer_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Associated_initializer_implContext::KeywordRequire() {
  return getToken(AtemParser::KeywordRequire, 0);
}

AtemParser::Empty_declare_operatorContext* AtemParser::Associated_initializer_implContext::empty_declare_operator() {
  return getRuleContext<AtemParser::Empty_declare_operatorContext>(0);
}

AtemParser::Initializer_declarationContext* AtemParser::Associated_initializer_implContext::initializer_declaration() {
  return getRuleContext<AtemParser::Initializer_declarationContext>(0);
}


size_t AtemParser::Associated_initializer_implContext::getRuleIndex() const {
  return AtemParser::RuleAssociated_initializer_impl;
}

void AtemParser::Associated_initializer_implContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociated_initializer_impl(this);
}

void AtemParser::Associated_initializer_implContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociated_initializer_impl(this);
}

AtemParser::Associated_initializer_implContext* AtemParser::associated_initializer_impl() {
  Associated_initializer_implContext *_localctx = _tracker.createInstance<Associated_initializer_implContext>(_ctx, getState());
  enterRule(_localctx, 100, AtemParser::RuleAssociated_initializer_impl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(869);
    match(AtemParser::KeywordRequire);
    setState(870);
    empty_declare_operator();
    setState(871);
    initializer_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Associated_deinitializer_implContext ------------------------------------------------------------------

AtemParser::Associated_deinitializer_implContext::Associated_deinitializer_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Associated_deinitializer_implContext::KeywordRequire() {
  return getToken(AtemParser::KeywordRequire, 0);
}

AtemParser::Empty_declare_operatorContext* AtemParser::Associated_deinitializer_implContext::empty_declare_operator() {
  return getRuleContext<AtemParser::Empty_declare_operatorContext>(0);
}

AtemParser::Deinitializer_declarationContext* AtemParser::Associated_deinitializer_implContext::deinitializer_declaration() {
  return getRuleContext<AtemParser::Deinitializer_declarationContext>(0);
}


size_t AtemParser::Associated_deinitializer_implContext::getRuleIndex() const {
  return AtemParser::RuleAssociated_deinitializer_impl;
}

void AtemParser::Associated_deinitializer_implContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociated_deinitializer_impl(this);
}

void AtemParser::Associated_deinitializer_implContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociated_deinitializer_impl(this);
}

AtemParser::Associated_deinitializer_implContext* AtemParser::associated_deinitializer_impl() {
  Associated_deinitializer_implContext *_localctx = _tracker.createInstance<Associated_deinitializer_implContext>(_ctx, getState());
  enterRule(_localctx, 102, AtemParser::RuleAssociated_deinitializer_impl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(873);
    match(AtemParser::KeywordRequire);
    setState(874);
    empty_declare_operator();
    setState(875);
    deinitializer_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Associated_declaratorContext ------------------------------------------------------------------

AtemParser::Associated_declaratorContext::Associated_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Associated_nameContext* AtemParser::Associated_declaratorContext::associated_name() {
  return getRuleContext<AtemParser::Associated_nameContext>(0);
}

AtemParser::Declare_operatorContext* AtemParser::Associated_declaratorContext::declare_operator() {
  return getRuleContext<AtemParser::Declare_operatorContext>(0);
}

AtemParser::Access_level_specifierContext* AtemParser::Associated_declaratorContext::access_level_specifier() {
  return getRuleContext<AtemParser::Access_level_specifierContext>(0);
}

AtemParser::Storage_level_specifierContext* AtemParser::Associated_declaratorContext::storage_level_specifier() {
  return getRuleContext<AtemParser::Storage_level_specifierContext>(0);
}

AtemParser::Member_specifiersContext* AtemParser::Associated_declaratorContext::member_specifiers() {
  return getRuleContext<AtemParser::Member_specifiersContext>(0);
}


size_t AtemParser::Associated_declaratorContext::getRuleIndex() const {
  return AtemParser::RuleAssociated_declarator;
}

void AtemParser::Associated_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociated_declarator(this);
}

void AtemParser::Associated_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociated_declarator(this);
}

AtemParser::Associated_declaratorContext* AtemParser::associated_declarator() {
  Associated_declaratorContext *_localctx = _tracker.createInstance<Associated_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 104, AtemParser::RuleAssociated_declarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(878);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & 158604569083905) != 0)) {
      setState(877);
      access_level_specifier();
    }
    setState(881);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      setState(880);
      storage_level_specifier();
      break;
    }

    default:
      break;
    }
    setState(884);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0)) {
      setState(883);
      member_specifiers();
    }
    setState(886);
    associated_name();
    setState(887);
    declare_operator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Empty_associated_declaratorContext ------------------------------------------------------------------

AtemParser::Empty_associated_declaratorContext::Empty_associated_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Empty_declare_operatorContext* AtemParser::Empty_associated_declaratorContext::empty_declare_operator() {
  return getRuleContext<AtemParser::Empty_declare_operatorContext>(0);
}

AtemParser::Access_level_specifierContext* AtemParser::Empty_associated_declaratorContext::access_level_specifier() {
  return getRuleContext<AtemParser::Access_level_specifierContext>(0);
}

AtemParser::Storage_level_specifierContext* AtemParser::Empty_associated_declaratorContext::storage_level_specifier() {
  return getRuleContext<AtemParser::Storage_level_specifierContext>(0);
}

AtemParser::Member_specifiersContext* AtemParser::Empty_associated_declaratorContext::member_specifiers() {
  return getRuleContext<AtemParser::Member_specifiersContext>(0);
}


size_t AtemParser::Empty_associated_declaratorContext::getRuleIndex() const {
  return AtemParser::RuleEmpty_associated_declarator;
}

void AtemParser::Empty_associated_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmpty_associated_declarator(this);
}

void AtemParser::Empty_associated_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmpty_associated_declarator(this);
}

AtemParser::Empty_associated_declaratorContext* AtemParser::empty_associated_declarator() {
  Empty_associated_declaratorContext *_localctx = _tracker.createInstance<Empty_associated_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 106, AtemParser::RuleEmpty_associated_declarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(890);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & 158604569083905) != 0)) {
      setState(889);
      access_level_specifier();
    }
    setState(893);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      setState(892);
      storage_level_specifier();
      break;
    }

    default:
      break;
    }
    setState(896);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0)) {
      setState(895);
      member_specifiers();
    }
    setState(898);
    empty_declare_operator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Associated_nameContext ------------------------------------------------------------------

AtemParser::Associated_nameContext::Associated_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Associated_nameContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}


size_t AtemParser::Associated_nameContext::getRuleIndex() const {
  return AtemParser::RuleAssociated_name;
}

void AtemParser::Associated_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociated_name(this);
}

void AtemParser::Associated_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociated_name(this);
}

AtemParser::Associated_nameContext* AtemParser::associated_name() {
  Associated_nameContext *_localctx = _tracker.createInstance<Associated_nameContext>(_ctx, getState());
  enterRule(_localctx, 108, AtemParser::RuleAssociated_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(900);
    match(AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Initializer_listContext ------------------------------------------------------------------

AtemParser::Initializer_listContext::Initializer_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Initializer_listContext::KeywordInit() {
  return getToken(AtemParser::KeywordInit, 0);
}

AtemParser::Initializer_member_listContext* AtemParser::Initializer_listContext::initializer_member_list() {
  return getRuleContext<AtemParser::Initializer_member_listContext>(0);
}


size_t AtemParser::Initializer_listContext::getRuleIndex() const {
  return AtemParser::RuleInitializer_list;
}

void AtemParser::Initializer_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializer_list(this);
}

void AtemParser::Initializer_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializer_list(this);
}

AtemParser::Initializer_listContext* AtemParser::initializer_list() {
  Initializer_listContext *_localctx = _tracker.createInstance<Initializer_listContext>(_ctx, getState());
  enterRule(_localctx, 110, AtemParser::RuleInitializer_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(902);
    match(AtemParser::KeywordInit);
    setState(903);
    initializer_member_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Initializer_member_listContext ------------------------------------------------------------------

AtemParser::Initializer_member_listContext::Initializer_member_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Initializer_member_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

AtemParser::Initializer_membersContext* AtemParser::Initializer_member_listContext::initializer_members() {
  return getRuleContext<AtemParser::Initializer_membersContext>(0);
}

tree::TerminalNode* AtemParser::Initializer_member_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}


size_t AtemParser::Initializer_member_listContext::getRuleIndex() const {
  return AtemParser::RuleInitializer_member_list;
}

void AtemParser::Initializer_member_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializer_member_list(this);
}

void AtemParser::Initializer_member_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializer_member_list(this);
}

AtemParser::Initializer_member_listContext* AtemParser::initializer_member_list() {
  Initializer_member_listContext *_localctx = _tracker.createInstance<Initializer_member_listContext>(_ctx, getState());
  enterRule(_localctx, 112, AtemParser::RuleInitializer_member_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(905);
    match(AtemParser::LeftCurly);
    setState(906);
    initializer_members();
    setState(907);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Initializer_memberContext ------------------------------------------------------------------

AtemParser::Initializer_memberContext::Initializer_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Empty_declare_operatorContext* AtemParser::Initializer_memberContext::empty_declare_operator() {
  return getRuleContext<AtemParser::Empty_declare_operatorContext>(0);
}

AtemParser::Initializer_typeContext* AtemParser::Initializer_memberContext::initializer_type() {
  return getRuleContext<AtemParser::Initializer_typeContext>(0);
}

AtemParser::Function_bodyContext* AtemParser::Initializer_memberContext::function_body() {
  return getRuleContext<AtemParser::Function_bodyContext>(0);
}

AtemParser::Member_specifiersContext* AtemParser::Initializer_memberContext::member_specifiers() {
  return getRuleContext<AtemParser::Member_specifiersContext>(0);
}


size_t AtemParser::Initializer_memberContext::getRuleIndex() const {
  return AtemParser::RuleInitializer_member;
}

void AtemParser::Initializer_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializer_member(this);
}

void AtemParser::Initializer_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializer_member(this);
}

AtemParser::Initializer_memberContext* AtemParser::initializer_member() {
  Initializer_memberContext *_localctx = _tracker.createInstance<Initializer_memberContext>(_ctx, getState());
  enterRule(_localctx, 114, AtemParser::RuleInitializer_member);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(910);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0)) {
      setState(909);
      member_specifiers();
    }
    setState(912);
    empty_declare_operator();
    setState(913);
    initializer_type();
    setState(914);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Initializer_typeContext ------------------------------------------------------------------

AtemParser::Initializer_typeContext::Initializer_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Function_parameter_clauseContext* AtemParser::Initializer_typeContext::function_parameter_clause() {
  return getRuleContext<AtemParser::Function_parameter_clauseContext>(0);
}

AtemParser::Function_specifiersContext* AtemParser::Initializer_typeContext::function_specifiers() {
  return getRuleContext<AtemParser::Function_specifiersContext>(0);
}

AtemParser::Contract_listContext* AtemParser::Initializer_typeContext::contract_list() {
  return getRuleContext<AtemParser::Contract_listContext>(0);
}


size_t AtemParser::Initializer_typeContext::getRuleIndex() const {
  return AtemParser::RuleInitializer_type;
}

void AtemParser::Initializer_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializer_type(this);
}

void AtemParser::Initializer_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializer_type(this);
}

AtemParser::Initializer_typeContext* AtemParser::initializer_type() {
  Initializer_typeContext *_localctx = _tracker.createInstance<Initializer_typeContext>(_ctx, getState());
  enterRule(_localctx, 116, AtemParser::RuleInitializer_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(917);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      setState(916);
      function_parameter_clause();
      break;
    }

    default:
      break;
    }
    setState(920);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 524291) != 0)) {
      setState(919);
      function_specifiers();
    }
    setState(923);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordRequire) {
      setState(922);
      contract_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Initializer_membersContext ------------------------------------------------------------------

AtemParser::Initializer_membersContext::Initializer_membersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Initializer_memberContext *> AtemParser::Initializer_membersContext::initializer_member() {
  return getRuleContexts<AtemParser::Initializer_memberContext>();
}

AtemParser::Initializer_memberContext* AtemParser::Initializer_membersContext::initializer_member(size_t i) {
  return getRuleContext<AtemParser::Initializer_memberContext>(i);
}


size_t AtemParser::Initializer_membersContext::getRuleIndex() const {
  return AtemParser::RuleInitializer_members;
}

void AtemParser::Initializer_membersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializer_members(this);
}

void AtemParser::Initializer_membersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializer_members(this);
}

AtemParser::Initializer_membersContext* AtemParser::initializer_members() {
  Initializer_membersContext *_localctx = _tracker.createInstance<Initializer_membersContext>(_ctx, getState());
  enterRule(_localctx, 118, AtemParser::RuleInitializer_members);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(926); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(925);
      initializer_member();
      setState(928); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0) || _la == AtemParser::Colon);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Deinitializer_listContext ------------------------------------------------------------------

AtemParser::Deinitializer_listContext::Deinitializer_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Deinitializer_listContext::KeywordDeinit() {
  return getToken(AtemParser::KeywordDeinit, 0);
}

AtemParser::Deinitializer_member_listContext* AtemParser::Deinitializer_listContext::deinitializer_member_list() {
  return getRuleContext<AtemParser::Deinitializer_member_listContext>(0);
}


size_t AtemParser::Deinitializer_listContext::getRuleIndex() const {
  return AtemParser::RuleDeinitializer_list;
}

void AtemParser::Deinitializer_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeinitializer_list(this);
}

void AtemParser::Deinitializer_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeinitializer_list(this);
}

AtemParser::Deinitializer_listContext* AtemParser::deinitializer_list() {
  Deinitializer_listContext *_localctx = _tracker.createInstance<Deinitializer_listContext>(_ctx, getState());
  enterRule(_localctx, 120, AtemParser::RuleDeinitializer_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(930);
    match(AtemParser::KeywordDeinit);
    setState(931);
    deinitializer_member_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Deinitializer_member_listContext ------------------------------------------------------------------

AtemParser::Deinitializer_member_listContext::Deinitializer_member_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Deinitializer_member_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

AtemParser::Deinitializer_membersContext* AtemParser::Deinitializer_member_listContext::deinitializer_members() {
  return getRuleContext<AtemParser::Deinitializer_membersContext>(0);
}

tree::TerminalNode* AtemParser::Deinitializer_member_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}


size_t AtemParser::Deinitializer_member_listContext::getRuleIndex() const {
  return AtemParser::RuleDeinitializer_member_list;
}

void AtemParser::Deinitializer_member_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeinitializer_member_list(this);
}

void AtemParser::Deinitializer_member_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeinitializer_member_list(this);
}

AtemParser::Deinitializer_member_listContext* AtemParser::deinitializer_member_list() {
  Deinitializer_member_listContext *_localctx = _tracker.createInstance<Deinitializer_member_listContext>(_ctx, getState());
  enterRule(_localctx, 122, AtemParser::RuleDeinitializer_member_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(933);
    match(AtemParser::LeftCurly);
    setState(934);
    deinitializer_members();
    setState(935);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Deinitializer_memberContext ------------------------------------------------------------------

AtemParser::Deinitializer_memberContext::Deinitializer_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Empty_declare_operatorContext* AtemParser::Deinitializer_memberContext::empty_declare_operator() {
  return getRuleContext<AtemParser::Empty_declare_operatorContext>(0);
}

AtemParser::Deinitializer_typeContext* AtemParser::Deinitializer_memberContext::deinitializer_type() {
  return getRuleContext<AtemParser::Deinitializer_typeContext>(0);
}

AtemParser::Function_bodyContext* AtemParser::Deinitializer_memberContext::function_body() {
  return getRuleContext<AtemParser::Function_bodyContext>(0);
}

AtemParser::Member_specifiersContext* AtemParser::Deinitializer_memberContext::member_specifiers() {
  return getRuleContext<AtemParser::Member_specifiersContext>(0);
}


size_t AtemParser::Deinitializer_memberContext::getRuleIndex() const {
  return AtemParser::RuleDeinitializer_member;
}

void AtemParser::Deinitializer_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeinitializer_member(this);
}

void AtemParser::Deinitializer_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeinitializer_member(this);
}

AtemParser::Deinitializer_memberContext* AtemParser::deinitializer_member() {
  Deinitializer_memberContext *_localctx = _tracker.createInstance<Deinitializer_memberContext>(_ctx, getState());
  enterRule(_localctx, 124, AtemParser::RuleDeinitializer_member);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(938);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0)) {
      setState(937);
      member_specifiers();
    }
    setState(940);
    empty_declare_operator();
    setState(941);
    deinitializer_type();
    setState(942);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Deinitializer_typeContext ------------------------------------------------------------------

AtemParser::Deinitializer_typeContext::Deinitializer_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Function_parameter_clauseContext* AtemParser::Deinitializer_typeContext::function_parameter_clause() {
  return getRuleContext<AtemParser::Function_parameter_clauseContext>(0);
}

AtemParser::Function_specifiersContext* AtemParser::Deinitializer_typeContext::function_specifiers() {
  return getRuleContext<AtemParser::Function_specifiersContext>(0);
}

AtemParser::Contract_listContext* AtemParser::Deinitializer_typeContext::contract_list() {
  return getRuleContext<AtemParser::Contract_listContext>(0);
}


size_t AtemParser::Deinitializer_typeContext::getRuleIndex() const {
  return AtemParser::RuleDeinitializer_type;
}

void AtemParser::Deinitializer_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeinitializer_type(this);
}

void AtemParser::Deinitializer_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeinitializer_type(this);
}

AtemParser::Deinitializer_typeContext* AtemParser::deinitializer_type() {
  Deinitializer_typeContext *_localctx = _tracker.createInstance<Deinitializer_typeContext>(_ctx, getState());
  enterRule(_localctx, 126, AtemParser::RuleDeinitializer_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(945);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      setState(944);
      function_parameter_clause();
      break;
    }

    default:
      break;
    }
    setState(948);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 524291) != 0)) {
      setState(947);
      function_specifiers();
    }
    setState(951);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordRequire) {
      setState(950);
      contract_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Deinitializer_membersContext ------------------------------------------------------------------

AtemParser::Deinitializer_membersContext::Deinitializer_membersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Deinitializer_memberContext *> AtemParser::Deinitializer_membersContext::deinitializer_member() {
  return getRuleContexts<AtemParser::Deinitializer_memberContext>();
}

AtemParser::Deinitializer_memberContext* AtemParser::Deinitializer_membersContext::deinitializer_member(size_t i) {
  return getRuleContext<AtemParser::Deinitializer_memberContext>(i);
}


size_t AtemParser::Deinitializer_membersContext::getRuleIndex() const {
  return AtemParser::RuleDeinitializer_members;
}

void AtemParser::Deinitializer_membersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeinitializer_members(this);
}

void AtemParser::Deinitializer_membersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeinitializer_members(this);
}

AtemParser::Deinitializer_membersContext* AtemParser::deinitializer_members() {
  Deinitializer_membersContext *_localctx = _tracker.createInstance<Deinitializer_membersContext>(_ctx, getState());
  enterRule(_localctx, 128, AtemParser::RuleDeinitializer_members);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(954); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(953);
      deinitializer_member();
      setState(956); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0) || _la == AtemParser::Colon);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_listContext ------------------------------------------------------------------

AtemParser::Member_listContext::Member_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Member_listContext::KeywordMember() {
  return getToken(AtemParser::KeywordMember, 0);
}

tree::TerminalNode* AtemParser::Member_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

AtemParser::MembersContext* AtemParser::Member_listContext::members() {
  return getRuleContext<AtemParser::MembersContext>(0);
}

tree::TerminalNode* AtemParser::Member_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}


size_t AtemParser::Member_listContext::getRuleIndex() const {
  return AtemParser::RuleMember_list;
}

void AtemParser::Member_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_list(this);
}

void AtemParser::Member_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_list(this);
}

AtemParser::Member_listContext* AtemParser::member_list() {
  Member_listContext *_localctx = _tracker.createInstance<Member_listContext>(_ctx, getState());
  enterRule(_localctx, 130, AtemParser::RuleMember_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(958);
    match(AtemParser::KeywordMember);
    setState(959);
    match(AtemParser::LeftCurly);
    setState(960);
    members();
    setState(961);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberContext ------------------------------------------------------------------

AtemParser::MemberContext::MemberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Member_typeContext* AtemParser::MemberContext::member_type() {
  return getRuleContext<AtemParser::Member_typeContext>(0);
}

AtemParser::Member_variableContext* AtemParser::MemberContext::member_variable() {
  return getRuleContext<AtemParser::Member_variableContext>(0);
}

AtemParser::Member_constantContext* AtemParser::MemberContext::member_constant() {
  return getRuleContext<AtemParser::Member_constantContext>(0);
}

AtemParser::Member_functionContext* AtemParser::MemberContext::member_function() {
  return getRuleContext<AtemParser::Member_functionContext>(0);
}

AtemParser::Member_nested_typeContext* AtemParser::MemberContext::member_nested_type() {
  return getRuleContext<AtemParser::Member_nested_typeContext>(0);
}


size_t AtemParser::MemberContext::getRuleIndex() const {
  return AtemParser::RuleMember;
}

void AtemParser::MemberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember(this);
}

void AtemParser::MemberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember(this);
}

AtemParser::MemberContext* AtemParser::member() {
  MemberContext *_localctx = _tracker.createInstance<MemberContext>(_ctx, getState());
  enterRule(_localctx, 132, AtemParser::RuleMember);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(968);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(963);
      member_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(964);
      member_variable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(965);
      member_constant();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(966);
      member_function();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(967);
      member_nested_type();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MembersContext ------------------------------------------------------------------

AtemParser::MembersContext::MembersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::MemberContext *> AtemParser::MembersContext::member() {
  return getRuleContexts<AtemParser::MemberContext>();
}

AtemParser::MemberContext* AtemParser::MembersContext::member(size_t i) {
  return getRuleContext<AtemParser::MemberContext>(i);
}


size_t AtemParser::MembersContext::getRuleIndex() const {
  return AtemParser::RuleMembers;
}

void AtemParser::MembersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMembers(this);
}

void AtemParser::MembersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMembers(this);
}

AtemParser::MembersContext* AtemParser::members() {
  MembersContext *_localctx = _tracker.createInstance<MembersContext>(_ctx, getState());
  enterRule(_localctx, 134, AtemParser::RuleMembers);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(971); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(970);
      member();
      setState(973); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18040786788548608) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & -9223369829232131967) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_nested_typeContext ------------------------------------------------------------------

AtemParser::Member_nested_typeContext::Member_nested_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Nested_classContext* AtemParser::Member_nested_typeContext::nested_class() {
  return getRuleContext<AtemParser::Nested_classContext>(0);
}

AtemParser::Nested_structContext* AtemParser::Member_nested_typeContext::nested_struct() {
  return getRuleContext<AtemParser::Nested_structContext>(0);
}

AtemParser::Nested_protocolContext* AtemParser::Member_nested_typeContext::nested_protocol() {
  return getRuleContext<AtemParser::Nested_protocolContext>(0);
}

AtemParser::Nested_unionContext* AtemParser::Member_nested_typeContext::nested_union() {
  return getRuleContext<AtemParser::Nested_unionContext>(0);
}

AtemParser::Nested_enumContext* AtemParser::Member_nested_typeContext::nested_enum() {
  return getRuleContext<AtemParser::Nested_enumContext>(0);
}


size_t AtemParser::Member_nested_typeContext::getRuleIndex() const {
  return AtemParser::RuleMember_nested_type;
}

void AtemParser::Member_nested_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_nested_type(this);
}

void AtemParser::Member_nested_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_nested_type(this);
}

AtemParser::Member_nested_typeContext* AtemParser::member_nested_type() {
  Member_nested_typeContext *_localctx = _tracker.createInstance<Member_nested_typeContext>(_ctx, getState());
  enterRule(_localctx, 136, AtemParser::RuleMember_nested_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(980);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(975);
      nested_class();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(976);
      nested_struct();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(977);
      nested_protocol();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(978);
      nested_union();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(979);
      nested_enum();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nested_classContext ------------------------------------------------------------------

AtemParser::Nested_classContext::Nested_classContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Member_declaratorContext* AtemParser::Nested_classContext::member_declarator() {
  return getRuleContext<AtemParser::Member_declaratorContext>(0);
}

AtemParser::Class_declarationContext* AtemParser::Nested_classContext::class_declaration() {
  return getRuleContext<AtemParser::Class_declarationContext>(0);
}


size_t AtemParser::Nested_classContext::getRuleIndex() const {
  return AtemParser::RuleNested_class;
}

void AtemParser::Nested_classContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNested_class(this);
}

void AtemParser::Nested_classContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNested_class(this);
}

AtemParser::Nested_classContext* AtemParser::nested_class() {
  Nested_classContext *_localctx = _tracker.createInstance<Nested_classContext>(_ctx, getState());
  enterRule(_localctx, 138, AtemParser::RuleNested_class);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(982);
    member_declarator();
    setState(983);
    class_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nested_structContext ------------------------------------------------------------------

AtemParser::Nested_structContext::Nested_structContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Member_declaratorContext* AtemParser::Nested_structContext::member_declarator() {
  return getRuleContext<AtemParser::Member_declaratorContext>(0);
}

AtemParser::Struct_declarationContext* AtemParser::Nested_structContext::struct_declaration() {
  return getRuleContext<AtemParser::Struct_declarationContext>(0);
}


size_t AtemParser::Nested_structContext::getRuleIndex() const {
  return AtemParser::RuleNested_struct;
}

void AtemParser::Nested_structContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNested_struct(this);
}

void AtemParser::Nested_structContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNested_struct(this);
}

AtemParser::Nested_structContext* AtemParser::nested_struct() {
  Nested_structContext *_localctx = _tracker.createInstance<Nested_structContext>(_ctx, getState());
  enterRule(_localctx, 140, AtemParser::RuleNested_struct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(985);
    member_declarator();
    setState(986);
    struct_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nested_protocolContext ------------------------------------------------------------------

AtemParser::Nested_protocolContext::Nested_protocolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Member_declaratorContext* AtemParser::Nested_protocolContext::member_declarator() {
  return getRuleContext<AtemParser::Member_declaratorContext>(0);
}

AtemParser::Protocol_declarationContext* AtemParser::Nested_protocolContext::protocol_declaration() {
  return getRuleContext<AtemParser::Protocol_declarationContext>(0);
}


size_t AtemParser::Nested_protocolContext::getRuleIndex() const {
  return AtemParser::RuleNested_protocol;
}

void AtemParser::Nested_protocolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNested_protocol(this);
}

void AtemParser::Nested_protocolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNested_protocol(this);
}

AtemParser::Nested_protocolContext* AtemParser::nested_protocol() {
  Nested_protocolContext *_localctx = _tracker.createInstance<Nested_protocolContext>(_ctx, getState());
  enterRule(_localctx, 142, AtemParser::RuleNested_protocol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(988);
    member_declarator();
    setState(989);
    protocol_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nested_unionContext ------------------------------------------------------------------

AtemParser::Nested_unionContext::Nested_unionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Member_declaratorContext* AtemParser::Nested_unionContext::member_declarator() {
  return getRuleContext<AtemParser::Member_declaratorContext>(0);
}

AtemParser::Union_declarationContext* AtemParser::Nested_unionContext::union_declaration() {
  return getRuleContext<AtemParser::Union_declarationContext>(0);
}


size_t AtemParser::Nested_unionContext::getRuleIndex() const {
  return AtemParser::RuleNested_union;
}

void AtemParser::Nested_unionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNested_union(this);
}

void AtemParser::Nested_unionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNested_union(this);
}

AtemParser::Nested_unionContext* AtemParser::nested_union() {
  Nested_unionContext *_localctx = _tracker.createInstance<Nested_unionContext>(_ctx, getState());
  enterRule(_localctx, 144, AtemParser::RuleNested_union);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(991);
    member_declarator();
    setState(992);
    union_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nested_enumContext ------------------------------------------------------------------

AtemParser::Nested_enumContext::Nested_enumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Member_declaratorContext* AtemParser::Nested_enumContext::member_declarator() {
  return getRuleContext<AtemParser::Member_declaratorContext>(0);
}

AtemParser::Enum_declarationContext* AtemParser::Nested_enumContext::enum_declaration() {
  return getRuleContext<AtemParser::Enum_declarationContext>(0);
}


size_t AtemParser::Nested_enumContext::getRuleIndex() const {
  return AtemParser::RuleNested_enum;
}

void AtemParser::Nested_enumContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNested_enum(this);
}

void AtemParser::Nested_enumContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNested_enum(this);
}

AtemParser::Nested_enumContext* AtemParser::nested_enum() {
  Nested_enumContext *_localctx = _tracker.createInstance<Nested_enumContext>(_ctx, getState());
  enterRule(_localctx, 146, AtemParser::RuleNested_enum);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(994);
    member_declarator();
    setState(995);
    enum_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_typeContext ------------------------------------------------------------------

AtemParser::Member_typeContext::Member_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Member_declaratorContext* AtemParser::Member_typeContext::member_declarator() {
  return getRuleContext<AtemParser::Member_declaratorContext>(0);
}

AtemParser::Typealias_declarationContext* AtemParser::Member_typeContext::typealias_declaration() {
  return getRuleContext<AtemParser::Typealias_declarationContext>(0);
}


size_t AtemParser::Member_typeContext::getRuleIndex() const {
  return AtemParser::RuleMember_type;
}

void AtemParser::Member_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_type(this);
}

void AtemParser::Member_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_type(this);
}

AtemParser::Member_typeContext* AtemParser::member_type() {
  Member_typeContext *_localctx = _tracker.createInstance<Member_typeContext>(_ctx, getState());
  enterRule(_localctx, 148, AtemParser::RuleMember_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(997);
    member_declarator();
    setState(998);
    typealias_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_variableContext ------------------------------------------------------------------

AtemParser::Member_variableContext::Member_variableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Member_declaratorContext* AtemParser::Member_variableContext::member_declarator() {
  return getRuleContext<AtemParser::Member_declaratorContext>(0);
}

AtemParser::Variable_declarationContext* AtemParser::Member_variableContext::variable_declaration() {
  return getRuleContext<AtemParser::Variable_declarationContext>(0);
}

AtemParser::Getter_and_setter_listContext* AtemParser::Member_variableContext::getter_and_setter_list() {
  return getRuleContext<AtemParser::Getter_and_setter_listContext>(0);
}


size_t AtemParser::Member_variableContext::getRuleIndex() const {
  return AtemParser::RuleMember_variable;
}

void AtemParser::Member_variableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_variable(this);
}

void AtemParser::Member_variableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_variable(this);
}

AtemParser::Member_variableContext* AtemParser::member_variable() {
  Member_variableContext *_localctx = _tracker.createInstance<Member_variableContext>(_ctx, getState());
  enterRule(_localctx, 150, AtemParser::RuleMember_variable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1000);
    member_declarator();
    setState(1001);
    variable_declaration();
    setState(1003);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordWith) {
      setState(1002);
      getter_and_setter_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_constantContext ------------------------------------------------------------------

AtemParser::Member_constantContext::Member_constantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Member_declaratorContext* AtemParser::Member_constantContext::member_declarator() {
  return getRuleContext<AtemParser::Member_declaratorContext>(0);
}

AtemParser::Constant_declarationContext* AtemParser::Member_constantContext::constant_declaration() {
  return getRuleContext<AtemParser::Constant_declarationContext>(0);
}

AtemParser::Getter_listContext* AtemParser::Member_constantContext::getter_list() {
  return getRuleContext<AtemParser::Getter_listContext>(0);
}


size_t AtemParser::Member_constantContext::getRuleIndex() const {
  return AtemParser::RuleMember_constant;
}

void AtemParser::Member_constantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_constant(this);
}

void AtemParser::Member_constantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_constant(this);
}

AtemParser::Member_constantContext* AtemParser::member_constant() {
  Member_constantContext *_localctx = _tracker.createInstance<Member_constantContext>(_ctx, getState());
  enterRule(_localctx, 152, AtemParser::RuleMember_constant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1005);
    member_declarator();
    setState(1006);
    constant_declaration();
    setState(1008);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordWith) {
      setState(1007);
      getter_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_functionContext ------------------------------------------------------------------

AtemParser::Member_functionContext::Member_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Member_declaratorContext* AtemParser::Member_functionContext::member_declarator() {
  return getRuleContext<AtemParser::Member_declaratorContext>(0);
}

AtemParser::Function_declarationContext* AtemParser::Member_functionContext::function_declaration() {
  return getRuleContext<AtemParser::Function_declarationContext>(0);
}


size_t AtemParser::Member_functionContext::getRuleIndex() const {
  return AtemParser::RuleMember_function;
}

void AtemParser::Member_functionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_function(this);
}

void AtemParser::Member_functionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_function(this);
}

AtemParser::Member_functionContext* AtemParser::member_function() {
  Member_functionContext *_localctx = _tracker.createInstance<Member_functionContext>(_ctx, getState());
  enterRule(_localctx, 154, AtemParser::RuleMember_function);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1010);
    member_declarator();
    setState(1011);
    function_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_declaratorContext ------------------------------------------------------------------

AtemParser::Member_declaratorContext::Member_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Member_nameContext* AtemParser::Member_declaratorContext::member_name() {
  return getRuleContext<AtemParser::Member_nameContext>(0);
}

AtemParser::Declare_operatorContext* AtemParser::Member_declaratorContext::declare_operator() {
  return getRuleContext<AtemParser::Declare_operatorContext>(0);
}

AtemParser::Access_level_specifierContext* AtemParser::Member_declaratorContext::access_level_specifier() {
  return getRuleContext<AtemParser::Access_level_specifierContext>(0);
}

AtemParser::Storage_level_specifierContext* AtemParser::Member_declaratorContext::storage_level_specifier() {
  return getRuleContext<AtemParser::Storage_level_specifierContext>(0);
}

AtemParser::Member_specifiersContext* AtemParser::Member_declaratorContext::member_specifiers() {
  return getRuleContext<AtemParser::Member_specifiersContext>(0);
}


size_t AtemParser::Member_declaratorContext::getRuleIndex() const {
  return AtemParser::RuleMember_declarator;
}

void AtemParser::Member_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_declarator(this);
}

void AtemParser::Member_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_declarator(this);
}

AtemParser::Member_declaratorContext* AtemParser::member_declarator() {
  Member_declaratorContext *_localctx = _tracker.createInstance<Member_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 156, AtemParser::RuleMember_declarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1014);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & 158604569083905) != 0)) {
      setState(1013);
      access_level_specifier();
    }
    setState(1017);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      setState(1016);
      storage_level_specifier();
      break;
    }

    default:
      break;
    }
    setState(1020);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0)) {
      setState(1019);
      member_specifiers();
    }
    setState(1022);
    member_name();
    setState(1023);
    declare_operator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_nameContext ------------------------------------------------------------------

AtemParser::Member_nameContext::Member_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Member_nameContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}


size_t AtemParser::Member_nameContext::getRuleIndex() const {
  return AtemParser::RuleMember_name;
}

void AtemParser::Member_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_name(this);
}

void AtemParser::Member_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_name(this);
}

AtemParser::Member_nameContext* AtemParser::member_name() {
  Member_nameContext *_localctx = _tracker.createInstance<Member_nameContext>(_ctx, getState());
  enterRule(_localctx, 158, AtemParser::RuleMember_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1025);
    match(AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Getter_and_setter_listContext ------------------------------------------------------------------

AtemParser::Getter_and_setter_listContext::Getter_and_setter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Getter_and_setter_listContext::KeywordWith() {
  return getToken(AtemParser::KeywordWith, 0);
}

tree::TerminalNode* AtemParser::Getter_and_setter_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

AtemParser::Getter_and_setter_itemsContext* AtemParser::Getter_and_setter_listContext::getter_and_setter_items() {
  return getRuleContext<AtemParser::Getter_and_setter_itemsContext>(0);
}

tree::TerminalNode* AtemParser::Getter_and_setter_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}


size_t AtemParser::Getter_and_setter_listContext::getRuleIndex() const {
  return AtemParser::RuleGetter_and_setter_list;
}

void AtemParser::Getter_and_setter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGetter_and_setter_list(this);
}

void AtemParser::Getter_and_setter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGetter_and_setter_list(this);
}

AtemParser::Getter_and_setter_listContext* AtemParser::getter_and_setter_list() {
  Getter_and_setter_listContext *_localctx = _tracker.createInstance<Getter_and_setter_listContext>(_ctx, getState());
  enterRule(_localctx, 160, AtemParser::RuleGetter_and_setter_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1027);
    match(AtemParser::KeywordWith);
    setState(1028);
    match(AtemParser::LeftCurly);
    setState(1029);
    getter_and_setter_items();
    setState(1030);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Getter_listContext ------------------------------------------------------------------

AtemParser::Getter_listContext::Getter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Getter_listContext::KeywordWith() {
  return getToken(AtemParser::KeywordWith, 0);
}

tree::TerminalNode* AtemParser::Getter_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

AtemParser::Getter_declarationContext* AtemParser::Getter_listContext::getter_declaration() {
  return getRuleContext<AtemParser::Getter_declarationContext>(0);
}

tree::TerminalNode* AtemParser::Getter_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}


size_t AtemParser::Getter_listContext::getRuleIndex() const {
  return AtemParser::RuleGetter_list;
}

void AtemParser::Getter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGetter_list(this);
}

void AtemParser::Getter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGetter_list(this);
}

AtemParser::Getter_listContext* AtemParser::getter_list() {
  Getter_listContext *_localctx = _tracker.createInstance<Getter_listContext>(_ctx, getState());
  enterRule(_localctx, 162, AtemParser::RuleGetter_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1032);
    match(AtemParser::KeywordWith);
    setState(1033);
    match(AtemParser::LeftCurly);
    setState(1034);
    getter_declaration();
    setState(1035);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Getter_and_setter_itemContext ------------------------------------------------------------------

AtemParser::Getter_and_setter_itemContext::Getter_and_setter_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Getter_declarationContext* AtemParser::Getter_and_setter_itemContext::getter_declaration() {
  return getRuleContext<AtemParser::Getter_declarationContext>(0);
}

AtemParser::Setter_declarationContext* AtemParser::Getter_and_setter_itemContext::setter_declaration() {
  return getRuleContext<AtemParser::Setter_declarationContext>(0);
}


size_t AtemParser::Getter_and_setter_itemContext::getRuleIndex() const {
  return AtemParser::RuleGetter_and_setter_item;
}

void AtemParser::Getter_and_setter_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGetter_and_setter_item(this);
}

void AtemParser::Getter_and_setter_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGetter_and_setter_item(this);
}

AtemParser::Getter_and_setter_itemContext* AtemParser::getter_and_setter_item() {
  Getter_and_setter_itemContext *_localctx = _tracker.createInstance<Getter_and_setter_itemContext>(_ctx, getState());
  enterRule(_localctx, 164, AtemParser::RuleGetter_and_setter_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1039);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1037);
      getter_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1038);
      setter_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Getter_and_setter_itemsContext ------------------------------------------------------------------

AtemParser::Getter_and_setter_itemsContext::Getter_and_setter_itemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Getter_and_setter_itemContext *> AtemParser::Getter_and_setter_itemsContext::getter_and_setter_item() {
  return getRuleContexts<AtemParser::Getter_and_setter_itemContext>();
}

AtemParser::Getter_and_setter_itemContext* AtemParser::Getter_and_setter_itemsContext::getter_and_setter_item(size_t i) {
  return getRuleContext<AtemParser::Getter_and_setter_itemContext>(i);
}


size_t AtemParser::Getter_and_setter_itemsContext::getRuleIndex() const {
  return AtemParser::RuleGetter_and_setter_items;
}

void AtemParser::Getter_and_setter_itemsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGetter_and_setter_items(this);
}

void AtemParser::Getter_and_setter_itemsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGetter_and_setter_items(this);
}

AtemParser::Getter_and_setter_itemsContext* AtemParser::getter_and_setter_items() {
  Getter_and_setter_itemsContext *_localctx = _tracker.createInstance<Getter_and_setter_itemsContext>(_ctx, getState());
  enterRule(_localctx, 166, AtemParser::RuleGetter_and_setter_items);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1042); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1041);
      getter_and_setter_item();
      setState(1044); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0) || _la == AtemParser::Colon);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Getter_declarationContext ------------------------------------------------------------------

AtemParser::Getter_declarationContext::Getter_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Empty_declare_operatorContext* AtemParser::Getter_declarationContext::empty_declare_operator() {
  return getRuleContext<AtemParser::Empty_declare_operatorContext>(0);
}

tree::TerminalNode* AtemParser::Getter_declarationContext::KeywordGet() {
  return getToken(AtemParser::KeywordGet, 0);
}

AtemParser::Getter_typeContext* AtemParser::Getter_declarationContext::getter_type() {
  return getRuleContext<AtemParser::Getter_typeContext>(0);
}

AtemParser::Function_bodyContext* AtemParser::Getter_declarationContext::function_body() {
  return getRuleContext<AtemParser::Function_bodyContext>(0);
}

AtemParser::Member_specifiersContext* AtemParser::Getter_declarationContext::member_specifiers() {
  return getRuleContext<AtemParser::Member_specifiersContext>(0);
}


size_t AtemParser::Getter_declarationContext::getRuleIndex() const {
  return AtemParser::RuleGetter_declaration;
}

void AtemParser::Getter_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGetter_declaration(this);
}

void AtemParser::Getter_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGetter_declaration(this);
}

AtemParser::Getter_declarationContext* AtemParser::getter_declaration() {
  Getter_declarationContext *_localctx = _tracker.createInstance<Getter_declarationContext>(_ctx, getState());
  enterRule(_localctx, 168, AtemParser::RuleGetter_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1047);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0)) {
      setState(1046);
      member_specifiers();
    }
    setState(1049);
    empty_declare_operator();
    setState(1050);
    match(AtemParser::KeywordGet);
    setState(1051);
    getter_type();
    setState(1052);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Getter_typeContext ------------------------------------------------------------------

AtemParser::Getter_typeContext::Getter_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Function_specifiersContext* AtemParser::Getter_typeContext::function_specifiers() {
  return getRuleContext<AtemParser::Function_specifiersContext>(0);
}

AtemParser::Contract_listContext* AtemParser::Getter_typeContext::contract_list() {
  return getRuleContext<AtemParser::Contract_listContext>(0);
}


size_t AtemParser::Getter_typeContext::getRuleIndex() const {
  return AtemParser::RuleGetter_type;
}

void AtemParser::Getter_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGetter_type(this);
}

void AtemParser::Getter_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGetter_type(this);
}

AtemParser::Getter_typeContext* AtemParser::getter_type() {
  Getter_typeContext *_localctx = _tracker.createInstance<Getter_typeContext>(_ctx, getState());
  enterRule(_localctx, 170, AtemParser::RuleGetter_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1055);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 524291) != 0)) {
      setState(1054);
      function_specifiers();
    }
    setState(1058);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordRequire) {
      setState(1057);
      contract_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Setter_declarationContext ------------------------------------------------------------------

AtemParser::Setter_declarationContext::Setter_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Empty_declare_operatorContext* AtemParser::Setter_declarationContext::empty_declare_operator() {
  return getRuleContext<AtemParser::Empty_declare_operatorContext>(0);
}

tree::TerminalNode* AtemParser::Setter_declarationContext::KeywordSet() {
  return getToken(AtemParser::KeywordSet, 0);
}

AtemParser::Setter_typeContext* AtemParser::Setter_declarationContext::setter_type() {
  return getRuleContext<AtemParser::Setter_typeContext>(0);
}

AtemParser::Function_bodyContext* AtemParser::Setter_declarationContext::function_body() {
  return getRuleContext<AtemParser::Function_bodyContext>(0);
}

AtemParser::Member_specifiersContext* AtemParser::Setter_declarationContext::member_specifiers() {
  return getRuleContext<AtemParser::Member_specifiersContext>(0);
}


size_t AtemParser::Setter_declarationContext::getRuleIndex() const {
  return AtemParser::RuleSetter_declaration;
}

void AtemParser::Setter_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetter_declaration(this);
}

void AtemParser::Setter_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetter_declaration(this);
}

AtemParser::Setter_declarationContext* AtemParser::setter_declaration() {
  Setter_declarationContext *_localctx = _tracker.createInstance<Setter_declarationContext>(_ctx, getState());
  enterRule(_localctx, 172, AtemParser::RuleSetter_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1061);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0)) {
      setState(1060);
      member_specifiers();
    }
    setState(1063);
    empty_declare_operator();
    setState(1064);
    match(AtemParser::KeywordSet);
    setState(1065);
    setter_type();
    setState(1066);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Setter_typeContext ------------------------------------------------------------------

AtemParser::Setter_typeContext::Setter_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Setter_parameter_clauseContext* AtemParser::Setter_typeContext::setter_parameter_clause() {
  return getRuleContext<AtemParser::Setter_parameter_clauseContext>(0);
}

AtemParser::Function_specifiersContext* AtemParser::Setter_typeContext::function_specifiers() {
  return getRuleContext<AtemParser::Function_specifiersContext>(0);
}

AtemParser::Contract_listContext* AtemParser::Setter_typeContext::contract_list() {
  return getRuleContext<AtemParser::Contract_listContext>(0);
}


size_t AtemParser::Setter_typeContext::getRuleIndex() const {
  return AtemParser::RuleSetter_type;
}

void AtemParser::Setter_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetter_type(this);
}

void AtemParser::Setter_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetter_type(this);
}

AtemParser::Setter_typeContext* AtemParser::setter_type() {
  Setter_typeContext *_localctx = _tracker.createInstance<Setter_typeContext>(_ctx, getState());
  enterRule(_localctx, 174, AtemParser::RuleSetter_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1069);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      setState(1068);
      setter_parameter_clause();
      break;
    }

    default:
      break;
    }
    setState(1072);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 524291) != 0)) {
      setState(1071);
      function_specifiers();
    }
    setState(1075);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordRequire) {
      setState(1074);
      contract_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Setter_parameter_clauseContext ------------------------------------------------------------------

AtemParser::Setter_parameter_clauseContext::Setter_parameter_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Setter_parameter_clauseContext::LeftParenthese() {
  return getToken(AtemParser::LeftParenthese, 0);
}

AtemParser::Setter_parameterContext* AtemParser::Setter_parameter_clauseContext::setter_parameter() {
  return getRuleContext<AtemParser::Setter_parameterContext>(0);
}

tree::TerminalNode* AtemParser::Setter_parameter_clauseContext::RightParenthese() {
  return getToken(AtemParser::RightParenthese, 0);
}


size_t AtemParser::Setter_parameter_clauseContext::getRuleIndex() const {
  return AtemParser::RuleSetter_parameter_clause;
}

void AtemParser::Setter_parameter_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetter_parameter_clause(this);
}

void AtemParser::Setter_parameter_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetter_parameter_clause(this);
}

AtemParser::Setter_parameter_clauseContext* AtemParser::setter_parameter_clause() {
  Setter_parameter_clauseContext *_localctx = _tracker.createInstance<Setter_parameter_clauseContext>(_ctx, getState());
  enterRule(_localctx, 176, AtemParser::RuleSetter_parameter_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1077);
    match(AtemParser::LeftParenthese);
    setState(1078);
    setter_parameter();
    setState(1079);
    match(AtemParser::RightParenthese);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Setter_parameterContext ------------------------------------------------------------------

AtemParser::Setter_parameterContext::Setter_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Setter_parameter_nameContext* AtemParser::Setter_parameterContext::setter_parameter_name() {
  return getRuleContext<AtemParser::Setter_parameter_nameContext>(0);
}

tree::TerminalNode* AtemParser::Setter_parameterContext::Colon() {
  return getToken(AtemParser::Colon, 0);
}

AtemParser::Type_annotationContext* AtemParser::Setter_parameterContext::type_annotation() {
  return getRuleContext<AtemParser::Type_annotationContext>(0);
}


size_t AtemParser::Setter_parameterContext::getRuleIndex() const {
  return AtemParser::RuleSetter_parameter;
}

void AtemParser::Setter_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetter_parameter(this);
}

void AtemParser::Setter_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetter_parameter(this);
}

AtemParser::Setter_parameterContext* AtemParser::setter_parameter() {
  Setter_parameterContext *_localctx = _tracker.createInstance<Setter_parameterContext>(_ctx, getState());
  enterRule(_localctx, 178, AtemParser::RuleSetter_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1081);
    setter_parameter_name();
    setState(1084);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Colon) {
      setState(1082);
      match(AtemParser::Colon);
      setState(1083);
      type_annotation();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Setter_parameter_nameContext ------------------------------------------------------------------

AtemParser::Setter_parameter_nameContext::Setter_parameter_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Setter_parameter_nameContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}


size_t AtemParser::Setter_parameter_nameContext::getRuleIndex() const {
  return AtemParser::RuleSetter_parameter_name;
}

void AtemParser::Setter_parameter_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetter_parameter_name(this);
}

void AtemParser::Setter_parameter_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetter_parameter_name(this);
}

AtemParser::Setter_parameter_nameContext* AtemParser::setter_parameter_name() {
  Setter_parameter_nameContext *_localctx = _tracker.createInstance<Setter_parameter_nameContext>(_ctx, getState());
  enterRule(_localctx, 180, AtemParser::RuleSetter_parameter_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1086);
    match(AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protocol_declarationContext ------------------------------------------------------------------

AtemParser::Protocol_declarationContext::Protocol_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Protocol_declarationContext::KeywordProtocol() {
  return getToken(AtemParser::KeywordProtocol, 0);
}

AtemParser::Protocol_requirement_listContext* AtemParser::Protocol_declarationContext::protocol_requirement_list() {
  return getRuleContext<AtemParser::Protocol_requirement_listContext>(0);
}

AtemParser::Udt_parameter_clauseContext* AtemParser::Protocol_declarationContext::udt_parameter_clause() {
  return getRuleContext<AtemParser::Udt_parameter_clauseContext>(0);
}

AtemParser::AttributesContext* AtemParser::Protocol_declarationContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}

AtemParser::Final_specifierContext* AtemParser::Protocol_declarationContext::final_specifier() {
  return getRuleContext<AtemParser::Final_specifierContext>(0);
}

AtemParser::Protocol_extend_listContext* AtemParser::Protocol_declarationContext::protocol_extend_list() {
  return getRuleContext<AtemParser::Protocol_extend_listContext>(0);
}


size_t AtemParser::Protocol_declarationContext::getRuleIndex() const {
  return AtemParser::RuleProtocol_declaration;
}

void AtemParser::Protocol_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocol_declaration(this);
}

void AtemParser::Protocol_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocol_declaration(this);
}

AtemParser::Protocol_declarationContext* AtemParser::protocol_declaration() {
  Protocol_declarationContext *_localctx = _tracker.createInstance<Protocol_declarationContext>(_ctx, getState());
  enterRule(_localctx, 182, AtemParser::RuleProtocol_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1088);
    match(AtemParser::KeywordProtocol);
    setState(1090);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::LeftParenthese) {
      setState(1089);
      udt_parameter_clause();
    }
    setState(1093);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(1092);
      attributes();
    }
    setState(1096);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordFinal) {
      setState(1095);
      final_specifier();
    }
    setState(1099);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordExtend) {
      setState(1098);
      protocol_extend_list();
    }
    setState(1101);
    protocol_requirement_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protocol_extend_listContext ------------------------------------------------------------------

AtemParser::Protocol_extend_listContext::Protocol_extend_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Protocol_extend_listContext::KeywordExtend() {
  return getToken(AtemParser::KeywordExtend, 0);
}

tree::TerminalNode* AtemParser::Protocol_extend_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

tree::TerminalNode* AtemParser::Protocol_extend_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}


size_t AtemParser::Protocol_extend_listContext::getRuleIndex() const {
  return AtemParser::RuleProtocol_extend_list;
}

void AtemParser::Protocol_extend_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocol_extend_list(this);
}

void AtemParser::Protocol_extend_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocol_extend_list(this);
}

AtemParser::Protocol_extend_listContext* AtemParser::protocol_extend_list() {
  Protocol_extend_listContext *_localctx = _tracker.createInstance<Protocol_extend_listContext>(_ctx, getState());
  enterRule(_localctx, 184, AtemParser::RuleProtocol_extend_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1103);
    match(AtemParser::KeywordExtend);
    setState(1104);
    match(AtemParser::LeftCurly);
    setState(1105);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protocol_requirement_listContext ------------------------------------------------------------------

AtemParser::Protocol_requirement_listContext::Protocol_requirement_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Protocol_requirement_listContext::KeywordMember() {
  return getToken(AtemParser::KeywordMember, 0);
}

tree::TerminalNode* AtemParser::Protocol_requirement_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

AtemParser::Protocol_requirement_itemsContext* AtemParser::Protocol_requirement_listContext::protocol_requirement_items() {
  return getRuleContext<AtemParser::Protocol_requirement_itemsContext>(0);
}

tree::TerminalNode* AtemParser::Protocol_requirement_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}


size_t AtemParser::Protocol_requirement_listContext::getRuleIndex() const {
  return AtemParser::RuleProtocol_requirement_list;
}

void AtemParser::Protocol_requirement_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocol_requirement_list(this);
}

void AtemParser::Protocol_requirement_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocol_requirement_list(this);
}

AtemParser::Protocol_requirement_listContext* AtemParser::protocol_requirement_list() {
  Protocol_requirement_listContext *_localctx = _tracker.createInstance<Protocol_requirement_listContext>(_ctx, getState());
  enterRule(_localctx, 186, AtemParser::RuleProtocol_requirement_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1107);
    match(AtemParser::KeywordMember);
    setState(1108);
    match(AtemParser::LeftCurly);
    setState(1109);
    protocol_requirement_items();
    setState(1110);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protocol_requirement_itemContext ------------------------------------------------------------------

AtemParser::Protocol_requirement_itemContext::Protocol_requirement_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Protocol_requirement_typeContext* AtemParser::Protocol_requirement_itemContext::protocol_requirement_type() {
  return getRuleContext<AtemParser::Protocol_requirement_typeContext>(0);
}

AtemParser::Protocol_requirement_functionContext* AtemParser::Protocol_requirement_itemContext::protocol_requirement_function() {
  return getRuleContext<AtemParser::Protocol_requirement_functionContext>(0);
}

AtemParser::Protocol_requirement_variableContext* AtemParser::Protocol_requirement_itemContext::protocol_requirement_variable() {
  return getRuleContext<AtemParser::Protocol_requirement_variableContext>(0);
}

AtemParser::Protocol_requirement_constantContext* AtemParser::Protocol_requirement_itemContext::protocol_requirement_constant() {
  return getRuleContext<AtemParser::Protocol_requirement_constantContext>(0);
}

AtemParser::Protocol_requirement_initializerContext* AtemParser::Protocol_requirement_itemContext::protocol_requirement_initializer() {
  return getRuleContext<AtemParser::Protocol_requirement_initializerContext>(0);
}

AtemParser::Protocol_requirement_deinitializerContext* AtemParser::Protocol_requirement_itemContext::protocol_requirement_deinitializer() {
  return getRuleContext<AtemParser::Protocol_requirement_deinitializerContext>(0);
}


size_t AtemParser::Protocol_requirement_itemContext::getRuleIndex() const {
  return AtemParser::RuleProtocol_requirement_item;
}

void AtemParser::Protocol_requirement_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocol_requirement_item(this);
}

void AtemParser::Protocol_requirement_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocol_requirement_item(this);
}

AtemParser::Protocol_requirement_itemContext* AtemParser::protocol_requirement_item() {
  Protocol_requirement_itemContext *_localctx = _tracker.createInstance<Protocol_requirement_itemContext>(_ctx, getState());
  enterRule(_localctx, 188, AtemParser::RuleProtocol_requirement_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1118);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1112);
      protocol_requirement_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1113);
      protocol_requirement_function();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1114);
      protocol_requirement_variable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1115);
      protocol_requirement_constant();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1116);
      protocol_requirement_initializer();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1117);
      protocol_requirement_deinitializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protocol_requirement_itemsContext ------------------------------------------------------------------

AtemParser::Protocol_requirement_itemsContext::Protocol_requirement_itemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Protocol_requirement_itemContext *> AtemParser::Protocol_requirement_itemsContext::protocol_requirement_item() {
  return getRuleContexts<AtemParser::Protocol_requirement_itemContext>();
}

AtemParser::Protocol_requirement_itemContext* AtemParser::Protocol_requirement_itemsContext::protocol_requirement_item(size_t i) {
  return getRuleContext<AtemParser::Protocol_requirement_itemContext>(i);
}


size_t AtemParser::Protocol_requirement_itemsContext::getRuleIndex() const {
  return AtemParser::RuleProtocol_requirement_items;
}

void AtemParser::Protocol_requirement_itemsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocol_requirement_items(this);
}

void AtemParser::Protocol_requirement_itemsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocol_requirement_items(this);
}

AtemParser::Protocol_requirement_itemsContext* AtemParser::protocol_requirement_items() {
  Protocol_requirement_itemsContext *_localctx = _tracker.createInstance<Protocol_requirement_itemsContext>(_ctx, getState());
  enterRule(_localctx, 190, AtemParser::RuleProtocol_requirement_items);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1121); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1120);
      protocol_requirement_item();
      setState(1123); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == AtemParser::KeywordRequire);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protocol_requirement_typeContext ------------------------------------------------------------------

AtemParser::Protocol_requirement_typeContext::Protocol_requirement_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Requirement_declaratorContext* AtemParser::Protocol_requirement_typeContext::requirement_declarator() {
  return getRuleContext<AtemParser::Requirement_declaratorContext>(0);
}

tree::TerminalNode* AtemParser::Protocol_requirement_typeContext::KeywordAlias() {
  return getToken(AtemParser::KeywordAlias, 0);
}

tree::TerminalNode* AtemParser::Protocol_requirement_typeContext::KeywordType() {
  return getToken(AtemParser::KeywordType, 0);
}

AtemParser::Requirement_default_clauseContext* AtemParser::Protocol_requirement_typeContext::requirement_default_clause() {
  return getRuleContext<AtemParser::Requirement_default_clauseContext>(0);
}

AtemParser::Type_expressionContext* AtemParser::Protocol_requirement_typeContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}


size_t AtemParser::Protocol_requirement_typeContext::getRuleIndex() const {
  return AtemParser::RuleProtocol_requirement_type;
}

void AtemParser::Protocol_requirement_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocol_requirement_type(this);
}

void AtemParser::Protocol_requirement_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocol_requirement_type(this);
}

AtemParser::Protocol_requirement_typeContext* AtemParser::protocol_requirement_type() {
  Protocol_requirement_typeContext *_localctx = _tracker.createInstance<Protocol_requirement_typeContext>(_ctx, getState());
  enterRule(_localctx, 192, AtemParser::RuleProtocol_requirement_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1125);
    requirement_declarator();
    setState(1126);
    match(AtemParser::KeywordAlias);
    setState(1127);
    match(AtemParser::KeywordType);
    setState(1131);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordDefault) {
      setState(1128);
      requirement_default_clause();
      setState(1129);
      type_expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protocol_requirement_functionContext ------------------------------------------------------------------

AtemParser::Protocol_requirement_functionContext::Protocol_requirement_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Requirement_declaratorContext* AtemParser::Protocol_requirement_functionContext::requirement_declarator() {
  return getRuleContext<AtemParser::Requirement_declaratorContext>(0);
}

tree::TerminalNode* AtemParser::Protocol_requirement_functionContext::KeywordFunc() {
  return getToken(AtemParser::KeywordFunc, 0);
}

AtemParser::AttributesContext* AtemParser::Protocol_requirement_functionContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}

AtemParser::Function_typeContext* AtemParser::Protocol_requirement_functionContext::function_type() {
  return getRuleContext<AtemParser::Function_typeContext>(0);
}

AtemParser::Requirement_default_clauseContext* AtemParser::Protocol_requirement_functionContext::requirement_default_clause() {
  return getRuleContext<AtemParser::Requirement_default_clauseContext>(0);
}

AtemParser::Function_bodyContext* AtemParser::Protocol_requirement_functionContext::function_body() {
  return getRuleContext<AtemParser::Function_bodyContext>(0);
}


size_t AtemParser::Protocol_requirement_functionContext::getRuleIndex() const {
  return AtemParser::RuleProtocol_requirement_function;
}

void AtemParser::Protocol_requirement_functionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocol_requirement_function(this);
}

void AtemParser::Protocol_requirement_functionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocol_requirement_function(this);
}

AtemParser::Protocol_requirement_functionContext* AtemParser::protocol_requirement_function() {
  Protocol_requirement_functionContext *_localctx = _tracker.createInstance<Protocol_requirement_functionContext>(_ctx, getState());
  enterRule(_localctx, 194, AtemParser::RuleProtocol_requirement_function);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1133);
    requirement_declarator();
    setState(1134);
    match(AtemParser::KeywordFunc);
    setState(1136);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(1135);
      attributes();
    }
    setState(1139);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::LeftParenthese) {
      setState(1138);
      function_type();
    }
    setState(1144);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordDefault) {
      setState(1141);
      requirement_default_clause();
      setState(1142);
      function_body();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protocol_requirement_variableContext ------------------------------------------------------------------

AtemParser::Protocol_requirement_variableContext::Protocol_requirement_variableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Requirement_declaratorContext* AtemParser::Protocol_requirement_variableContext::requirement_declarator() {
  return getRuleContext<AtemParser::Requirement_declaratorContext>(0);
}

tree::TerminalNode* AtemParser::Protocol_requirement_variableContext::KeywordVar() {
  return getToken(AtemParser::KeywordVar, 0);
}

AtemParser::Requirement_getter_and_setterContext* AtemParser::Protocol_requirement_variableContext::requirement_getter_and_setter() {
  return getRuleContext<AtemParser::Requirement_getter_and_setterContext>(0);
}

AtemParser::Requirement_default_clauseContext* AtemParser::Protocol_requirement_variableContext::requirement_default_clause() {
  return getRuleContext<AtemParser::Requirement_default_clauseContext>(0);
}

AtemParser::Variable_declarationContext* AtemParser::Protocol_requirement_variableContext::variable_declaration() {
  return getRuleContext<AtemParser::Variable_declarationContext>(0);
}

AtemParser::Getter_and_setter_listContext* AtemParser::Protocol_requirement_variableContext::getter_and_setter_list() {
  return getRuleContext<AtemParser::Getter_and_setter_listContext>(0);
}


size_t AtemParser::Protocol_requirement_variableContext::getRuleIndex() const {
  return AtemParser::RuleProtocol_requirement_variable;
}

void AtemParser::Protocol_requirement_variableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocol_requirement_variable(this);
}

void AtemParser::Protocol_requirement_variableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocol_requirement_variable(this);
}

AtemParser::Protocol_requirement_variableContext* AtemParser::protocol_requirement_variable() {
  Protocol_requirement_variableContext *_localctx = _tracker.createInstance<Protocol_requirement_variableContext>(_ctx, getState());
  enterRule(_localctx, 196, AtemParser::RuleProtocol_requirement_variable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1146);
    requirement_declarator();
    setState(1147);
    match(AtemParser::KeywordVar);
    setState(1149);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::LeftCurly) {
      setState(1148);
      requirement_getter_and_setter();
    }
    setState(1156);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordDefault) {
      setState(1151);
      requirement_default_clause();
      setState(1152);
      variable_declaration();
      setState(1154);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AtemParser::KeywordWith) {
        setState(1153);
        getter_and_setter_list();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protocol_requirement_constantContext ------------------------------------------------------------------

AtemParser::Protocol_requirement_constantContext::Protocol_requirement_constantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Requirement_declaratorContext* AtemParser::Protocol_requirement_constantContext::requirement_declarator() {
  return getRuleContext<AtemParser::Requirement_declaratorContext>(0);
}

tree::TerminalNode* AtemParser::Protocol_requirement_constantContext::KeywordConst() {
  return getToken(AtemParser::KeywordConst, 0);
}

AtemParser::Requirement_getterContext* AtemParser::Protocol_requirement_constantContext::requirement_getter() {
  return getRuleContext<AtemParser::Requirement_getterContext>(0);
}

AtemParser::Requirement_default_clauseContext* AtemParser::Protocol_requirement_constantContext::requirement_default_clause() {
  return getRuleContext<AtemParser::Requirement_default_clauseContext>(0);
}

AtemParser::Constant_declarationContext* AtemParser::Protocol_requirement_constantContext::constant_declaration() {
  return getRuleContext<AtemParser::Constant_declarationContext>(0);
}

AtemParser::Getter_listContext* AtemParser::Protocol_requirement_constantContext::getter_list() {
  return getRuleContext<AtemParser::Getter_listContext>(0);
}


size_t AtemParser::Protocol_requirement_constantContext::getRuleIndex() const {
  return AtemParser::RuleProtocol_requirement_constant;
}

void AtemParser::Protocol_requirement_constantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocol_requirement_constant(this);
}

void AtemParser::Protocol_requirement_constantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocol_requirement_constant(this);
}

AtemParser::Protocol_requirement_constantContext* AtemParser::protocol_requirement_constant() {
  Protocol_requirement_constantContext *_localctx = _tracker.createInstance<Protocol_requirement_constantContext>(_ctx, getState());
  enterRule(_localctx, 198, AtemParser::RuleProtocol_requirement_constant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1158);
    requirement_declarator();
    setState(1159);
    match(AtemParser::KeywordConst);
    setState(1161);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::LeftCurly) {
      setState(1160);
      requirement_getter();
    }
    setState(1168);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordDefault) {
      setState(1163);
      requirement_default_clause();
      setState(1164);
      constant_declaration();
      setState(1166);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AtemParser::KeywordWith) {
        setState(1165);
        getter_list();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protocol_requirement_initializerContext ------------------------------------------------------------------

AtemParser::Protocol_requirement_initializerContext::Protocol_requirement_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Empty_requirement_declaratorContext* AtemParser::Protocol_requirement_initializerContext::empty_requirement_declarator() {
  return getRuleContext<AtemParser::Empty_requirement_declaratorContext>(0);
}

tree::TerminalNode* AtemParser::Protocol_requirement_initializerContext::KeywordInit() {
  return getToken(AtemParser::KeywordInit, 0);
}

AtemParser::Requirement_default_clauseContext* AtemParser::Protocol_requirement_initializerContext::requirement_default_clause() {
  return getRuleContext<AtemParser::Requirement_default_clauseContext>(0);
}

AtemParser::Initializer_declarationContext* AtemParser::Protocol_requirement_initializerContext::initializer_declaration() {
  return getRuleContext<AtemParser::Initializer_declarationContext>(0);
}


size_t AtemParser::Protocol_requirement_initializerContext::getRuleIndex() const {
  return AtemParser::RuleProtocol_requirement_initializer;
}

void AtemParser::Protocol_requirement_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocol_requirement_initializer(this);
}

void AtemParser::Protocol_requirement_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocol_requirement_initializer(this);
}

AtemParser::Protocol_requirement_initializerContext* AtemParser::protocol_requirement_initializer() {
  Protocol_requirement_initializerContext *_localctx = _tracker.createInstance<Protocol_requirement_initializerContext>(_ctx, getState());
  enterRule(_localctx, 200, AtemParser::RuleProtocol_requirement_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1170);
    empty_requirement_declarator();
    setState(1171);
    match(AtemParser::KeywordInit);
    setState(1175);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordDefault) {
      setState(1172);
      requirement_default_clause();
      setState(1173);
      initializer_declaration();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protocol_requirement_deinitializerContext ------------------------------------------------------------------

AtemParser::Protocol_requirement_deinitializerContext::Protocol_requirement_deinitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Empty_requirement_declaratorContext* AtemParser::Protocol_requirement_deinitializerContext::empty_requirement_declarator() {
  return getRuleContext<AtemParser::Empty_requirement_declaratorContext>(0);
}

tree::TerminalNode* AtemParser::Protocol_requirement_deinitializerContext::KeywordDeinit() {
  return getToken(AtemParser::KeywordDeinit, 0);
}

AtemParser::Requirement_default_clauseContext* AtemParser::Protocol_requirement_deinitializerContext::requirement_default_clause() {
  return getRuleContext<AtemParser::Requirement_default_clauseContext>(0);
}

AtemParser::Deinitializer_declarationContext* AtemParser::Protocol_requirement_deinitializerContext::deinitializer_declaration() {
  return getRuleContext<AtemParser::Deinitializer_declarationContext>(0);
}


size_t AtemParser::Protocol_requirement_deinitializerContext::getRuleIndex() const {
  return AtemParser::RuleProtocol_requirement_deinitializer;
}

void AtemParser::Protocol_requirement_deinitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocol_requirement_deinitializer(this);
}

void AtemParser::Protocol_requirement_deinitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocol_requirement_deinitializer(this);
}

AtemParser::Protocol_requirement_deinitializerContext* AtemParser::protocol_requirement_deinitializer() {
  Protocol_requirement_deinitializerContext *_localctx = _tracker.createInstance<Protocol_requirement_deinitializerContext>(_ctx, getState());
  enterRule(_localctx, 202, AtemParser::RuleProtocol_requirement_deinitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1177);
    empty_requirement_declarator();
    setState(1178);
    match(AtemParser::KeywordDeinit);
    setState(1182);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordDefault) {
      setState(1179);
      requirement_default_clause();
      setState(1180);
      deinitializer_declaration();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requirement_declaratorContext ------------------------------------------------------------------

AtemParser::Requirement_declaratorContext::Requirement_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Requirement_declaratorContext::KeywordRequire() {
  return getToken(AtemParser::KeywordRequire, 0);
}

AtemParser::Requirement_nameContext* AtemParser::Requirement_declaratorContext::requirement_name() {
  return getRuleContext<AtemParser::Requirement_nameContext>(0);
}

AtemParser::Declare_operatorContext* AtemParser::Requirement_declaratorContext::declare_operator() {
  return getRuleContext<AtemParser::Declare_operatorContext>(0);
}

tree::TerminalNode* AtemParser::Requirement_declaratorContext::Question() {
  return getToken(AtemParser::Question, 0);
}

AtemParser::Access_level_specifierContext* AtemParser::Requirement_declaratorContext::access_level_specifier() {
  return getRuleContext<AtemParser::Access_level_specifierContext>(0);
}

AtemParser::Storage_level_specifierContext* AtemParser::Requirement_declaratorContext::storage_level_specifier() {
  return getRuleContext<AtemParser::Storage_level_specifierContext>(0);
}

AtemParser::Member_specifiersContext* AtemParser::Requirement_declaratorContext::member_specifiers() {
  return getRuleContext<AtemParser::Member_specifiersContext>(0);
}


size_t AtemParser::Requirement_declaratorContext::getRuleIndex() const {
  return AtemParser::RuleRequirement_declarator;
}

void AtemParser::Requirement_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequirement_declarator(this);
}

void AtemParser::Requirement_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequirement_declarator(this);
}

AtemParser::Requirement_declaratorContext* AtemParser::requirement_declarator() {
  Requirement_declaratorContext *_localctx = _tracker.createInstance<Requirement_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 204, AtemParser::RuleRequirement_declarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1184);
    match(AtemParser::KeywordRequire);
    setState(1186);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Question) {
      setState(1185);
      match(AtemParser::Question);
    }
    setState(1189);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & 158604569083905) != 0)) {
      setState(1188);
      access_level_specifier();
    }
    setState(1192);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      setState(1191);
      storage_level_specifier();
      break;
    }

    default:
      break;
    }
    setState(1195);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0)) {
      setState(1194);
      member_specifiers();
    }
    setState(1197);
    requirement_name();
    setState(1198);
    declare_operator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Empty_requirement_declaratorContext ------------------------------------------------------------------

AtemParser::Empty_requirement_declaratorContext::Empty_requirement_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Empty_requirement_declaratorContext::KeywordRequire() {
  return getToken(AtemParser::KeywordRequire, 0);
}

AtemParser::Empty_declare_operatorContext* AtemParser::Empty_requirement_declaratorContext::empty_declare_operator() {
  return getRuleContext<AtemParser::Empty_declare_operatorContext>(0);
}

tree::TerminalNode* AtemParser::Empty_requirement_declaratorContext::Question() {
  return getToken(AtemParser::Question, 0);
}

AtemParser::Access_level_specifierContext* AtemParser::Empty_requirement_declaratorContext::access_level_specifier() {
  return getRuleContext<AtemParser::Access_level_specifierContext>(0);
}

AtemParser::Storage_level_specifierContext* AtemParser::Empty_requirement_declaratorContext::storage_level_specifier() {
  return getRuleContext<AtemParser::Storage_level_specifierContext>(0);
}

AtemParser::Member_specifiersContext* AtemParser::Empty_requirement_declaratorContext::member_specifiers() {
  return getRuleContext<AtemParser::Member_specifiersContext>(0);
}


size_t AtemParser::Empty_requirement_declaratorContext::getRuleIndex() const {
  return AtemParser::RuleEmpty_requirement_declarator;
}

void AtemParser::Empty_requirement_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmpty_requirement_declarator(this);
}

void AtemParser::Empty_requirement_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmpty_requirement_declarator(this);
}

AtemParser::Empty_requirement_declaratorContext* AtemParser::empty_requirement_declarator() {
  Empty_requirement_declaratorContext *_localctx = _tracker.createInstance<Empty_requirement_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 206, AtemParser::RuleEmpty_requirement_declarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1200);
    match(AtemParser::KeywordRequire);
    setState(1202);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Question) {
      setState(1201);
      match(AtemParser::Question);
    }
    setState(1205);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & 158604569083905) != 0)) {
      setState(1204);
      access_level_specifier();
    }
    setState(1208);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
    case 1: {
      setState(1207);
      storage_level_specifier();
      break;
    }

    default:
      break;
    }
    setState(1211);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 72057595111669761) != 0)) {
      setState(1210);
      member_specifiers();
    }
    setState(1213);
    empty_declare_operator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requirement_nameContext ------------------------------------------------------------------

AtemParser::Requirement_nameContext::Requirement_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Requirement_nameContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}


size_t AtemParser::Requirement_nameContext::getRuleIndex() const {
  return AtemParser::RuleRequirement_name;
}

void AtemParser::Requirement_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequirement_name(this);
}

void AtemParser::Requirement_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequirement_name(this);
}

AtemParser::Requirement_nameContext* AtemParser::requirement_name() {
  Requirement_nameContext *_localctx = _tracker.createInstance<Requirement_nameContext>(_ctx, getState());
  enterRule(_localctx, 208, AtemParser::RuleRequirement_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1215);
    match(AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requirement_default_clauseContext ------------------------------------------------------------------

AtemParser::Requirement_default_clauseContext::Requirement_default_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Requirement_default_clauseContext::KeywordDefault() {
  return getToken(AtemParser::KeywordDefault, 0);
}

tree::TerminalNode* AtemParser::Requirement_default_clauseContext::Assign() {
  return getToken(AtemParser::Assign, 0);
}


size_t AtemParser::Requirement_default_clauseContext::getRuleIndex() const {
  return AtemParser::RuleRequirement_default_clause;
}

void AtemParser::Requirement_default_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequirement_default_clause(this);
}

void AtemParser::Requirement_default_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequirement_default_clause(this);
}

AtemParser::Requirement_default_clauseContext* AtemParser::requirement_default_clause() {
  Requirement_default_clauseContext *_localctx = _tracker.createInstance<Requirement_default_clauseContext>(_ctx, getState());
  enterRule(_localctx, 210, AtemParser::RuleRequirement_default_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1217);
    match(AtemParser::KeywordDefault);
    setState(1218);
    match(AtemParser::Assign);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requirement_getter_and_setterContext ------------------------------------------------------------------

AtemParser::Requirement_getter_and_setterContext::Requirement_getter_and_setterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Requirement_getter_and_setterContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

std::vector<AtemParser::Requirement_getter_and_setter_itemContext *> AtemParser::Requirement_getter_and_setterContext::requirement_getter_and_setter_item() {
  return getRuleContexts<AtemParser::Requirement_getter_and_setter_itemContext>();
}

AtemParser::Requirement_getter_and_setter_itemContext* AtemParser::Requirement_getter_and_setterContext::requirement_getter_and_setter_item(size_t i) {
  return getRuleContext<AtemParser::Requirement_getter_and_setter_itemContext>(i);
}

std::vector<tree::TerminalNode *> AtemParser::Requirement_getter_and_setterContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Requirement_getter_and_setterContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}

tree::TerminalNode* AtemParser::Requirement_getter_and_setterContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}


size_t AtemParser::Requirement_getter_and_setterContext::getRuleIndex() const {
  return AtemParser::RuleRequirement_getter_and_setter;
}

void AtemParser::Requirement_getter_and_setterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequirement_getter_and_setter(this);
}

void AtemParser::Requirement_getter_and_setterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequirement_getter_and_setter(this);
}

AtemParser::Requirement_getter_and_setterContext* AtemParser::requirement_getter_and_setter() {
  Requirement_getter_and_setterContext *_localctx = _tracker.createInstance<Requirement_getter_and_setterContext>(_ctx, getState());
  enterRule(_localctx, 212, AtemParser::RuleRequirement_getter_and_setter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1220);
    match(AtemParser::LeftCurly);
    setState(1221);
    requirement_getter_and_setter_item();
    setState(1224); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1222);
              match(AtemParser::Comma);
              setState(1223);
              requirement_getter_and_setter_item();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1226); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1228);
    match(AtemParser::Comma);
    setState(1229);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requirement_getterContext ------------------------------------------------------------------

AtemParser::Requirement_getterContext::Requirement_getterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Requirement_getterContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

tree::TerminalNode* AtemParser::Requirement_getterContext::KeywordGet() {
  return getToken(AtemParser::KeywordGet, 0);
}

tree::TerminalNode* AtemParser::Requirement_getterContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}


size_t AtemParser::Requirement_getterContext::getRuleIndex() const {
  return AtemParser::RuleRequirement_getter;
}

void AtemParser::Requirement_getterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequirement_getter(this);
}

void AtemParser::Requirement_getterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequirement_getter(this);
}

AtemParser::Requirement_getterContext* AtemParser::requirement_getter() {
  Requirement_getterContext *_localctx = _tracker.createInstance<Requirement_getterContext>(_ctx, getState());
  enterRule(_localctx, 214, AtemParser::RuleRequirement_getter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1231);
    match(AtemParser::LeftCurly);
    setState(1232);
    match(AtemParser::KeywordGet);
    setState(1233);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requirement_getter_and_setter_itemContext ------------------------------------------------------------------

AtemParser::Requirement_getter_and_setter_itemContext::Requirement_getter_and_setter_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Requirement_getter_and_setter_itemContext::KeywordGet() {
  return getToken(AtemParser::KeywordGet, 0);
}

tree::TerminalNode* AtemParser::Requirement_getter_and_setter_itemContext::KeywordSet() {
  return getToken(AtemParser::KeywordSet, 0);
}


size_t AtemParser::Requirement_getter_and_setter_itemContext::getRuleIndex() const {
  return AtemParser::RuleRequirement_getter_and_setter_item;
}

void AtemParser::Requirement_getter_and_setter_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequirement_getter_and_setter_item(this);
}

void AtemParser::Requirement_getter_and_setter_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequirement_getter_and_setter_item(this);
}

AtemParser::Requirement_getter_and_setter_itemContext* AtemParser::requirement_getter_and_setter_item() {
  Requirement_getter_and_setter_itemContext *_localctx = _tracker.createInstance<Requirement_getter_and_setter_itemContext>(_ctx, getState());
  enterRule(_localctx, 216, AtemParser::RuleRequirement_getter_and_setter_item);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1235);
    _la = _input->LA(1);
    if (!(_la == AtemParser::KeywordGet

    || _la == AtemParser::KeywordSet)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Initializer_declarationContext ------------------------------------------------------------------

AtemParser::Initializer_declarationContext::Initializer_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Initializer_declarationContext::KeywordInit() {
  return getToken(AtemParser::KeywordInit, 0);
}

AtemParser::Initializer_typeContext* AtemParser::Initializer_declarationContext::initializer_type() {
  return getRuleContext<AtemParser::Initializer_typeContext>(0);
}

AtemParser::Code_blockContext* AtemParser::Initializer_declarationContext::code_block() {
  return getRuleContext<AtemParser::Code_blockContext>(0);
}


size_t AtemParser::Initializer_declarationContext::getRuleIndex() const {
  return AtemParser::RuleInitializer_declaration;
}

void AtemParser::Initializer_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializer_declaration(this);
}

void AtemParser::Initializer_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializer_declaration(this);
}

AtemParser::Initializer_declarationContext* AtemParser::initializer_declaration() {
  Initializer_declarationContext *_localctx = _tracker.createInstance<Initializer_declarationContext>(_ctx, getState());
  enterRule(_localctx, 218, AtemParser::RuleInitializer_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1237);
    match(AtemParser::KeywordInit);
    setState(1238);
    initializer_type();
    setState(1239);
    code_block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Deinitializer_declarationContext ------------------------------------------------------------------

AtemParser::Deinitializer_declarationContext::Deinitializer_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Deinitializer_declarationContext::KeywordDeinit() {
  return getToken(AtemParser::KeywordDeinit, 0);
}

AtemParser::Deinitializer_typeContext* AtemParser::Deinitializer_declarationContext::deinitializer_type() {
  return getRuleContext<AtemParser::Deinitializer_typeContext>(0);
}

AtemParser::Code_blockContext* AtemParser::Deinitializer_declarationContext::code_block() {
  return getRuleContext<AtemParser::Code_blockContext>(0);
}


size_t AtemParser::Deinitializer_declarationContext::getRuleIndex() const {
  return AtemParser::RuleDeinitializer_declaration;
}

void AtemParser::Deinitializer_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeinitializer_declaration(this);
}

void AtemParser::Deinitializer_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeinitializer_declaration(this);
}

AtemParser::Deinitializer_declarationContext* AtemParser::deinitializer_declaration() {
  Deinitializer_declarationContext *_localctx = _tracker.createInstance<Deinitializer_declarationContext>(_ctx, getState());
  enterRule(_localctx, 220, AtemParser::RuleDeinitializer_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1241);
    match(AtemParser::KeywordDeinit);
    setState(1242);
    deinitializer_type();
    setState(1243);
    code_block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Union_declarationContext ------------------------------------------------------------------

AtemParser::Union_declarationContext::Union_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Union_declarationContext::KeywordUnion() {
  return getToken(AtemParser::KeywordUnion, 0);
}

AtemParser::AttributesContext* AtemParser::Union_declarationContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}

AtemParser::Final_specifierContext* AtemParser::Union_declarationContext::final_specifier() {
  return getRuleContext<AtemParser::Final_specifierContext>(0);
}


size_t AtemParser::Union_declarationContext::getRuleIndex() const {
  return AtemParser::RuleUnion_declaration;
}

void AtemParser::Union_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnion_declaration(this);
}

void AtemParser::Union_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnion_declaration(this);
}

AtemParser::Union_declarationContext* AtemParser::union_declaration() {
  Union_declarationContext *_localctx = _tracker.createInstance<Union_declarationContext>(_ctx, getState());
  enterRule(_localctx, 222, AtemParser::RuleUnion_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1245);
    match(AtemParser::KeywordUnion);
    setState(1247);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      setState(1246);
      attributes();
      break;
    }

    default:
      break;
    }
    setState(1250);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
    case 1: {
      setState(1249);
      final_specifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enum_declarationContext ------------------------------------------------------------------

AtemParser::Enum_declarationContext::Enum_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Enum_declarationContext::KeywordEnum() {
  return getToken(AtemParser::KeywordEnum, 0);
}

AtemParser::Enumerator_listContext* AtemParser::Enum_declarationContext::enumerator_list() {
  return getRuleContext<AtemParser::Enumerator_listContext>(0);
}

AtemParser::Udt_parameter_clauseContext* AtemParser::Enum_declarationContext::udt_parameter_clause() {
  return getRuleContext<AtemParser::Udt_parameter_clauseContext>(0);
}

AtemParser::AttributesContext* AtemParser::Enum_declarationContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}

AtemParser::Final_specifierContext* AtemParser::Enum_declarationContext::final_specifier() {
  return getRuleContext<AtemParser::Final_specifierContext>(0);
}

AtemParser::Extension_listContext* AtemParser::Enum_declarationContext::extension_list() {
  return getRuleContext<AtemParser::Extension_listContext>(0);
}

AtemParser::Initializer_listContext* AtemParser::Enum_declarationContext::initializer_list() {
  return getRuleContext<AtemParser::Initializer_listContext>(0);
}

AtemParser::Deinitializer_listContext* AtemParser::Enum_declarationContext::deinitializer_list() {
  return getRuleContext<AtemParser::Deinitializer_listContext>(0);
}

AtemParser::Member_listContext* AtemParser::Enum_declarationContext::member_list() {
  return getRuleContext<AtemParser::Member_listContext>(0);
}


size_t AtemParser::Enum_declarationContext::getRuleIndex() const {
  return AtemParser::RuleEnum_declaration;
}

void AtemParser::Enum_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnum_declaration(this);
}

void AtemParser::Enum_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnum_declaration(this);
}

AtemParser::Enum_declarationContext* AtemParser::enum_declaration() {
  Enum_declarationContext *_localctx = _tracker.createInstance<Enum_declarationContext>(_ctx, getState());
  enterRule(_localctx, 224, AtemParser::RuleEnum_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1252);
    match(AtemParser::KeywordEnum);
    setState(1254);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::LeftParenthese) {
      setState(1253);
      udt_parameter_clause();
    }
    setState(1257);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(1256);
      attributes();
    }
    setState(1260);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordFinal) {
      setState(1259);
      final_specifier();
    }
    setState(1263);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordExtend) {
      setState(1262);
      extension_list();
    }
    setState(1266);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordInit) {
      setState(1265);
      initializer_list();
    }
    setState(1269);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordDeinit) {
      setState(1268);
      deinitializer_list();
    }
    setState(1272);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordMember) {
      setState(1271);
      member_list();
    }
    setState(1274);
    enumerator_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumerator_listContext ------------------------------------------------------------------

AtemParser::Enumerator_listContext::Enumerator_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Enumerator_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

std::vector<AtemParser::Enumeration_itemContext *> AtemParser::Enumerator_listContext::enumeration_item() {
  return getRuleContexts<AtemParser::Enumeration_itemContext>();
}

AtemParser::Enumeration_itemContext* AtemParser::Enumerator_listContext::enumeration_item(size_t i) {
  return getRuleContext<AtemParser::Enumeration_itemContext>(i);
}

tree::TerminalNode* AtemParser::Enumerator_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}

std::vector<tree::TerminalNode *> AtemParser::Enumerator_listContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Enumerator_listContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}


size_t AtemParser::Enumerator_listContext::getRuleIndex() const {
  return AtemParser::RuleEnumerator_list;
}

void AtemParser::Enumerator_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerator_list(this);
}

void AtemParser::Enumerator_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerator_list(this);
}

AtemParser::Enumerator_listContext* AtemParser::enumerator_list() {
  Enumerator_listContext *_localctx = _tracker.createInstance<Enumerator_listContext>(_ctx, getState());
  enterRule(_localctx, 226, AtemParser::RuleEnumerator_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1276);
    match(AtemParser::LeftCurly);
    setState(1277);
    enumeration_item();
    setState(1280); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1278);
              match(AtemParser::Comma);
              setState(1279);
              enumeration_item();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1282); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1285);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Comma) {
      setState(1284);
      match(AtemParser::Comma);
    }
    setState(1287);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumeration_itemContext ------------------------------------------------------------------

AtemParser::Enumeration_itemContext::Enumeration_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::EnumeratorContext* AtemParser::Enumeration_itemContext::enumerator() {
  return getRuleContext<AtemParser::EnumeratorContext>(0);
}

AtemParser::Member_variableContext* AtemParser::Enumeration_itemContext::member_variable() {
  return getRuleContext<AtemParser::Member_variableContext>(0);
}

AtemParser::Member_constantContext* AtemParser::Enumeration_itemContext::member_constant() {
  return getRuleContext<AtemParser::Member_constantContext>(0);
}

AtemParser::Member_functionContext* AtemParser::Enumeration_itemContext::member_function() {
  return getRuleContext<AtemParser::Member_functionContext>(0);
}

AtemParser::Member_nested_typeContext* AtemParser::Enumeration_itemContext::member_nested_type() {
  return getRuleContext<AtemParser::Member_nested_typeContext>(0);
}


size_t AtemParser::Enumeration_itemContext::getRuleIndex() const {
  return AtemParser::RuleEnumeration_item;
}

void AtemParser::Enumeration_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration_item(this);
}

void AtemParser::Enumeration_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration_item(this);
}

AtemParser::Enumeration_itemContext* AtemParser::enumeration_item() {
  Enumeration_itemContext *_localctx = _tracker.createInstance<Enumeration_itemContext>(_ctx, getState());
  enterRule(_localctx, 228, AtemParser::RuleEnumeration_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1294);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1289);
      enumerator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1290);
      member_variable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1291);
      member_constant();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1292);
      member_function();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1293);
      member_nested_type();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorContext ------------------------------------------------------------------

AtemParser::EnumeratorContext::EnumeratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Enumerator_nameContext* AtemParser::EnumeratorContext::enumerator_name() {
  return getRuleContext<AtemParser::Enumerator_nameContext>(0);
}

AtemParser::Enumerator_associated_value_clauseContext* AtemParser::EnumeratorContext::enumerator_associated_value_clause() {
  return getRuleContext<AtemParser::Enumerator_associated_value_clauseContext>(0);
}

AtemParser::Enumerator_representationContext* AtemParser::EnumeratorContext::enumerator_representation() {
  return getRuleContext<AtemParser::Enumerator_representationContext>(0);
}


size_t AtemParser::EnumeratorContext::getRuleIndex() const {
  return AtemParser::RuleEnumerator;
}

void AtemParser::EnumeratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerator(this);
}

void AtemParser::EnumeratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerator(this);
}

AtemParser::EnumeratorContext* AtemParser::enumerator() {
  EnumeratorContext *_localctx = _tracker.createInstance<EnumeratorContext>(_ctx, getState());
  enterRule(_localctx, 230, AtemParser::RuleEnumerator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1296);
    enumerator_name();
    setState(1298);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Colon) {
      setState(1297);
      enumerator_associated_value_clause();
    }
    setState(1301);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Assign) {
      setState(1300);
      enumerator_representation();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumerator_associated_value_clauseContext ------------------------------------------------------------------

AtemParser::Enumerator_associated_value_clauseContext::Enumerator_associated_value_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Enumerator_associated_value_clauseContext::Colon() {
  return getToken(AtemParser::Colon, 0);
}

tree::TerminalNode* AtemParser::Enumerator_associated_value_clauseContext::LeftParenthese() {
  return getToken(AtemParser::LeftParenthese, 0);
}

tree::TerminalNode* AtemParser::Enumerator_associated_value_clauseContext::RightParenthese() {
  return getToken(AtemParser::RightParenthese, 0);
}

AtemParser::Enumerator_associated_value_listContext* AtemParser::Enumerator_associated_value_clauseContext::enumerator_associated_value_list() {
  return getRuleContext<AtemParser::Enumerator_associated_value_listContext>(0);
}


size_t AtemParser::Enumerator_associated_value_clauseContext::getRuleIndex() const {
  return AtemParser::RuleEnumerator_associated_value_clause;
}

void AtemParser::Enumerator_associated_value_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerator_associated_value_clause(this);
}

void AtemParser::Enumerator_associated_value_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerator_associated_value_clause(this);
}

AtemParser::Enumerator_associated_value_clauseContext* AtemParser::enumerator_associated_value_clause() {
  Enumerator_associated_value_clauseContext *_localctx = _tracker.createInstance<Enumerator_associated_value_clauseContext>(_ctx, getState());
  enterRule(_localctx, 232, AtemParser::RuleEnumerator_associated_value_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1303);
    match(AtemParser::Colon);
    setState(1304);
    match(AtemParser::LeftParenthese);
    setState(1306);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Identifier

    || _la == AtemParser::At) {
      setState(1305);
      enumerator_associated_value_list();
    }
    setState(1308);
    match(AtemParser::RightParenthese);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumerator_associated_value_listContext ------------------------------------------------------------------

AtemParser::Enumerator_associated_value_listContext::Enumerator_associated_value_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Enumerator_associated_valueContext *> AtemParser::Enumerator_associated_value_listContext::enumerator_associated_value() {
  return getRuleContexts<AtemParser::Enumerator_associated_valueContext>();
}

AtemParser::Enumerator_associated_valueContext* AtemParser::Enumerator_associated_value_listContext::enumerator_associated_value(size_t i) {
  return getRuleContext<AtemParser::Enumerator_associated_valueContext>(i);
}

std::vector<tree::TerminalNode *> AtemParser::Enumerator_associated_value_listContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Enumerator_associated_value_listContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}


size_t AtemParser::Enumerator_associated_value_listContext::getRuleIndex() const {
  return AtemParser::RuleEnumerator_associated_value_list;
}

void AtemParser::Enumerator_associated_value_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerator_associated_value_list(this);
}

void AtemParser::Enumerator_associated_value_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerator_associated_value_list(this);
}

AtemParser::Enumerator_associated_value_listContext* AtemParser::enumerator_associated_value_list() {
  Enumerator_associated_value_listContext *_localctx = _tracker.createInstance<Enumerator_associated_value_listContext>(_ctx, getState());
  enterRule(_localctx, 234, AtemParser::RuleEnumerator_associated_value_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1310);
    enumerator_associated_value();
    setState(1315);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AtemParser::Comma) {
      setState(1311);
      match(AtemParser::Comma);
      setState(1312);
      enumerator_associated_value();
      setState(1317);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumerator_associated_valueContext ------------------------------------------------------------------

AtemParser::Enumerator_associated_valueContext::Enumerator_associated_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Enumerator_associated_value_nameContext* AtemParser::Enumerator_associated_valueContext::enumerator_associated_value_name() {
  return getRuleContext<AtemParser::Enumerator_associated_value_nameContext>(0);
}

AtemParser::AttributesContext* AtemParser::Enumerator_associated_valueContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}

tree::TerminalNode* AtemParser::Enumerator_associated_valueContext::Colon() {
  return getToken(AtemParser::Colon, 0);
}

AtemParser::Type_annotationContext* AtemParser::Enumerator_associated_valueContext::type_annotation() {
  return getRuleContext<AtemParser::Type_annotationContext>(0);
}

AtemParser::Default_argument_clauseContext* AtemParser::Enumerator_associated_valueContext::default_argument_clause() {
  return getRuleContext<AtemParser::Default_argument_clauseContext>(0);
}


size_t AtemParser::Enumerator_associated_valueContext::getRuleIndex() const {
  return AtemParser::RuleEnumerator_associated_value;
}

void AtemParser::Enumerator_associated_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerator_associated_value(this);
}

void AtemParser::Enumerator_associated_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerator_associated_value(this);
}

AtemParser::Enumerator_associated_valueContext* AtemParser::enumerator_associated_value() {
  Enumerator_associated_valueContext *_localctx = _tracker.createInstance<Enumerator_associated_valueContext>(_ctx, getState());
  enterRule(_localctx, 236, AtemParser::RuleEnumerator_associated_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1319);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(1318);
      attributes();
    }
    setState(1321);
    enumerator_associated_value_name();
    setState(1324);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Colon) {
      setState(1322);
      match(AtemParser::Colon);
      setState(1323);
      type_annotation();
    }
    setState(1327);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Assign) {
      setState(1326);
      default_argument_clause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumerator_associated_value_nameContext ------------------------------------------------------------------

AtemParser::Enumerator_associated_value_nameContext::Enumerator_associated_value_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Enumerator_associated_value_nameContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}


size_t AtemParser::Enumerator_associated_value_nameContext::getRuleIndex() const {
  return AtemParser::RuleEnumerator_associated_value_name;
}

void AtemParser::Enumerator_associated_value_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerator_associated_value_name(this);
}

void AtemParser::Enumerator_associated_value_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerator_associated_value_name(this);
}

AtemParser::Enumerator_associated_value_nameContext* AtemParser::enumerator_associated_value_name() {
  Enumerator_associated_value_nameContext *_localctx = _tracker.createInstance<Enumerator_associated_value_nameContext>(_ctx, getState());
  enterRule(_localctx, 238, AtemParser::RuleEnumerator_associated_value_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1329);
    match(AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumerator_representationContext ------------------------------------------------------------------

AtemParser::Enumerator_representationContext::Enumerator_representationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Enumerator_representationContext::Assign() {
  return getToken(AtemParser::Assign, 0);
}

AtemParser::ExpressionContext* AtemParser::Enumerator_representationContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}


size_t AtemParser::Enumerator_representationContext::getRuleIndex() const {
  return AtemParser::RuleEnumerator_representation;
}

void AtemParser::Enumerator_representationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerator_representation(this);
}

void AtemParser::Enumerator_representationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerator_representation(this);
}

AtemParser::Enumerator_representationContext* AtemParser::enumerator_representation() {
  Enumerator_representationContext *_localctx = _tracker.createInstance<Enumerator_representationContext>(_ctx, getState());
  enterRule(_localctx, 240, AtemParser::RuleEnumerator_representation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1331);
    match(AtemParser::Assign);
    setState(1332);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumerator_nameContext ------------------------------------------------------------------

AtemParser::Enumerator_nameContext::Enumerator_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Enumerator_nameContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}


size_t AtemParser::Enumerator_nameContext::getRuleIndex() const {
  return AtemParser::RuleEnumerator_name;
}

void AtemParser::Enumerator_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerator_name(this);
}

void AtemParser::Enumerator_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerator_name(this);
}

AtemParser::Enumerator_nameContext* AtemParser::enumerator_name() {
  Enumerator_nameContext *_localctx = _tracker.createInstance<Enumerator_nameContext>(_ctx, getState());
  enterRule(_localctx, 242, AtemParser::RuleEnumerator_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1334);
    match(AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_alias_declarationContext ------------------------------------------------------------------

AtemParser::Import_alias_declarationContext::Import_alias_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Import_expressionContext* AtemParser::Import_alias_declarationContext::import_expression() {
  return getRuleContext<AtemParser::Import_expressionContext>(0);
}


size_t AtemParser::Import_alias_declarationContext::getRuleIndex() const {
  return AtemParser::RuleImport_alias_declaration;
}

void AtemParser::Import_alias_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_alias_declaration(this);
}

void AtemParser::Import_alias_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_alias_declaration(this);
}

AtemParser::Import_alias_declarationContext* AtemParser::import_alias_declaration() {
  Import_alias_declarationContext *_localctx = _tracker.createInstance<Import_alias_declarationContext>(_ctx, getState());
  enterRule(_localctx, 244, AtemParser::RuleImport_alias_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1336);
    import_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_expressionContext ------------------------------------------------------------------

AtemParser::Import_expressionContext::Import_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Import_expressionContext::KeywordImport() {
  return getToken(AtemParser::KeywordImport, 0);
}

AtemParser::Import_path_expression_listContext* AtemParser::Import_expressionContext::import_path_expression_list() {
  return getRuleContext<AtemParser::Import_path_expression_listContext>(0);
}

AtemParser::Import_kindContext* AtemParser::Import_expressionContext::import_kind() {
  return getRuleContext<AtemParser::Import_kindContext>(0);
}

AtemParser::AttributesContext* AtemParser::Import_expressionContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}


size_t AtemParser::Import_expressionContext::getRuleIndex() const {
  return AtemParser::RuleImport_expression;
}

void AtemParser::Import_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_expression(this);
}

void AtemParser::Import_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_expression(this);
}

AtemParser::Import_expressionContext* AtemParser::import_expression() {
  Import_expressionContext *_localctx = _tracker.createInstance<Import_expressionContext>(_ctx, getState());
  enterRule(_localctx, 246, AtemParser::RuleImport_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1338);
    match(AtemParser::KeywordImport);
    setState(1340);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4503668414480388) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 70369012645889) != 0)) {
      setState(1339);
      import_kind();
    }
    setState(1343);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(1342);
      attributes();
    }
    setState(1345);
    import_path_expression_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_statementContext ------------------------------------------------------------------

AtemParser::Import_statementContext::Import_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Import_statementContext::KeywordImport() {
  return getToken(AtemParser::KeywordImport, 0);
}

AtemParser::Import_path_expression_listContext* AtemParser::Import_statementContext::import_path_expression_list() {
  return getRuleContext<AtemParser::Import_path_expression_listContext>(0);
}

AtemParser::Import_kindContext* AtemParser::Import_statementContext::import_kind() {
  return getRuleContext<AtemParser::Import_kindContext>(0);
}

AtemParser::AttributesContext* AtemParser::Import_statementContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}


size_t AtemParser::Import_statementContext::getRuleIndex() const {
  return AtemParser::RuleImport_statement;
}

void AtemParser::Import_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_statement(this);
}

void AtemParser::Import_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_statement(this);
}

AtemParser::Import_statementContext* AtemParser::import_statement() {
  Import_statementContext *_localctx = _tracker.createInstance<Import_statementContext>(_ctx, getState());
  enterRule(_localctx, 248, AtemParser::RuleImport_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1347);
    match(AtemParser::KeywordImport);
    setState(1349);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4503668414480388) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 70369012645889) != 0)) {
      setState(1348);
      import_kind();
    }
    setState(1352);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(1351);
      attributes();
    }
    setState(1354);
    import_path_expression_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_path_expression_listContext ------------------------------------------------------------------

AtemParser::Import_path_expression_listContext::Import_path_expression_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Import_path_expressionContext *> AtemParser::Import_path_expression_listContext::import_path_expression() {
  return getRuleContexts<AtemParser::Import_path_expressionContext>();
}

AtemParser::Import_path_expressionContext* AtemParser::Import_path_expression_listContext::import_path_expression(size_t i) {
  return getRuleContext<AtemParser::Import_path_expressionContext>(i);
}

tree::TerminalNode* AtemParser::Import_path_expression_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

tree::TerminalNode* AtemParser::Import_path_expression_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}


size_t AtemParser::Import_path_expression_listContext::getRuleIndex() const {
  return AtemParser::RuleImport_path_expression_list;
}

void AtemParser::Import_path_expression_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_path_expression_list(this);
}

void AtemParser::Import_path_expression_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_path_expression_list(this);
}

AtemParser::Import_path_expression_listContext* AtemParser::import_path_expression_list() {
  Import_path_expression_listContext *_localctx = _tracker.createInstance<Import_path_expression_listContext>(_ctx, getState());
  enterRule(_localctx, 250, AtemParser::RuleImport_path_expression_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1365);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1356);
      import_path_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1357);
      match(AtemParser::LeftCurly);
      setState(1359); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1358);
        import_path_expression();
        setState(1361); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == AtemParser::Identifier

      || _la == AtemParser::LeftCurly);
      setState(1363);
      match(AtemParser::RightCurly);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_path_expressionContext ------------------------------------------------------------------

AtemParser::Import_path_expressionContext::Import_path_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Import_path_expression_elementContext *> AtemParser::Import_path_expressionContext::import_path_expression_element() {
  return getRuleContexts<AtemParser::Import_path_expression_elementContext>();
}

AtemParser::Import_path_expression_elementContext* AtemParser::Import_path_expressionContext::import_path_expression_element(size_t i) {
  return getRuleContext<AtemParser::Import_path_expression_elementContext>(i);
}

std::vector<tree::TerminalNode *> AtemParser::Import_path_expressionContext::Dot() {
  return getTokens(AtemParser::Dot);
}

tree::TerminalNode* AtemParser::Import_path_expressionContext::Dot(size_t i) {
  return getToken(AtemParser::Dot, i);
}

tree::TerminalNode* AtemParser::Import_path_expressionContext::Mul() {
  return getToken(AtemParser::Mul, 0);
}


size_t AtemParser::Import_path_expressionContext::getRuleIndex() const {
  return AtemParser::RuleImport_path_expression;
}

void AtemParser::Import_path_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_path_expression(this);
}

void AtemParser::Import_path_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_path_expression(this);
}

AtemParser::Import_path_expressionContext* AtemParser::import_path_expression() {
  Import_path_expressionContext *_localctx = _tracker.createInstance<Import_path_expressionContext>(_ctx, getState());
  enterRule(_localctx, 252, AtemParser::RuleImport_path_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1367);
    import_path_expression_element();
    setState(1370); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1368);
              match(AtemParser::Dot);
              setState(1369);
              import_path_expression_element();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1372); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1376);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
    case 1: {
      setState(1374);
      match(AtemParser::Dot);
      setState(1375);
      match(AtemParser::Mul);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_path_expression_elementContext ------------------------------------------------------------------

AtemParser::Import_path_expression_elementContext::Import_path_expression_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Import_path_expression_elementContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}

AtemParser::Import_element_listContext* AtemParser::Import_path_expression_elementContext::import_element_list() {
  return getRuleContext<AtemParser::Import_element_listContext>(0);
}


size_t AtemParser::Import_path_expression_elementContext::getRuleIndex() const {
  return AtemParser::RuleImport_path_expression_element;
}

void AtemParser::Import_path_expression_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_path_expression_element(this);
}

void AtemParser::Import_path_expression_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_path_expression_element(this);
}

AtemParser::Import_path_expression_elementContext* AtemParser::import_path_expression_element() {
  Import_path_expression_elementContext *_localctx = _tracker.createInstance<Import_path_expression_elementContext>(_ctx, getState());
  enterRule(_localctx, 254, AtemParser::RuleImport_path_expression_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1380);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1378);
        match(AtemParser::Identifier);
        break;
      }

      case AtemParser::LeftCurly: {
        enterOuterAlt(_localctx, 2);
        setState(1379);
        import_element_list();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_element_listContext ------------------------------------------------------------------

AtemParser::Import_element_listContext::Import_element_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Import_element_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

std::vector<AtemParser::Import_path_expression_elementContext *> AtemParser::Import_element_listContext::import_path_expression_element() {
  return getRuleContexts<AtemParser::Import_path_expression_elementContext>();
}

AtemParser::Import_path_expression_elementContext* AtemParser::Import_element_listContext::import_path_expression_element(size_t i) {
  return getRuleContext<AtemParser::Import_path_expression_elementContext>(i);
}

tree::TerminalNode* AtemParser::Import_element_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}

std::vector<tree::TerminalNode *> AtemParser::Import_element_listContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Import_element_listContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}


size_t AtemParser::Import_element_listContext::getRuleIndex() const {
  return AtemParser::RuleImport_element_list;
}

void AtemParser::Import_element_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_element_list(this);
}

void AtemParser::Import_element_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_element_list(this);
}

AtemParser::Import_element_listContext* AtemParser::import_element_list() {
  Import_element_listContext *_localctx = _tracker.createInstance<Import_element_listContext>(_ctx, getState());
  enterRule(_localctx, 256, AtemParser::RuleImport_element_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1382);
    match(AtemParser::LeftCurly);
    setState(1383);
    import_path_expression_element();
    setState(1386); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1384);
              match(AtemParser::Comma);
              setState(1385);
              import_path_expression_element();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1388); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1391);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Comma) {
      setState(1390);
      match(AtemParser::Comma);
    }
    setState(1393);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_kindContext ------------------------------------------------------------------

AtemParser::Import_kindContext::Import_kindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Import_kindContext::KeywordAlias() {
  return getToken(AtemParser::KeywordAlias, 0);
}

tree::TerminalNode* AtemParser::Import_kindContext::KeywordStruct() {
  return getToken(AtemParser::KeywordStruct, 0);
}

tree::TerminalNode* AtemParser::Import_kindContext::KeywordClass() {
  return getToken(AtemParser::KeywordClass, 0);
}

tree::TerminalNode* AtemParser::Import_kindContext::KeywordUnion() {
  return getToken(AtemParser::KeywordUnion, 0);
}

tree::TerminalNode* AtemParser::Import_kindContext::KeywordEnum() {
  return getToken(AtemParser::KeywordEnum, 0);
}

tree::TerminalNode* AtemParser::Import_kindContext::KeywordProtocol() {
  return getToken(AtemParser::KeywordProtocol, 0);
}

tree::TerminalNode* AtemParser::Import_kindContext::KeywordConst() {
  return getToken(AtemParser::KeywordConst, 0);
}

tree::TerminalNode* AtemParser::Import_kindContext::KeywordMutable() {
  return getToken(AtemParser::KeywordMutable, 0);
}

tree::TerminalNode* AtemParser::Import_kindContext::KeywordFunc() {
  return getToken(AtemParser::KeywordFunc, 0);
}


size_t AtemParser::Import_kindContext::getRuleIndex() const {
  return AtemParser::RuleImport_kind;
}

void AtemParser::Import_kindContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_kind(this);
}

void AtemParser::Import_kindContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_kind(this);
}

AtemParser::Import_kindContext* AtemParser::import_kind() {
  Import_kindContext *_localctx = _tracker.createInstance<Import_kindContext>(_ctx, getState());
  enterRule(_localctx, 258, AtemParser::RuleImport_kind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1395);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4503668414480388) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 70369012645889) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Project_declarationContext ------------------------------------------------------------------

AtemParser::Project_declarationContext::Project_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Project_declarationContext::KeywordProject() {
  return getToken(AtemParser::KeywordProject, 0);
}

AtemParser::Project_member_listContext* AtemParser::Project_declarationContext::project_member_list() {
  return getRuleContext<AtemParser::Project_member_listContext>(0);
}

AtemParser::AttributesContext* AtemParser::Project_declarationContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}


size_t AtemParser::Project_declarationContext::getRuleIndex() const {
  return AtemParser::RuleProject_declaration;
}

void AtemParser::Project_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProject_declaration(this);
}

void AtemParser::Project_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProject_declaration(this);
}

AtemParser::Project_declarationContext* AtemParser::project_declaration() {
  Project_declarationContext *_localctx = _tracker.createInstance<Project_declarationContext>(_ctx, getState());
  enterRule(_localctx, 260, AtemParser::RuleProject_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1397);
    match(AtemParser::KeywordProject);
    setState(1399);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(1398);
      attributes();
    }
    setState(1401);
    project_member_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Project_member_listContext ------------------------------------------------------------------

AtemParser::Project_member_listContext::Project_member_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Project_member_listContext::KeywordThis() {
  return getToken(AtemParser::KeywordThis, 0);
}

tree::TerminalNode* AtemParser::Project_member_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

AtemParser::Project_membersContext* AtemParser::Project_member_listContext::project_members() {
  return getRuleContext<AtemParser::Project_membersContext>(0);
}

tree::TerminalNode* AtemParser::Project_member_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}


size_t AtemParser::Project_member_listContext::getRuleIndex() const {
  return AtemParser::RuleProject_member_list;
}

void AtemParser::Project_member_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProject_member_list(this);
}

void AtemParser::Project_member_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProject_member_list(this);
}

AtemParser::Project_member_listContext* AtemParser::project_member_list() {
  Project_member_listContext *_localctx = _tracker.createInstance<Project_member_listContext>(_ctx, getState());
  enterRule(_localctx, 262, AtemParser::RuleProject_member_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1408);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordThis: {
        enterOuterAlt(_localctx, 1);
        setState(1403);
        match(AtemParser::KeywordThis);
        break;
      }

      case AtemParser::LeftCurly: {
        enterOuterAlt(_localctx, 2);
        setState(1404);
        match(AtemParser::LeftCurly);
        setState(1405);
        project_members();
        setState(1406);
        match(AtemParser::RightCurly);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Project_memberContext ------------------------------------------------------------------

AtemParser::Project_memberContext::Project_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Path_expressionContext* AtemParser::Project_memberContext::path_expression() {
  return getRuleContext<AtemParser::Path_expressionContext>(0);
}


size_t AtemParser::Project_memberContext::getRuleIndex() const {
  return AtemParser::RuleProject_member;
}

void AtemParser::Project_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProject_member(this);
}

void AtemParser::Project_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProject_member(this);
}

AtemParser::Project_memberContext* AtemParser::project_member() {
  Project_memberContext *_localctx = _tracker.createInstance<Project_memberContext>(_ctx, getState());
  enterRule(_localctx, 264, AtemParser::RuleProject_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1410);
    path_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Project_membersContext ------------------------------------------------------------------

AtemParser::Project_membersContext::Project_membersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Project_memberContext *> AtemParser::Project_membersContext::project_member() {
  return getRuleContexts<AtemParser::Project_memberContext>();
}

AtemParser::Project_memberContext* AtemParser::Project_membersContext::project_member(size_t i) {
  return getRuleContext<AtemParser::Project_memberContext>(i);
}


size_t AtemParser::Project_membersContext::getRuleIndex() const {
  return AtemParser::RuleProject_members;
}

void AtemParser::Project_membersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProject_members(this);
}

void AtemParser::Project_membersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProject_members(this);
}

AtemParser::Project_membersContext* AtemParser::project_members() {
  Project_membersContext *_localctx = _tracker.createInstance<Project_membersContext>(_ctx, getState());
  enterRule(_localctx, 266, AtemParser::RuleProject_members);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1413); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1412);
      project_member();
      setState(1415); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == AtemParser::KeywordGlobal || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 144115207419996161) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_declarationContext ------------------------------------------------------------------

AtemParser::Package_declarationContext::Package_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Package_declarationContext::KeywordPackage() {
  return getToken(AtemParser::KeywordPackage, 0);
}

AtemParser::Package_member_listContext* AtemParser::Package_declarationContext::package_member_list() {
  return getRuleContext<AtemParser::Package_member_listContext>(0);
}

AtemParser::AttributesContext* AtemParser::Package_declarationContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}


size_t AtemParser::Package_declarationContext::getRuleIndex() const {
  return AtemParser::RulePackage_declaration;
}

void AtemParser::Package_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_declaration(this);
}

void AtemParser::Package_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_declaration(this);
}

AtemParser::Package_declarationContext* AtemParser::package_declaration() {
  Package_declarationContext *_localctx = _tracker.createInstance<Package_declarationContext>(_ctx, getState());
  enterRule(_localctx, 268, AtemParser::RulePackage_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1417);
    match(AtemParser::KeywordPackage);
    setState(1419);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(1418);
      attributes();
    }
    setState(1421);
    package_member_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_member_listContext ------------------------------------------------------------------

AtemParser::Package_member_listContext::Package_member_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Package_member_listContext::KeywordThis() {
  return getToken(AtemParser::KeywordThis, 0);
}

tree::TerminalNode* AtemParser::Package_member_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

AtemParser::Package_membersContext* AtemParser::Package_member_listContext::package_members() {
  return getRuleContext<AtemParser::Package_membersContext>(0);
}

tree::TerminalNode* AtemParser::Package_member_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}


size_t AtemParser::Package_member_listContext::getRuleIndex() const {
  return AtemParser::RulePackage_member_list;
}

void AtemParser::Package_member_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_member_list(this);
}

void AtemParser::Package_member_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_member_list(this);
}

AtemParser::Package_member_listContext* AtemParser::package_member_list() {
  Package_member_listContext *_localctx = _tracker.createInstance<Package_member_listContext>(_ctx, getState());
  enterRule(_localctx, 270, AtemParser::RulePackage_member_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1428);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordThis: {
        enterOuterAlt(_localctx, 1);
        setState(1423);
        match(AtemParser::KeywordThis);
        break;
      }

      case AtemParser::LeftCurly: {
        enterOuterAlt(_localctx, 2);
        setState(1424);
        match(AtemParser::LeftCurly);
        setState(1425);
        package_members();
        setState(1426);
        match(AtemParser::RightCurly);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_memberContext ------------------------------------------------------------------

AtemParser::Package_memberContext::Package_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Path_expressionContext* AtemParser::Package_memberContext::path_expression() {
  return getRuleContext<AtemParser::Path_expressionContext>(0);
}


size_t AtemParser::Package_memberContext::getRuleIndex() const {
  return AtemParser::RulePackage_member;
}

void AtemParser::Package_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_member(this);
}

void AtemParser::Package_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_member(this);
}

AtemParser::Package_memberContext* AtemParser::package_member() {
  Package_memberContext *_localctx = _tracker.createInstance<Package_memberContext>(_ctx, getState());
  enterRule(_localctx, 272, AtemParser::RulePackage_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1430);
    path_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_membersContext ------------------------------------------------------------------

AtemParser::Package_membersContext::Package_membersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Package_memberContext *> AtemParser::Package_membersContext::package_member() {
  return getRuleContexts<AtemParser::Package_memberContext>();
}

AtemParser::Package_memberContext* AtemParser::Package_membersContext::package_member(size_t i) {
  return getRuleContext<AtemParser::Package_memberContext>(i);
}


size_t AtemParser::Package_membersContext::getRuleIndex() const {
  return AtemParser::RulePackage_members;
}

void AtemParser::Package_membersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_members(this);
}

void AtemParser::Package_membersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_members(this);
}

AtemParser::Package_membersContext* AtemParser::package_members() {
  Package_membersContext *_localctx = _tracker.createInstance<Package_membersContext>(_ctx, getState());
  enterRule(_localctx, 274, AtemParser::RulePackage_members);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1433); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1432);
      package_member();
      setState(1435); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == AtemParser::KeywordGlobal || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 144115207419996161) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_declarationContext ------------------------------------------------------------------

AtemParser::Module_declarationContext::Module_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Module_declarationContext::KeywordModule() {
  return getToken(AtemParser::KeywordModule, 0);
}

AtemParser::AttributesContext* AtemParser::Module_declarationContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}

AtemParser::Code_block_no_labelContext* AtemParser::Module_declarationContext::code_block_no_label() {
  return getRuleContext<AtemParser::Code_block_no_labelContext>(0);
}


size_t AtemParser::Module_declarationContext::getRuleIndex() const {
  return AtemParser::RuleModule_declaration;
}

void AtemParser::Module_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_declaration(this);
}

void AtemParser::Module_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_declaration(this);
}

AtemParser::Module_declarationContext* AtemParser::module_declaration() {
  Module_declarationContext *_localctx = _tracker.createInstance<Module_declarationContext>(_ctx, getState());
  enterRule(_localctx, 276, AtemParser::RuleModule_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1446);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1437);
      match(AtemParser::KeywordModule);
      setState(1439);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
      case 1: {
        setState(1438);
        attributes();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1441);
      match(AtemParser::KeywordModule);
      setState(1443);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AtemParser::At) {
        setState(1442);
        attributes();
      }
      setState(1445);
      code_block_no_label();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_declarationContext ------------------------------------------------------------------

AtemParser::Namespace_declarationContext::Namespace_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Namespace_declarationContext::KeywordNamespace() {
  return getToken(AtemParser::KeywordNamespace, 0);
}

AtemParser::Code_block_no_labelContext* AtemParser::Namespace_declarationContext::code_block_no_label() {
  return getRuleContext<AtemParser::Code_block_no_labelContext>(0);
}

AtemParser::AttributesContext* AtemParser::Namespace_declarationContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}


size_t AtemParser::Namespace_declarationContext::getRuleIndex() const {
  return AtemParser::RuleNamespace_declaration;
}

void AtemParser::Namespace_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_declaration(this);
}

void AtemParser::Namespace_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_declaration(this);
}

AtemParser::Namespace_declarationContext* AtemParser::namespace_declaration() {
  Namespace_declarationContext *_localctx = _tracker.createInstance<Namespace_declarationContext>(_ctx, getState());
  enterRule(_localctx, 278, AtemParser::RuleNamespace_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1448);
    match(AtemParser::KeywordNamespace);
    setState(1450);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(1449);
      attributes();
    }
    setState(1452);
    code_block_no_label();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Typealias_declarationContext ------------------------------------------------------------------

AtemParser::Typealias_declarationContext::Typealias_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Typealias_declarationContext::KeywordAlias() {
  return getToken(AtemParser::KeywordAlias, 0);
}

tree::TerminalNode* AtemParser::Typealias_declarationContext::KeywordType() {
  return getToken(AtemParser::KeywordType, 0);
}

AtemParser::Type_expressionContext* AtemParser::Typealias_declarationContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}


size_t AtemParser::Typealias_declarationContext::getRuleIndex() const {
  return AtemParser::RuleTypealias_declaration;
}

void AtemParser::Typealias_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypealias_declaration(this);
}

void AtemParser::Typealias_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypealias_declaration(this);
}

AtemParser::Typealias_declarationContext* AtemParser::typealias_declaration() {
  Typealias_declarationContext *_localctx = _tracker.createInstance<Typealias_declarationContext>(_ctx, getState());
  enterRule(_localctx, 280, AtemParser::RuleTypealias_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1454);
    match(AtemParser::KeywordAlias);
    setState(1455);
    match(AtemParser::KeywordType);
    setState(1456);
    type_expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Access_level_specifierContext ------------------------------------------------------------------

AtemParser::Access_level_specifierContext::Access_level_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Access_level_specifierContext::KeywordPrivate() {
  return getToken(AtemParser::KeywordPrivate, 0);
}

tree::TerminalNode* AtemParser::Access_level_specifierContext::KeywordFilePrivate() {
  return getToken(AtemParser::KeywordFilePrivate, 0);
}

tree::TerminalNode* AtemParser::Access_level_specifierContext::KeywordInternal() {
  return getToken(AtemParser::KeywordInternal, 0);
}

tree::TerminalNode* AtemParser::Access_level_specifierContext::KeywordPublic() {
  return getToken(AtemParser::KeywordPublic, 0);
}

tree::TerminalNode* AtemParser::Access_level_specifierContext::KeywordOpen() {
  return getToken(AtemParser::KeywordOpen, 0);
}


size_t AtemParser::Access_level_specifierContext::getRuleIndex() const {
  return AtemParser::RuleAccess_level_specifier;
}

void AtemParser::Access_level_specifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccess_level_specifier(this);
}

void AtemParser::Access_level_specifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccess_level_specifier(this);
}

AtemParser::Access_level_specifierContext* AtemParser::access_level_specifier() {
  Access_level_specifierContext *_localctx = _tracker.createInstance<Access_level_specifierContext>(_ctx, getState());
  enterRule(_localctx, 282, AtemParser::RuleAccess_level_specifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1458);
    _la = _input->LA(1);
    if (!(((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & 158604569083905) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_declarationContext ------------------------------------------------------------------

AtemParser::Function_declarationContext::Function_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Function_declarationContext::KeywordFunc() {
  return getToken(AtemParser::KeywordFunc, 0);
}

AtemParser::Function_bodyContext* AtemParser::Function_declarationContext::function_body() {
  return getRuleContext<AtemParser::Function_bodyContext>(0);
}

AtemParser::AttributesContext* AtemParser::Function_declarationContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}

AtemParser::Function_typeContext* AtemParser::Function_declarationContext::function_type() {
  return getRuleContext<AtemParser::Function_typeContext>(0);
}


size_t AtemParser::Function_declarationContext::getRuleIndex() const {
  return AtemParser::RuleFunction_declaration;
}

void AtemParser::Function_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_declaration(this);
}

void AtemParser::Function_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_declaration(this);
}

AtemParser::Function_declarationContext* AtemParser::function_declaration() {
  Function_declarationContext *_localctx = _tracker.createInstance<Function_declarationContext>(_ctx, getState());
  enterRule(_localctx, 284, AtemParser::RuleFunction_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1460);
    match(AtemParser::KeywordFunc);
    setState(1462);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(1461);
      attributes();
    }
    setState(1465);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
    case 1: {
      setState(1464);
      function_type();
      break;
    }

    default:
      break;
    }
    setState(1467);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_bodyContext ------------------------------------------------------------------

AtemParser::Function_bodyContext::Function_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Code_blockContext* AtemParser::Function_bodyContext::code_block() {
  return getRuleContext<AtemParser::Code_blockContext>(0);
}

AtemParser::ExpressionContext* AtemParser::Function_bodyContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}


size_t AtemParser::Function_bodyContext::getRuleIndex() const {
  return AtemParser::RuleFunction_body;
}

void AtemParser::Function_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_body(this);
}

void AtemParser::Function_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_body(this);
}

AtemParser::Function_bodyContext* AtemParser::function_body() {
  Function_bodyContext *_localctx = _tracker.createInstance<Function_bodyContext>(_ctx, getState());
  enterRule(_localctx, 286, AtemParser::RuleFunction_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1471);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1469);
      code_block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1470);
      expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Contract_listContext ------------------------------------------------------------------

AtemParser::Contract_listContext::Contract_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Contract_listContext::KeywordRequire() {
  return getToken(AtemParser::KeywordRequire, 0);
}

tree::TerminalNode* AtemParser::Contract_listContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

tree::TerminalNode* AtemParser::Contract_listContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}

std::vector<AtemParser::ContractContext *> AtemParser::Contract_listContext::contract() {
  return getRuleContexts<AtemParser::ContractContext>();
}

AtemParser::ContractContext* AtemParser::Contract_listContext::contract(size_t i) {
  return getRuleContext<AtemParser::ContractContext>(i);
}


size_t AtemParser::Contract_listContext::getRuleIndex() const {
  return AtemParser::RuleContract_list;
}

void AtemParser::Contract_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContract_list(this);
}

void AtemParser::Contract_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContract_list(this);
}

AtemParser::Contract_listContext* AtemParser::contract_list() {
  Contract_listContext *_localctx = _tracker.createInstance<Contract_listContext>(_ctx, getState());
  enterRule(_localctx, 288, AtemParser::RuleContract_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1484);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1473);
      match(AtemParser::KeywordRequire);
      setState(1474);
      match(AtemParser::LeftCurly);
      setState(1476); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1475);
        contract();
        setState(1478); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == AtemParser::KeywordEnsure

      || _la == AtemParser::KeywordExpect);
      setState(1480);
      match(AtemParser::RightCurly);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1482);
      match(AtemParser::KeywordRequire);
      setState(1483);
      contract();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContractContext ------------------------------------------------------------------

AtemParser::ContractContext::ContractContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Contract_preconditionContext* AtemParser::ContractContext::contract_precondition() {
  return getRuleContext<AtemParser::Contract_preconditionContext>(0);
}

AtemParser::Contract_postconditionContext* AtemParser::ContractContext::contract_postcondition() {
  return getRuleContext<AtemParser::Contract_postconditionContext>(0);
}


size_t AtemParser::ContractContext::getRuleIndex() const {
  return AtemParser::RuleContract;
}

void AtemParser::ContractContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContract(this);
}

void AtemParser::ContractContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContract(this);
}

AtemParser::ContractContext* AtemParser::contract() {
  ContractContext *_localctx = _tracker.createInstance<ContractContext>(_ctx, getState());
  enterRule(_localctx, 290, AtemParser::RuleContract);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1488);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordExpect: {
        enterOuterAlt(_localctx, 1);
        setState(1486);
        contract_precondition();
        break;
      }

      case AtemParser::KeywordEnsure: {
        enterOuterAlt(_localctx, 2);
        setState(1487);
        contract_postcondition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Contract_preconditionContext ------------------------------------------------------------------

AtemParser::Contract_preconditionContext::Contract_preconditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Contract_preconditionContext::KeywordExpect() {
  return getToken(AtemParser::KeywordExpect, 0);
}

std::vector<AtemParser::ExpressionContext *> AtemParser::Contract_preconditionContext::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Contract_preconditionContext::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

tree::TerminalNode* AtemParser::Contract_preconditionContext::KeywordWith() {
  return getToken(AtemParser::KeywordWith, 0);
}


size_t AtemParser::Contract_preconditionContext::getRuleIndex() const {
  return AtemParser::RuleContract_precondition;
}

void AtemParser::Contract_preconditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContract_precondition(this);
}

void AtemParser::Contract_preconditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContract_precondition(this);
}

AtemParser::Contract_preconditionContext* AtemParser::contract_precondition() {
  Contract_preconditionContext *_localctx = _tracker.createInstance<Contract_preconditionContext>(_ctx, getState());
  enterRule(_localctx, 292, AtemParser::RuleContract_precondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1490);
    match(AtemParser::KeywordExpect);
    setState(1491);
    expression(0);
    setState(1494);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordWith) {
      setState(1492);
      match(AtemParser::KeywordWith);
      setState(1493);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Contract_postconditionContext ------------------------------------------------------------------

AtemParser::Contract_postconditionContext::Contract_postconditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Contract_postconditionContext::KeywordEnsure() {
  return getToken(AtemParser::KeywordEnsure, 0);
}

std::vector<AtemParser::ExpressionContext *> AtemParser::Contract_postconditionContext::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Contract_postconditionContext::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AtemParser::Contract_postconditionContext::KeywordWith() {
  return getTokens(AtemParser::KeywordWith);
}

tree::TerminalNode* AtemParser::Contract_postconditionContext::KeywordWith(size_t i) {
  return getToken(AtemParser::KeywordWith, i);
}

AtemParser::Return_value_nameContext* AtemParser::Contract_postconditionContext::return_value_name() {
  return getRuleContext<AtemParser::Return_value_nameContext>(0);
}

AtemParser::Declare_operatorContext* AtemParser::Contract_postconditionContext::declare_operator() {
  return getRuleContext<AtemParser::Declare_operatorContext>(0);
}

tree::TerminalNode* AtemParser::Contract_postconditionContext::KeywordReturn() {
  return getToken(AtemParser::KeywordReturn, 0);
}


size_t AtemParser::Contract_postconditionContext::getRuleIndex() const {
  return AtemParser::RuleContract_postcondition;
}

void AtemParser::Contract_postconditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContract_postcondition(this);
}

void AtemParser::Contract_postconditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContract_postcondition(this);
}

AtemParser::Contract_postconditionContext* AtemParser::contract_postcondition() {
  Contract_postconditionContext *_localctx = _tracker.createInstance<Contract_postconditionContext>(_ctx, getState());
  enterRule(_localctx, 294, AtemParser::RuleContract_postcondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1496);
    match(AtemParser::KeywordEnsure);

    setState(1497);
    match(AtemParser::KeywordWith);
    setState(1498);
    return_value_name();
    setState(1499);
    declare_operator();
    setState(1500);
    match(AtemParser::KeywordReturn);
    setState(1502);
    expression(0);
    setState(1505);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordWith) {
      setState(1503);
      match(AtemParser::KeywordWith);
      setState(1504);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_value_nameContext ------------------------------------------------------------------

AtemParser::Return_value_nameContext::Return_value_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Return_value_nameContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}


size_t AtemParser::Return_value_nameContext::getRuleIndex() const {
  return AtemParser::RuleReturn_value_name;
}

void AtemParser::Return_value_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_value_name(this);
}

void AtemParser::Return_value_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_value_name(this);
}

AtemParser::Return_value_nameContext* AtemParser::return_value_name() {
  Return_value_nameContext *_localctx = _tracker.createInstance<Return_value_nameContext>(_ctx, getState());
  enterRule(_localctx, 296, AtemParser::RuleReturn_value_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1507);
    match(AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_nameContext ------------------------------------------------------------------

AtemParser::Function_nameContext::Function_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Function_nameContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}


size_t AtemParser::Function_nameContext::getRuleIndex() const {
  return AtemParser::RuleFunction_name;
}

void AtemParser::Function_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_name(this);
}

void AtemParser::Function_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_name(this);
}

AtemParser::Function_nameContext* AtemParser::function_name() {
  Function_nameContext *_localctx = _tracker.createInstance<Function_nameContext>(_ctx, getState());
  enterRule(_localctx, 298, AtemParser::RuleFunction_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1509);
    match(AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_typeContext ------------------------------------------------------------------

AtemParser::Function_typeContext::Function_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Function_parameter_clauseContext* AtemParser::Function_typeContext::function_parameter_clause() {
  return getRuleContext<AtemParser::Function_parameter_clauseContext>(0);
}

AtemParser::Function_resultContext* AtemParser::Function_typeContext::function_result() {
  return getRuleContext<AtemParser::Function_resultContext>(0);
}

AtemParser::Function_specifiersContext* AtemParser::Function_typeContext::function_specifiers() {
  return getRuleContext<AtemParser::Function_specifiersContext>(0);
}

AtemParser::Contract_listContext* AtemParser::Function_typeContext::contract_list() {
  return getRuleContext<AtemParser::Contract_listContext>(0);
}


size_t AtemParser::Function_typeContext::getRuleIndex() const {
  return AtemParser::RuleFunction_type;
}

void AtemParser::Function_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_type(this);
}

void AtemParser::Function_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_type(this);
}

AtemParser::Function_typeContext* AtemParser::function_type() {
  Function_typeContext *_localctx = _tracker.createInstance<Function_typeContext>(_ctx, getState());
  enterRule(_localctx, 300, AtemParser::RuleFunction_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1511);
    function_parameter_clause();
    setState(1512);
    function_result();
    setState(1514);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 524291) != 0)) {
      setState(1513);
      function_specifiers();
    }
    setState(1517);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx)) {
    case 1: {
      setState(1516);
      contract_list();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_specifierContext ------------------------------------------------------------------

AtemParser::Function_specifierContext::Function_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Function_specifierContext::KeywordRecursive() {
  return getToken(AtemParser::KeywordRecursive, 0);
}

tree::TerminalNode* AtemParser::Function_specifierContext::KeywordThrows() {
  return getToken(AtemParser::KeywordThrows, 0);
}

tree::TerminalNode* AtemParser::Function_specifierContext::KeywordPure() {
  return getToken(AtemParser::KeywordPure, 0);
}


size_t AtemParser::Function_specifierContext::getRuleIndex() const {
  return AtemParser::RuleFunction_specifier;
}

void AtemParser::Function_specifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_specifier(this);
}

void AtemParser::Function_specifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_specifier(this);
}

AtemParser::Function_specifierContext* AtemParser::function_specifier() {
  Function_specifierContext *_localctx = _tracker.createInstance<Function_specifierContext>(_ctx, getState());
  enterRule(_localctx, 302, AtemParser::RuleFunction_specifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1519);
    _la = _input->LA(1);
    if (!(((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 524291) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_specifiersContext ------------------------------------------------------------------

AtemParser::Function_specifiersContext::Function_specifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Function_specifierContext *> AtemParser::Function_specifiersContext::function_specifier() {
  return getRuleContexts<AtemParser::Function_specifierContext>();
}

AtemParser::Function_specifierContext* AtemParser::Function_specifiersContext::function_specifier(size_t i) {
  return getRuleContext<AtemParser::Function_specifierContext>(i);
}


size_t AtemParser::Function_specifiersContext::getRuleIndex() const {
  return AtemParser::RuleFunction_specifiers;
}

void AtemParser::Function_specifiersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_specifiers(this);
}

void AtemParser::Function_specifiersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_specifiers(this);
}

AtemParser::Function_specifiersContext* AtemParser::function_specifiers() {
  Function_specifiersContext *_localctx = _tracker.createInstance<Function_specifiersContext>(_ctx, getState());
  enterRule(_localctx, 304, AtemParser::RuleFunction_specifiers);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1522); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1521);
      function_specifier();
      setState(1524); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 524291) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_resultContext ------------------------------------------------------------------

AtemParser::Function_resultContext::Function_resultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Function_resultContext::Arrow() {
  return getToken(AtemParser::Arrow, 0);
}

AtemParser::Type_expressionContext* AtemParser::Function_resultContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

AtemParser::AttributesContext* AtemParser::Function_resultContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}


size_t AtemParser::Function_resultContext::getRuleIndex() const {
  return AtemParser::RuleFunction_result;
}

void AtemParser::Function_resultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_result(this);
}

void AtemParser::Function_resultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_result(this);
}

AtemParser::Function_resultContext* AtemParser::function_result() {
  Function_resultContext *_localctx = _tracker.createInstance<Function_resultContext>(_ctx, getState());
  enterRule(_localctx, 306, AtemParser::RuleFunction_result);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1526);
    match(AtemParser::Arrow);
    setState(1528);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(1527);
      attributes();
    }
    setState(1530);
    type_expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_parameter_clauseContext ------------------------------------------------------------------

AtemParser::Function_parameter_clauseContext::Function_parameter_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Function_parameter_clauseContext::LeftParenthese() {
  return getToken(AtemParser::LeftParenthese, 0);
}

tree::TerminalNode* AtemParser::Function_parameter_clauseContext::RightParenthese() {
  return getToken(AtemParser::RightParenthese, 0);
}

AtemParser::Function_parameter_listContext* AtemParser::Function_parameter_clauseContext::function_parameter_list() {
  return getRuleContext<AtemParser::Function_parameter_listContext>(0);
}


size_t AtemParser::Function_parameter_clauseContext::getRuleIndex() const {
  return AtemParser::RuleFunction_parameter_clause;
}

void AtemParser::Function_parameter_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_parameter_clause(this);
}

void AtemParser::Function_parameter_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_parameter_clause(this);
}

AtemParser::Function_parameter_clauseContext* AtemParser::function_parameter_clause() {
  Function_parameter_clauseContext *_localctx = _tracker.createInstance<Function_parameter_clauseContext>(_ctx, getState());
  enterRule(_localctx, 308, AtemParser::RuleFunction_parameter_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1532);
    match(AtemParser::LeftParenthese);
    setState(1534);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Identifier

    || _la == AtemParser::At) {
      setState(1533);
      function_parameter_list();
    }
    setState(1536);
    match(AtemParser::RightParenthese);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_parameter_listContext ------------------------------------------------------------------

AtemParser::Function_parameter_listContext::Function_parameter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Function_parameterContext *> AtemParser::Function_parameter_listContext::function_parameter() {
  return getRuleContexts<AtemParser::Function_parameterContext>();
}

AtemParser::Function_parameterContext* AtemParser::Function_parameter_listContext::function_parameter(size_t i) {
  return getRuleContext<AtemParser::Function_parameterContext>(i);
}

std::vector<tree::TerminalNode *> AtemParser::Function_parameter_listContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Function_parameter_listContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}


size_t AtemParser::Function_parameter_listContext::getRuleIndex() const {
  return AtemParser::RuleFunction_parameter_list;
}

void AtemParser::Function_parameter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_parameter_list(this);
}

void AtemParser::Function_parameter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_parameter_list(this);
}

AtemParser::Function_parameter_listContext* AtemParser::function_parameter_list() {
  Function_parameter_listContext *_localctx = _tracker.createInstance<Function_parameter_listContext>(_ctx, getState());
  enterRule(_localctx, 310, AtemParser::RuleFunction_parameter_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1538);
    function_parameter();
    setState(1543);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AtemParser::Comma) {
      setState(1539);
      match(AtemParser::Comma);
      setState(1540);
      function_parameter();
      setState(1545);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_parameterContext ------------------------------------------------------------------

AtemParser::Function_parameterContext::Function_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Function_parameter_nameContext* AtemParser::Function_parameterContext::function_parameter_name() {
  return getRuleContext<AtemParser::Function_parameter_nameContext>(0);
}

AtemParser::AttributesContext* AtemParser::Function_parameterContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}

AtemParser::Function_parameter_labelContext* AtemParser::Function_parameterContext::function_parameter_label() {
  return getRuleContext<AtemParser::Function_parameter_labelContext>(0);
}

tree::TerminalNode* AtemParser::Function_parameterContext::Colon() {
  return getToken(AtemParser::Colon, 0);
}

AtemParser::Type_annotationContext* AtemParser::Function_parameterContext::type_annotation() {
  return getRuleContext<AtemParser::Type_annotationContext>(0);
}

AtemParser::Default_argument_clauseContext* AtemParser::Function_parameterContext::default_argument_clause() {
  return getRuleContext<AtemParser::Default_argument_clauseContext>(0);
}


size_t AtemParser::Function_parameterContext::getRuleIndex() const {
  return AtemParser::RuleFunction_parameter;
}

void AtemParser::Function_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_parameter(this);
}

void AtemParser::Function_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_parameter(this);
}

AtemParser::Function_parameterContext* AtemParser::function_parameter() {
  Function_parameterContext *_localctx = _tracker.createInstance<Function_parameterContext>(_ctx, getState());
  enterRule(_localctx, 312, AtemParser::RuleFunction_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1547);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(1546);
      attributes();
    }
    setState(1550);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      setState(1549);
      function_parameter_label();
      break;
    }

    default:
      break;
    }
    setState(1552);
    function_parameter_name();
    setState(1555);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Colon) {
      setState(1553);
      match(AtemParser::Colon);
      setState(1554);
      type_annotation();
    }
    setState(1558);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Assign) {
      setState(1557);
      default_argument_clause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_parameter_labelContext ------------------------------------------------------------------

AtemParser::Function_parameter_labelContext::Function_parameter_labelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Function_parameter_labelContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}


size_t AtemParser::Function_parameter_labelContext::getRuleIndex() const {
  return AtemParser::RuleFunction_parameter_label;
}

void AtemParser::Function_parameter_labelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_parameter_label(this);
}

void AtemParser::Function_parameter_labelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_parameter_label(this);
}

AtemParser::Function_parameter_labelContext* AtemParser::function_parameter_label() {
  Function_parameter_labelContext *_localctx = _tracker.createInstance<Function_parameter_labelContext>(_ctx, getState());
  enterRule(_localctx, 314, AtemParser::RuleFunction_parameter_label);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1560);
    match(AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_parameter_nameContext ------------------------------------------------------------------

AtemParser::Function_parameter_nameContext::Function_parameter_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Function_parameter_nameContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}


size_t AtemParser::Function_parameter_nameContext::getRuleIndex() const {
  return AtemParser::RuleFunction_parameter_name;
}

void AtemParser::Function_parameter_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_parameter_name(this);
}

void AtemParser::Function_parameter_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_parameter_name(this);
}

AtemParser::Function_parameter_nameContext* AtemParser::function_parameter_name() {
  Function_parameter_nameContext *_localctx = _tracker.createInstance<Function_parameter_nameContext>(_ctx, getState());
  enterRule(_localctx, 316, AtemParser::RuleFunction_parameter_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1562);
    match(AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Default_argument_clauseContext ------------------------------------------------------------------

AtemParser::Default_argument_clauseContext::Default_argument_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Default_argument_clauseContext::Assign() {
  return getToken(AtemParser::Assign, 0);
}

AtemParser::ExpressionContext* AtemParser::Default_argument_clauseContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}


size_t AtemParser::Default_argument_clauseContext::getRuleIndex() const {
  return AtemParser::RuleDefault_argument_clause;
}

void AtemParser::Default_argument_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefault_argument_clause(this);
}

void AtemParser::Default_argument_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefault_argument_clause(this);
}

AtemParser::Default_argument_clauseContext* AtemParser::default_argument_clause() {
  Default_argument_clauseContext *_localctx = _tracker.createInstance<Default_argument_clauseContext>(_ctx, getState());
  enterRule(_localctx, 318, AtemParser::RuleDefault_argument_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1564);
    match(AtemParser::Assign);
    setState(1565);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_annotationContext ------------------------------------------------------------------

AtemParser::Type_annotationContext::Type_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Type_expressionContext* AtemParser::Type_annotationContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

AtemParser::AttributesContext* AtemParser::Type_annotationContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}


size_t AtemParser::Type_annotationContext::getRuleIndex() const {
  return AtemParser::RuleType_annotation;
}

void AtemParser::Type_annotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_annotation(this);
}

void AtemParser::Type_annotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_annotation(this);
}

AtemParser::Type_annotationContext* AtemParser::type_annotation() {
  Type_annotationContext *_localctx = _tracker.createInstance<Type_annotationContext>(_ctx, getState());
  enterRule(_localctx, 320, AtemParser::RuleType_annotation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1568);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(1567);
      attributes();
    }
    setState(1570);
    type_expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variable_declarationContext ------------------------------------------------------------------

AtemParser::Variable_declarationContext::Variable_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Variable_declarationContext::KeywordVar() {
  return getToken(AtemParser::KeywordVar, 0);
}

AtemParser::ExpressionContext* AtemParser::Variable_declarationContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Storage_level_specifierContext* AtemParser::Variable_declarationContext::storage_level_specifier() {
  return getRuleContext<AtemParser::Storage_level_specifierContext>(0);
}


size_t AtemParser::Variable_declarationContext::getRuleIndex() const {
  return AtemParser::RuleVariable_declaration;
}

void AtemParser::Variable_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable_declaration(this);
}

void AtemParser::Variable_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable_declaration(this);
}

AtemParser::Variable_declarationContext* AtemParser::variable_declaration() {
  Variable_declarationContext *_localctx = _tracker.createInstance<Variable_declarationContext>(_ctx, getState());
  enterRule(_localctx, 322, AtemParser::RuleVariable_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1572);
    match(AtemParser::KeywordVar);
    setState(1574);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx)) {
    case 1: {
      setState(1573);
      storage_level_specifier();
      break;
    }

    default:
      break;
    }
    setState(1576);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constant_declarationContext ------------------------------------------------------------------

AtemParser::Constant_declarationContext::Constant_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Constant_declarationContext::KeywordVal() {
  return getToken(AtemParser::KeywordVal, 0);
}

AtemParser::ExpressionContext* AtemParser::Constant_declarationContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Storage_level_specifierContext* AtemParser::Constant_declarationContext::storage_level_specifier() {
  return getRuleContext<AtemParser::Storage_level_specifierContext>(0);
}


size_t AtemParser::Constant_declarationContext::getRuleIndex() const {
  return AtemParser::RuleConstant_declaration;
}

void AtemParser::Constant_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstant_declaration(this);
}

void AtemParser::Constant_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstant_declaration(this);
}

AtemParser::Constant_declarationContext* AtemParser::constant_declaration() {
  Constant_declarationContext *_localctx = _tracker.createInstance<Constant_declarationContext>(_ctx, getState());
  enterRule(_localctx, 324, AtemParser::RuleConstant_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1578);
    match(AtemParser::KeywordVal);
    setState(1580);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
    case 1: {
      setState(1579);
      storage_level_specifier();
      break;
    }

    default:
      break;
    }
    setState(1582);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Storage_level_specifierContext ------------------------------------------------------------------

AtemParser::Storage_level_specifierContext::Storage_level_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Storage_level_specifierContext::KeywordGlobal() {
  return getToken(AtemParser::KeywordGlobal, 0);
}

tree::TerminalNode* AtemParser::Storage_level_specifierContext::KeywordStatic() {
  return getToken(AtemParser::KeywordStatic, 0);
}

tree::TerminalNode* AtemParser::Storage_level_specifierContext::KeywordThreadLocal() {
  return getToken(AtemParser::KeywordThreadLocal, 0);
}


size_t AtemParser::Storage_level_specifierContext::getRuleIndex() const {
  return AtemParser::RuleStorage_level_specifier;
}

void AtemParser::Storage_level_specifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStorage_level_specifier(this);
}

void AtemParser::Storage_level_specifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStorage_level_specifier(this);
}

AtemParser::Storage_level_specifierContext* AtemParser::storage_level_specifier() {
  Storage_level_specifierContext *_localctx = _tracker.createInstance<Storage_level_specifierContext>(_ctx, getState());
  enterRule(_localctx, 326, AtemParser::RuleStorage_level_specifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1584);
    _la = _input->LA(1);
    if (!(((((_la - 54) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 54)) & 18084767253659649) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Closure_expressionContext ------------------------------------------------------------------

AtemParser::Closure_expressionContext::Closure_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Code_blockContext* AtemParser::Closure_expressionContext::code_block() {
  return getRuleContext<AtemParser::Code_blockContext>(0);
}

tree::TerminalNode* AtemParser::Closure_expressionContext::KeywordFunc() {
  return getToken(AtemParser::KeywordFunc, 0);
}

AtemParser::Capture_listContext* AtemParser::Closure_expressionContext::capture_list() {
  return getRuleContext<AtemParser::Capture_listContext>(0);
}

AtemParser::Function_typeContext* AtemParser::Closure_expressionContext::function_type() {
  return getRuleContext<AtemParser::Function_typeContext>(0);
}


size_t AtemParser::Closure_expressionContext::getRuleIndex() const {
  return AtemParser::RuleClosure_expression;
}

void AtemParser::Closure_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClosure_expression(this);
}

void AtemParser::Closure_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClosure_expression(this);
}

AtemParser::Closure_expressionContext* AtemParser::closure_expression() {
  Closure_expressionContext *_localctx = _tracker.createInstance<Closure_expressionContext>(_ctx, getState());
  enterRule(_localctx, 328, AtemParser::RuleClosure_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1587);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordFunc) {
      setState(1586);
      match(AtemParser::KeywordFunc);
    }
    setState(1590);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::LeftSquare) {
      setState(1589);
      capture_list();
    }
    setState(1593);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::LeftParenthese) {
      setState(1592);
      function_type();
    }
    setState(1595);
    code_block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Capture_listContext ------------------------------------------------------------------

AtemParser::Capture_listContext::Capture_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Capture_listContext::LeftSquare() {
  return getToken(AtemParser::LeftSquare, 0);
}

AtemParser::Capture_list_itemsContext* AtemParser::Capture_listContext::capture_list_items() {
  return getRuleContext<AtemParser::Capture_list_itemsContext>(0);
}

tree::TerminalNode* AtemParser::Capture_listContext::RightSquare() {
  return getToken(AtemParser::RightSquare, 0);
}


size_t AtemParser::Capture_listContext::getRuleIndex() const {
  return AtemParser::RuleCapture_list;
}

void AtemParser::Capture_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCapture_list(this);
}

void AtemParser::Capture_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCapture_list(this);
}

AtemParser::Capture_listContext* AtemParser::capture_list() {
  Capture_listContext *_localctx = _tracker.createInstance<Capture_listContext>(_ctx, getState());
  enterRule(_localctx, 330, AtemParser::RuleCapture_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1597);
    match(AtemParser::LeftSquare);
    setState(1598);
    capture_list_items();
    setState(1599);
    match(AtemParser::RightSquare);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Capture_list_itemsContext ------------------------------------------------------------------

AtemParser::Capture_list_itemsContext::Capture_list_itemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Capture_list_itemContext *> AtemParser::Capture_list_itemsContext::capture_list_item() {
  return getRuleContexts<AtemParser::Capture_list_itemContext>();
}

AtemParser::Capture_list_itemContext* AtemParser::Capture_list_itemsContext::capture_list_item(size_t i) {
  return getRuleContext<AtemParser::Capture_list_itemContext>(i);
}


size_t AtemParser::Capture_list_itemsContext::getRuleIndex() const {
  return AtemParser::RuleCapture_list_items;
}

void AtemParser::Capture_list_itemsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCapture_list_items(this);
}

void AtemParser::Capture_list_itemsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCapture_list_items(this);
}

AtemParser::Capture_list_itemsContext* AtemParser::capture_list_items() {
  Capture_list_itemsContext *_localctx = _tracker.createInstance<Capture_list_itemsContext>(_ctx, getState());
  enterRule(_localctx, 332, AtemParser::RuleCapture_list_items);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1602); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1601);
      capture_list_item();
      setState(1604); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Capture_list_itemContext ------------------------------------------------------------------

AtemParser::Capture_list_itemContext::Capture_list_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Capture_list_itemContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}


size_t AtemParser::Capture_list_itemContext::getRuleIndex() const {
  return AtemParser::RuleCapture_list_item;
}

void AtemParser::Capture_list_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCapture_list_item(this);
}

void AtemParser::Capture_list_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCapture_list_item(this);
}

AtemParser::Capture_list_itemContext* AtemParser::capture_list_item() {
  Capture_list_itemContext *_localctx = _tracker.createInstance<Capture_list_itemContext>(_ctx, getState());
  enterRule(_localctx, 334, AtemParser::RuleCapture_list_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1606);
    match(AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Defer_statementContext ------------------------------------------------------------------

AtemParser::Defer_statementContext::Defer_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Defer_statementContext::KeywordDefer() {
  return getToken(AtemParser::KeywordDefer, 0);
}

AtemParser::Code_blockContext* AtemParser::Defer_statementContext::code_block() {
  return getRuleContext<AtemParser::Code_blockContext>(0);
}

AtemParser::Defer_kindContext* AtemParser::Defer_statementContext::defer_kind() {
  return getRuleContext<AtemParser::Defer_kindContext>(0);
}


size_t AtemParser::Defer_statementContext::getRuleIndex() const {
  return AtemParser::RuleDefer_statement;
}

void AtemParser::Defer_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefer_statement(this);
}

void AtemParser::Defer_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefer_statement(this);
}

AtemParser::Defer_statementContext* AtemParser::defer_statement() {
  Defer_statementContext *_localctx = _tracker.createInstance<Defer_statementContext>(_ctx, getState());
  enterRule(_localctx, 336, AtemParser::RuleDefer_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1608);
    match(AtemParser::KeywordDefer);
    setState(1610);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordFail

    || _la == AtemParser::KeywordSuccess) {
      setState(1609);
      defer_kind();
    }
    setState(1612);
    code_block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Defer_kindContext ------------------------------------------------------------------

AtemParser::Defer_kindContext::Defer_kindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Defer_kindContext::KeywordSuccess() {
  return getToken(AtemParser::KeywordSuccess, 0);
}

tree::TerminalNode* AtemParser::Defer_kindContext::KeywordFail() {
  return getToken(AtemParser::KeywordFail, 0);
}


size_t AtemParser::Defer_kindContext::getRuleIndex() const {
  return AtemParser::RuleDefer_kind;
}

void AtemParser::Defer_kindContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefer_kind(this);
}

void AtemParser::Defer_kindContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefer_kind(this);
}

AtemParser::Defer_kindContext* AtemParser::defer_kind() {
  Defer_kindContext *_localctx = _tracker.createInstance<Defer_kindContext>(_ctx, getState());
  enterRule(_localctx, 338, AtemParser::RuleDefer_kind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1614);
    _la = _input->LA(1);
    if (!(_la == AtemParser::KeywordFail

    || _la == AtemParser::KeywordSuccess)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Code_block_no_labelContext ------------------------------------------------------------------

AtemParser::Code_block_no_labelContext::Code_block_no_labelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Code_block_no_labelContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

tree::TerminalNode* AtemParser::Code_block_no_labelContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}

AtemParser::StatementsContext* AtemParser::Code_block_no_labelContext::statements() {
  return getRuleContext<AtemParser::StatementsContext>(0);
}


size_t AtemParser::Code_block_no_labelContext::getRuleIndex() const {
  return AtemParser::RuleCode_block_no_label;
}

void AtemParser::Code_block_no_labelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCode_block_no_label(this);
}

void AtemParser::Code_block_no_labelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCode_block_no_label(this);
}

AtemParser::Code_block_no_labelContext* AtemParser::code_block_no_label() {
  Code_block_no_labelContext *_localctx = _tracker.createInstance<Code_block_no_labelContext>(_ctx, getState());
  enterRule(_localctx, 340, AtemParser::RuleCode_block_no_label);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1616);
    match(AtemParser::LeftCurly);
    setState(1618);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4406791681953809004) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 9223296701112183311) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 8792488957) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 193)) & 32212257801) != 0)) {
      setState(1617);
      statements();
    }
    setState(1620);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Code_blockContext ------------------------------------------------------------------

AtemParser::Code_blockContext::Code_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Code_blockContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

tree::TerminalNode* AtemParser::Code_blockContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}

AtemParser::Code_block_nameContext* AtemParser::Code_blockContext::code_block_name() {
  return getRuleContext<AtemParser::Code_block_nameContext>(0);
}

AtemParser::StatementsContext* AtemParser::Code_blockContext::statements() {
  return getRuleContext<AtemParser::StatementsContext>(0);
}


size_t AtemParser::Code_blockContext::getRuleIndex() const {
  return AtemParser::RuleCode_block;
}

void AtemParser::Code_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCode_block(this);
}

void AtemParser::Code_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCode_block(this);
}

AtemParser::Code_blockContext* AtemParser::code_block() {
  Code_blockContext *_localctx = _tracker.createInstance<Code_blockContext>(_ctx, getState());
  enterRule(_localctx, 342, AtemParser::RuleCode_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1623);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Identifier) {
      setState(1622);
      code_block_name();
    }
    setState(1625);
    match(AtemParser::LeftCurly);
    setState(1627);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4406791681953809004) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 9223296701112183311) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 8792488957) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 193)) & 32212257801) != 0)) {
      setState(1626);
      statements();
    }
    setState(1629);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Code_block_nameContext ------------------------------------------------------------------

AtemParser::Code_block_nameContext::Code_block_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Code_block_nameContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}

tree::TerminalNode* AtemParser::Code_block_nameContext::Colon() {
  return getToken(AtemParser::Colon, 0);
}


size_t AtemParser::Code_block_nameContext::getRuleIndex() const {
  return AtemParser::RuleCode_block_name;
}

void AtemParser::Code_block_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCode_block_name(this);
}

void AtemParser::Code_block_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCode_block_name(this);
}

AtemParser::Code_block_nameContext* AtemParser::code_block_name() {
  Code_block_nameContext *_localctx = _tracker.createInstance<Code_block_nameContext>(_ctx, getState());
  enterRule(_localctx, 344, AtemParser::RuleCode_block_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1631);
    match(AtemParser::Identifier);
    setState(1632);
    match(AtemParser::Colon);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeContext ------------------------------------------------------------------

AtemParser::AttributeContext::AttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::AttributeContext::At() {
  return getToken(AtemParser::At, 0);
}

AtemParser::Attribute_nameContext* AtemParser::AttributeContext::attribute_name() {
  return getRuleContext<AtemParser::Attribute_nameContext>(0);
}


size_t AtemParser::AttributeContext::getRuleIndex() const {
  return AtemParser::RuleAttribute;
}

void AtemParser::AttributeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute(this);
}

void AtemParser::AttributeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute(this);
}

AtemParser::AttributeContext* AtemParser::attribute() {
  AttributeContext *_localctx = _tracker.createInstance<AttributeContext>(_ctx, getState());
  enterRule(_localctx, 346, AtemParser::RuleAttribute);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1634);
    match(AtemParser::At);
    setState(1635);
    attribute_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributesContext ------------------------------------------------------------------

AtemParser::AttributesContext::AttributesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::AttributeContext *> AtemParser::AttributesContext::attribute() {
  return getRuleContexts<AtemParser::AttributeContext>();
}

AtemParser::AttributeContext* AtemParser::AttributesContext::attribute(size_t i) {
  return getRuleContext<AtemParser::AttributeContext>(i);
}


size_t AtemParser::AttributesContext::getRuleIndex() const {
  return AtemParser::RuleAttributes;
}

void AtemParser::AttributesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributes(this);
}

void AtemParser::AttributesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributes(this);
}

AtemParser::AttributesContext* AtemParser::attributes() {
  AttributesContext *_localctx = _tracker.createInstance<AttributesContext>(_ctx, getState());
  enterRule(_localctx, 348, AtemParser::RuleAttributes);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1638); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1637);
              attribute();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1640); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_nameContext ------------------------------------------------------------------

AtemParser::Attribute_nameContext::Attribute_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Path_expressionContext* AtemParser::Attribute_nameContext::path_expression() {
  return getRuleContext<AtemParser::Path_expressionContext>(0);
}


size_t AtemParser::Attribute_nameContext::getRuleIndex() const {
  return AtemParser::RuleAttribute_name;
}

void AtemParser::Attribute_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_name(this);
}

void AtemParser::Attribute_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_name(this);
}

AtemParser::Attribute_nameContext* AtemParser::attribute_name() {
  Attribute_nameContext *_localctx = _tracker.createInstance<Attribute_nameContext>(_ctx, getState());
  enterRule(_localctx, 350, AtemParser::RuleAttribute_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1642);
    path_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_call_operatorContext ------------------------------------------------------------------

AtemParser::Function_call_operatorContext::Function_call_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Trailing_closuresContext* AtemParser::Function_call_operatorContext::trailing_closures() {
  return getRuleContext<AtemParser::Trailing_closuresContext>(0);
}

AtemParser::Function_call_argument_clauseContext* AtemParser::Function_call_operatorContext::function_call_argument_clause() {
  return getRuleContext<AtemParser::Function_call_argument_clauseContext>(0);
}


size_t AtemParser::Function_call_operatorContext::getRuleIndex() const {
  return AtemParser::RuleFunction_call_operator;
}

void AtemParser::Function_call_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_call_operator(this);
}

void AtemParser::Function_call_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_call_operator(this);
}

AtemParser::Function_call_operatorContext* AtemParser::function_call_operator() {
  Function_call_operatorContext *_localctx = _tracker.createInstance<Function_call_operatorContext>(_ctx, getState());
  enterRule(_localctx, 352, AtemParser::RuleFunction_call_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1649);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1645);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
      case 1: {
        setState(1644);
        function_call_argument_clause();
        break;
      }

      default:
        break;
      }
      setState(1647);
      trailing_closures();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1648);
      function_call_argument_clause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_call_argument_clauseContext ------------------------------------------------------------------

AtemParser::Function_call_argument_clauseContext::Function_call_argument_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Function_call_argument_clauseContext::LeftParenthese() {
  return getToken(AtemParser::LeftParenthese, 0);
}

tree::TerminalNode* AtemParser::Function_call_argument_clauseContext::RightParenthese() {
  return getToken(AtemParser::RightParenthese, 0);
}

AtemParser::Function_call_argument_listContext* AtemParser::Function_call_argument_clauseContext::function_call_argument_list() {
  return getRuleContext<AtemParser::Function_call_argument_listContext>(0);
}


size_t AtemParser::Function_call_argument_clauseContext::getRuleIndex() const {
  return AtemParser::RuleFunction_call_argument_clause;
}

void AtemParser::Function_call_argument_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_call_argument_clause(this);
}

void AtemParser::Function_call_argument_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_call_argument_clause(this);
}

AtemParser::Function_call_argument_clauseContext* AtemParser::function_call_argument_clause() {
  Function_call_argument_clauseContext *_localctx = _tracker.createInstance<Function_call_argument_clauseContext>(_ctx, getState());
  enterRule(_localctx, 354, AtemParser::RuleFunction_call_argument_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1651);
    match(AtemParser::LeftParenthese);
    setState(1653);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
    case 1: {
      setState(1652);
      function_call_argument_list();
      break;
    }

    default:
      break;
    }
    setState(1655);
    match(AtemParser::RightParenthese);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_call_argument_listContext ------------------------------------------------------------------

AtemParser::Function_call_argument_listContext::Function_call_argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Function_call_argumentContext *> AtemParser::Function_call_argument_listContext::function_call_argument() {
  return getRuleContexts<AtemParser::Function_call_argumentContext>();
}

AtemParser::Function_call_argumentContext* AtemParser::Function_call_argument_listContext::function_call_argument(size_t i) {
  return getRuleContext<AtemParser::Function_call_argumentContext>(i);
}

std::vector<tree::TerminalNode *> AtemParser::Function_call_argument_listContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Function_call_argument_listContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}


size_t AtemParser::Function_call_argument_listContext::getRuleIndex() const {
  return AtemParser::RuleFunction_call_argument_list;
}

void AtemParser::Function_call_argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_call_argument_list(this);
}

void AtemParser::Function_call_argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_call_argument_list(this);
}

AtemParser::Function_call_argument_listContext* AtemParser::function_call_argument_list() {
  Function_call_argument_listContext *_localctx = _tracker.createInstance<Function_call_argument_listContext>(_ctx, getState());
  enterRule(_localctx, 356, AtemParser::RuleFunction_call_argument_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1657);
    function_call_argument();
    setState(1662);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AtemParser::Comma) {
      setState(1658);
      match(AtemParser::Comma);
      setState(1659);
      function_call_argument();
      setState(1664);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_call_argumentContext ------------------------------------------------------------------

AtemParser::Function_call_argumentContext::Function_call_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Function_call_argumentContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}

AtemParser::ExpressionContext* AtemParser::Function_call_argumentContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Argument_nameContext* AtemParser::Function_call_argumentContext::argument_name() {
  return getRuleContext<AtemParser::Argument_nameContext>(0);
}


size_t AtemParser::Function_call_argumentContext::getRuleIndex() const {
  return AtemParser::RuleFunction_call_argument;
}

void AtemParser::Function_call_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_call_argument(this);
}

void AtemParser::Function_call_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_call_argument(this);
}

AtemParser::Function_call_argumentContext* AtemParser::function_call_argument() {
  Function_call_argumentContext *_localctx = _tracker.createInstance<Function_call_argumentContext>(_ctx, getState());
  enterRule(_localctx, 358, AtemParser::RuleFunction_call_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1666);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx)) {
    case 1: {
      setState(1665);
      argument_name();
      break;
    }

    default:
      break;
    }
    setState(1670);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
    case 1: {
      setState(1668);
      match(AtemParser::Identifier);
      break;
    }

    case 2: {
      setState(1669);
      expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_nameContext ------------------------------------------------------------------

AtemParser::Argument_nameContext::Argument_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Argument_nameContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}

tree::TerminalNode* AtemParser::Argument_nameContext::Assign() {
  return getToken(AtemParser::Assign, 0);
}


size_t AtemParser::Argument_nameContext::getRuleIndex() const {
  return AtemParser::RuleArgument_name;
}

void AtemParser::Argument_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_name(this);
}

void AtemParser::Argument_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_name(this);
}

AtemParser::Argument_nameContext* AtemParser::argument_name() {
  Argument_nameContext *_localctx = _tracker.createInstance<Argument_nameContext>(_ctx, getState());
  enterRule(_localctx, 360, AtemParser::RuleArgument_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1672);
    match(AtemParser::Identifier);
    setState(1673);
    match(AtemParser::Assign);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_namesContext ------------------------------------------------------------------

AtemParser::Argument_namesContext::Argument_namesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Argument_nameContext *> AtemParser::Argument_namesContext::argument_name() {
  return getRuleContexts<AtemParser::Argument_nameContext>();
}

AtemParser::Argument_nameContext* AtemParser::Argument_namesContext::argument_name(size_t i) {
  return getRuleContext<AtemParser::Argument_nameContext>(i);
}


size_t AtemParser::Argument_namesContext::getRuleIndex() const {
  return AtemParser::RuleArgument_names;
}

void AtemParser::Argument_namesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_names(this);
}

void AtemParser::Argument_namesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_names(this);
}

AtemParser::Argument_namesContext* AtemParser::argument_names() {
  Argument_namesContext *_localctx = _tracker.createInstance<Argument_namesContext>(_ctx, getState());
  enterRule(_localctx, 362, AtemParser::RuleArgument_names);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1676); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1675);
      argument_name();
      setState(1678); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Trailing_closuresContext ------------------------------------------------------------------

AtemParser::Trailing_closuresContext::Trailing_closuresContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Closure_expressionContext* AtemParser::Trailing_closuresContext::closure_expression() {
  return getRuleContext<AtemParser::Closure_expressionContext>(0);
}

std::vector<AtemParser::Labeled_trailing_closuresContext *> AtemParser::Trailing_closuresContext::labeled_trailing_closures() {
  return getRuleContexts<AtemParser::Labeled_trailing_closuresContext>();
}

AtemParser::Labeled_trailing_closuresContext* AtemParser::Trailing_closuresContext::labeled_trailing_closures(size_t i) {
  return getRuleContext<AtemParser::Labeled_trailing_closuresContext>(i);
}


size_t AtemParser::Trailing_closuresContext::getRuleIndex() const {
  return AtemParser::RuleTrailing_closures;
}

void AtemParser::Trailing_closuresContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrailing_closures(this);
}

void AtemParser::Trailing_closuresContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrailing_closures(this);
}

AtemParser::Trailing_closuresContext* AtemParser::trailing_closures() {
  Trailing_closuresContext *_localctx = _tracker.createInstance<Trailing_closuresContext>(_ctx, getState());
  enterRule(_localctx, 364, AtemParser::RuleTrailing_closures);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1680);
    closure_expression();
    setState(1682); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1681);
              labeled_trailing_closures();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1684); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Labeled_trailing_closureContext ------------------------------------------------------------------

AtemParser::Labeled_trailing_closureContext::Labeled_trailing_closureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Labeled_trailing_closureContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}

tree::TerminalNode* AtemParser::Labeled_trailing_closureContext::Assign() {
  return getToken(AtemParser::Assign, 0);
}

AtemParser::Closure_expressionContext* AtemParser::Labeled_trailing_closureContext::closure_expression() {
  return getRuleContext<AtemParser::Closure_expressionContext>(0);
}


size_t AtemParser::Labeled_trailing_closureContext::getRuleIndex() const {
  return AtemParser::RuleLabeled_trailing_closure;
}

void AtemParser::Labeled_trailing_closureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabeled_trailing_closure(this);
}

void AtemParser::Labeled_trailing_closureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabeled_trailing_closure(this);
}

AtemParser::Labeled_trailing_closureContext* AtemParser::labeled_trailing_closure() {
  Labeled_trailing_closureContext *_localctx = _tracker.createInstance<Labeled_trailing_closureContext>(_ctx, getState());
  enterRule(_localctx, 366, AtemParser::RuleLabeled_trailing_closure);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1686);
    match(AtemParser::Identifier);
    setState(1687);
    match(AtemParser::Assign);
    setState(1688);
    closure_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Labeled_trailing_closuresContext ------------------------------------------------------------------

AtemParser::Labeled_trailing_closuresContext::Labeled_trailing_closuresContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Labeled_trailing_closureContext *> AtemParser::Labeled_trailing_closuresContext::labeled_trailing_closure() {
  return getRuleContexts<AtemParser::Labeled_trailing_closureContext>();
}

AtemParser::Labeled_trailing_closureContext* AtemParser::Labeled_trailing_closuresContext::labeled_trailing_closure(size_t i) {
  return getRuleContext<AtemParser::Labeled_trailing_closureContext>(i);
}


size_t AtemParser::Labeled_trailing_closuresContext::getRuleIndex() const {
  return AtemParser::RuleLabeled_trailing_closures;
}

void AtemParser::Labeled_trailing_closuresContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabeled_trailing_closures(this);
}

void AtemParser::Labeled_trailing_closuresContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabeled_trailing_closures(this);
}

AtemParser::Labeled_trailing_closuresContext* AtemParser::labeled_trailing_closures() {
  Labeled_trailing_closuresContext *_localctx = _tracker.createInstance<Labeled_trailing_closuresContext>(_ctx, getState());
  enterRule(_localctx, 368, AtemParser::RuleLabeled_trailing_closures);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1691); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1690);
              labeled_trailing_closure();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1693); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithmetic_operatorContext ------------------------------------------------------------------

AtemParser::Arithmetic_operatorContext::Arithmetic_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Arithmetic_operatorContext::Add() {
  return getToken(AtemParser::Add, 0);
}

tree::TerminalNode* AtemParser::Arithmetic_operatorContext::OverflowingAdd() {
  return getToken(AtemParser::OverflowingAdd, 0);
}

tree::TerminalNode* AtemParser::Arithmetic_operatorContext::SaturatingAdd() {
  return getToken(AtemParser::SaturatingAdd, 0);
}

tree::TerminalNode* AtemParser::Arithmetic_operatorContext::Sub() {
  return getToken(AtemParser::Sub, 0);
}

tree::TerminalNode* AtemParser::Arithmetic_operatorContext::OverflowingSub() {
  return getToken(AtemParser::OverflowingSub, 0);
}

tree::TerminalNode* AtemParser::Arithmetic_operatorContext::SaturatingSub() {
  return getToken(AtemParser::SaturatingSub, 0);
}

tree::TerminalNode* AtemParser::Arithmetic_operatorContext::Mul() {
  return getToken(AtemParser::Mul, 0);
}

tree::TerminalNode* AtemParser::Arithmetic_operatorContext::OverflowingMul() {
  return getToken(AtemParser::OverflowingMul, 0);
}

tree::TerminalNode* AtemParser::Arithmetic_operatorContext::SaturatingMul() {
  return getToken(AtemParser::SaturatingMul, 0);
}

tree::TerminalNode* AtemParser::Arithmetic_operatorContext::Divide() {
  return getToken(AtemParser::Divide, 0);
}

tree::TerminalNode* AtemParser::Arithmetic_operatorContext::RemainderDivide() {
  return getToken(AtemParser::RemainderDivide, 0);
}

tree::TerminalNode* AtemParser::Arithmetic_operatorContext::Power() {
  return getToken(AtemParser::Power, 0);
}

tree::TerminalNode* AtemParser::Arithmetic_operatorContext::OverflowingPower() {
  return getToken(AtemParser::OverflowingPower, 0);
}

tree::TerminalNode* AtemParser::Arithmetic_operatorContext::SaturatingPower() {
  return getToken(AtemParser::SaturatingPower, 0);
}


size_t AtemParser::Arithmetic_operatorContext::getRuleIndex() const {
  return AtemParser::RuleArithmetic_operator;
}

void AtemParser::Arithmetic_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_operator(this);
}

void AtemParser::Arithmetic_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_operator(this);
}

AtemParser::Arithmetic_operatorContext* AtemParser::arithmetic_operator() {
  Arithmetic_operatorContext *_localctx = _tracker.createInstance<Arithmetic_operatorContext>(_ctx, getState());
  enterRule(_localctx, 370, AtemParser::RuleArithmetic_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1695);
    _la = _input->LA(1);
    if (!(((((_la - 151) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 151)) & 16383) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Negation_operatorContext ------------------------------------------------------------------

AtemParser::Negation_operatorContext::Negation_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Negation_operatorContext::Sub() {
  return getToken(AtemParser::Sub, 0);
}

tree::TerminalNode* AtemParser::Negation_operatorContext::OverflowingSub() {
  return getToken(AtemParser::OverflowingSub, 0);
}


size_t AtemParser::Negation_operatorContext::getRuleIndex() const {
  return AtemParser::RuleNegation_operator;
}

void AtemParser::Negation_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNegation_operator(this);
}

void AtemParser::Negation_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNegation_operator(this);
}

AtemParser::Negation_operatorContext* AtemParser::negation_operator() {
  Negation_operatorContext *_localctx = _tracker.createInstance<Negation_operatorContext>(_ctx, getState());
  enterRule(_localctx, 372, AtemParser::RuleNegation_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1697);
    _la = _input->LA(1);
    if (!(_la == AtemParser::Sub

    || _la == AtemParser::OverflowingSub)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_operatorContext ------------------------------------------------------------------

AtemParser::Assignment_operatorContext::Assignment_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::Assign() {
  return getToken(AtemParser::Assign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::AddAssign() {
  return getToken(AtemParser::AddAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::OverflowingAddAssign() {
  return getToken(AtemParser::OverflowingAddAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::SaturatingAddAssign() {
  return getToken(AtemParser::SaturatingAddAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::SubAssign() {
  return getToken(AtemParser::SubAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::OverflowingSubAssign() {
  return getToken(AtemParser::OverflowingSubAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::SaturatingSubAssign() {
  return getToken(AtemParser::SaturatingSubAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::MulAssign() {
  return getToken(AtemParser::MulAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::OverflowingMulAssign() {
  return getToken(AtemParser::OverflowingMulAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::SaturatingMulAssign() {
  return getToken(AtemParser::SaturatingMulAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::PowerAssign() {
  return getToken(AtemParser::PowerAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::OverflowingPowerAssign() {
  return getToken(AtemParser::OverflowingPowerAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::SaturatingPowerAssign() {
  return getToken(AtemParser::SaturatingPowerAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::DivideAssign() {
  return getToken(AtemParser::DivideAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::RemainderDivideAssign() {
  return getToken(AtemParser::RemainderDivideAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::BitLeftShiftAssign() {
  return getToken(AtemParser::BitLeftShiftAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::SaturatingBitLeftShiftAssign() {
  return getToken(AtemParser::SaturatingBitLeftShiftAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::BitRightShiftAssign() {
  return getToken(AtemParser::BitRightShiftAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::BitAndAssign() {
  return getToken(AtemParser::BitAndAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::BitOrAssign() {
  return getToken(AtemParser::BitOrAssign, 0);
}

tree::TerminalNode* AtemParser::Assignment_operatorContext::BitNotAssign() {
  return getToken(AtemParser::BitNotAssign, 0);
}


size_t AtemParser::Assignment_operatorContext::getRuleIndex() const {
  return AtemParser::RuleAssignment_operator;
}

void AtemParser::Assignment_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_operator(this);
}

void AtemParser::Assignment_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_operator(this);
}

AtemParser::Assignment_operatorContext* AtemParser::assignment_operator() {
  Assignment_operatorContext *_localctx = _tracker.createInstance<Assignment_operatorContext>(_ctx, getState());
  enterRule(_localctx, 374, AtemParser::RuleAssignment_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1699);
    _la = _input->LA(1);
    if (!(((((_la - 165) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 165)) & 2097151) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comparison_operatorContext ------------------------------------------------------------------

AtemParser::Comparison_operatorContext::Comparison_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Comparison_operatorContext::GreaterThan() {
  return getToken(AtemParser::GreaterThan, 0);
}

tree::TerminalNode* AtemParser::Comparison_operatorContext::LessThan() {
  return getToken(AtemParser::LessThan, 0);
}

tree::TerminalNode* AtemParser::Comparison_operatorContext::GreaterThanOrEqual() {
  return getToken(AtemParser::GreaterThanOrEqual, 0);
}

tree::TerminalNode* AtemParser::Comparison_operatorContext::LessThanOrEqual() {
  return getToken(AtemParser::LessThanOrEqual, 0);
}

tree::TerminalNode* AtemParser::Comparison_operatorContext::Equal() {
  return getToken(AtemParser::Equal, 0);
}

tree::TerminalNode* AtemParser::Comparison_operatorContext::NotEqual() {
  return getToken(AtemParser::NotEqual, 0);
}

tree::TerminalNode* AtemParser::Comparison_operatorContext::ThreeWayComparison() {
  return getToken(AtemParser::ThreeWayComparison, 0);
}


size_t AtemParser::Comparison_operatorContext::getRuleIndex() const {
  return AtemParser::RuleComparison_operator;
}

void AtemParser::Comparison_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison_operator(this);
}

void AtemParser::Comparison_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison_operator(this);
}

AtemParser::Comparison_operatorContext* AtemParser::comparison_operator() {
  Comparison_operatorContext *_localctx = _tracker.createInstance<Comparison_operatorContext>(_ctx, getState());
  enterRule(_localctx, 376, AtemParser::RuleComparison_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1701);
    _la = _input->LA(1);
    if (!(((((_la - 186) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 186)) & 127) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_boolean_operatorContext ------------------------------------------------------------------

AtemParser::Binary_boolean_operatorContext::Binary_boolean_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Binary_boolean_operatorContext::KeywordAnd() {
  return getToken(AtemParser::KeywordAnd, 0);
}

tree::TerminalNode* AtemParser::Binary_boolean_operatorContext::KeywordOr() {
  return getToken(AtemParser::KeywordOr, 0);
}


size_t AtemParser::Binary_boolean_operatorContext::getRuleIndex() const {
  return AtemParser::RuleBinary_boolean_operator;
}

void AtemParser::Binary_boolean_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_boolean_operator(this);
}

void AtemParser::Binary_boolean_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_boolean_operator(this);
}

AtemParser::Binary_boolean_operatorContext* AtemParser::binary_boolean_operator() {
  Binary_boolean_operatorContext *_localctx = _tracker.createInstance<Binary_boolean_operatorContext>(_ctx, getState());
  enterRule(_localctx, 378, AtemParser::RuleBinary_boolean_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1703);
    _la = _input->LA(1);
    if (!(_la == AtemParser::KeywordAnd || _la == AtemParser::KeywordOr)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unary_boolean_operatorContext ------------------------------------------------------------------

AtemParser::Unary_boolean_operatorContext::Unary_boolean_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Unary_boolean_operatorContext::KeywordNot() {
  return getToken(AtemParser::KeywordNot, 0);
}


size_t AtemParser::Unary_boolean_operatorContext::getRuleIndex() const {
  return AtemParser::RuleUnary_boolean_operator;
}

void AtemParser::Unary_boolean_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_boolean_operator(this);
}

void AtemParser::Unary_boolean_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_boolean_operator(this);
}

AtemParser::Unary_boolean_operatorContext* AtemParser::unary_boolean_operator() {
  Unary_boolean_operatorContext *_localctx = _tracker.createInstance<Unary_boolean_operatorContext>(_ctx, getState());
  enterRule(_localctx, 380, AtemParser::RuleUnary_boolean_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1705);
    match(AtemParser::KeywordNot);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_bit_operatorContext ------------------------------------------------------------------

AtemParser::Binary_bit_operatorContext::Binary_bit_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Binary_bit_operatorContext::BitAnd() {
  return getToken(AtemParser::BitAnd, 0);
}

tree::TerminalNode* AtemParser::Binary_bit_operatorContext::BitOr() {
  return getToken(AtemParser::BitOr, 0);
}

tree::TerminalNode* AtemParser::Binary_bit_operatorContext::BitLeftShift() {
  return getToken(AtemParser::BitLeftShift, 0);
}

tree::TerminalNode* AtemParser::Binary_bit_operatorContext::SaturatingBitLeftShift() {
  return getToken(AtemParser::SaturatingBitLeftShift, 0);
}

tree::TerminalNode* AtemParser::Binary_bit_operatorContext::BitRightShift() {
  return getToken(AtemParser::BitRightShift, 0);
}


size_t AtemParser::Binary_bit_operatorContext::getRuleIndex() const {
  return AtemParser::RuleBinary_bit_operator;
}

void AtemParser::Binary_bit_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_bit_operator(this);
}

void AtemParser::Binary_bit_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_bit_operator(this);
}

AtemParser::Binary_bit_operatorContext* AtemParser::binary_bit_operator() {
  Binary_bit_operatorContext *_localctx = _tracker.createInstance<Binary_bit_operatorContext>(_ctx, getState());
  enterRule(_localctx, 382, AtemParser::RuleBinary_bit_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1707);
    _la = _input->LA(1);
    if (!(((((_la - 194) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 194)) & 59) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unary_bit_operatorContext ------------------------------------------------------------------

AtemParser::Unary_bit_operatorContext::Unary_bit_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Unary_bit_operatorContext::BitNot() {
  return getToken(AtemParser::BitNot, 0);
}

tree::TerminalNode* AtemParser::Unary_bit_operatorContext::BitXor() {
  return getToken(AtemParser::BitXor, 0);
}


size_t AtemParser::Unary_bit_operatorContext::getRuleIndex() const {
  return AtemParser::RuleUnary_bit_operator;
}

void AtemParser::Unary_bit_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_bit_operator(this);
}

void AtemParser::Unary_bit_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_bit_operator(this);
}

AtemParser::Unary_bit_operatorContext* AtemParser::unary_bit_operator() {
  Unary_bit_operatorContext *_localctx = _tracker.createInstance<Unary_bit_operatorContext>(_ctx, getState());
  enterRule(_localctx, 384, AtemParser::RuleUnary_bit_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1709);
    _la = _input->LA(1);
    if (!(_la == AtemParser::BitNot

    || _la == AtemParser::BitXor)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pointer_operatorContext ------------------------------------------------------------------

AtemParser::Pointer_operatorContext::Pointer_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Pointer_operatorContext::PointerType() {
  return getToken(AtemParser::PointerType, 0);
}

tree::TerminalNode* AtemParser::Pointer_operatorContext::PointerDeref() {
  return getToken(AtemParser::PointerDeref, 0);
}

tree::TerminalNode* AtemParser::Pointer_operatorContext::ObjectAddress() {
  return getToken(AtemParser::ObjectAddress, 0);
}


size_t AtemParser::Pointer_operatorContext::getRuleIndex() const {
  return AtemParser::RulePointer_operator;
}

void AtemParser::Pointer_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointer_operator(this);
}

void AtemParser::Pointer_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointer_operator(this);
}

AtemParser::Pointer_operatorContext* AtemParser::pointer_operator() {
  Pointer_operatorContext *_localctx = _tracker.createInstance<Pointer_operatorContext>(_ctx, getState());
  enterRule(_localctx, 386, AtemParser::RulePointer_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1711);
    _la = _input->LA(1);
    if (!(((((_la - 200) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 200)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reflect_operatorContext ------------------------------------------------------------------

AtemParser::Reflect_operatorContext::Reflect_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Reflect_operatorContext::Reflect() {
  return getToken(AtemParser::Reflect, 0);
}

tree::TerminalNode* AtemParser::Reflect_operatorContext::Reify() {
  return getToken(AtemParser::Reify, 0);
}


size_t AtemParser::Reflect_operatorContext::getRuleIndex() const {
  return AtemParser::RuleReflect_operator;
}

void AtemParser::Reflect_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReflect_operator(this);
}

void AtemParser::Reflect_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReflect_operator(this);
}

AtemParser::Reflect_operatorContext* AtemParser::reflect_operator() {
  Reflect_operatorContext *_localctx = _tracker.createInstance<Reflect_operatorContext>(_ctx, getState());
  enterRule(_localctx, 388, AtemParser::RuleReflect_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1713);
    _la = _input->LA(1);
    if (!(_la == AtemParser::Reflect

    || _la == AtemParser::Reify)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Range_operatorContext ------------------------------------------------------------------

AtemParser::Range_operatorContext::Range_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Range_operatorContext::ClosedRange() {
  return getToken(AtemParser::ClosedRange, 0);
}

tree::TerminalNode* AtemParser::Range_operatorContext::RightOpenRange() {
  return getToken(AtemParser::RightOpenRange, 0);
}

tree::TerminalNode* AtemParser::Range_operatorContext::LeftOpenRange() {
  return getToken(AtemParser::LeftOpenRange, 0);
}

tree::TerminalNode* AtemParser::Range_operatorContext::OpenedRange() {
  return getToken(AtemParser::OpenedRange, 0);
}


size_t AtemParser::Range_operatorContext::getRuleIndex() const {
  return AtemParser::RuleRange_operator;
}

void AtemParser::Range_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRange_operator(this);
}

void AtemParser::Range_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRange_operator(this);
}

AtemParser::Range_operatorContext* AtemParser::range_operator() {
  Range_operatorContext *_localctx = _tracker.createInstance<Range_operatorContext>(_ctx, getState());
  enterRule(_localctx, 390, AtemParser::RuleRange_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1715);
    _la = _input->LA(1);
    if (!(((((_la - 205) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 205)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_optional_unwrapping_operatorContext ------------------------------------------------------------------

AtemParser::Binary_optional_unwrapping_operatorContext::Binary_optional_unwrapping_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Binary_optional_unwrapping_operatorContext::DefaultUnwrapping() {
  return getToken(AtemParser::DefaultUnwrapping, 0);
}


size_t AtemParser::Binary_optional_unwrapping_operatorContext::getRuleIndex() const {
  return AtemParser::RuleBinary_optional_unwrapping_operator;
}

void AtemParser::Binary_optional_unwrapping_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_optional_unwrapping_operator(this);
}

void AtemParser::Binary_optional_unwrapping_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_optional_unwrapping_operator(this);
}

AtemParser::Binary_optional_unwrapping_operatorContext* AtemParser::binary_optional_unwrapping_operator() {
  Binary_optional_unwrapping_operatorContext *_localctx = _tracker.createInstance<Binary_optional_unwrapping_operatorContext>(_ctx, getState());
  enterRule(_localctx, 392, AtemParser::RuleBinary_optional_unwrapping_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1717);
    match(AtemParser::DefaultUnwrapping);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unary_optional_unwrapping_operatorContext ------------------------------------------------------------------

AtemParser::Unary_optional_unwrapping_operatorContext::Unary_optional_unwrapping_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Unary_optional_unwrapping_operatorContext::Question() {
  return getToken(AtemParser::Question, 0);
}

tree::TerminalNode* AtemParser::Unary_optional_unwrapping_operatorContext::Bang() {
  return getToken(AtemParser::Bang, 0);
}


size_t AtemParser::Unary_optional_unwrapping_operatorContext::getRuleIndex() const {
  return AtemParser::RuleUnary_optional_unwrapping_operator;
}

void AtemParser::Unary_optional_unwrapping_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_optional_unwrapping_operator(this);
}

void AtemParser::Unary_optional_unwrapping_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_optional_unwrapping_operator(this);
}

AtemParser::Unary_optional_unwrapping_operatorContext* AtemParser::unary_optional_unwrapping_operator() {
  Unary_optional_unwrapping_operatorContext *_localctx = _tracker.createInstance<Unary_optional_unwrapping_operatorContext>(_ctx, getState());
  enterRule(_localctx, 394, AtemParser::RuleUnary_optional_unwrapping_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1719);
    _la = _input->LA(1);
    if (!(_la == AtemParser::Question

    || _la == AtemParser::Bang)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arrow_operatorContext ------------------------------------------------------------------

AtemParser::Arrow_operatorContext::Arrow_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Arrow_operatorContext::Arrow() {
  return getToken(AtemParser::Arrow, 0);
}


size_t AtemParser::Arrow_operatorContext::getRuleIndex() const {
  return AtemParser::RuleArrow_operator;
}

void AtemParser::Arrow_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrow_operator(this);
}

void AtemParser::Arrow_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrow_operator(this);
}

AtemParser::Arrow_operatorContext* AtemParser::arrow_operator() {
  Arrow_operatorContext *_localctx = _tracker.createInstance<Arrow_operatorContext>(_ctx, getState());
  enterRule(_localctx, 396, AtemParser::RuleArrow_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1721);
    match(AtemParser::Arrow);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Try_operatorContext ------------------------------------------------------------------

AtemParser::Try_operatorContext::Try_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Try_operatorContext::KeywordTry() {
  return getToken(AtemParser::KeywordTry, 0);
}

tree::TerminalNode* AtemParser::Try_operatorContext::Question() {
  return getToken(AtemParser::Question, 0);
}

tree::TerminalNode* AtemParser::Try_operatorContext::Bang() {
  return getToken(AtemParser::Bang, 0);
}


size_t AtemParser::Try_operatorContext::getRuleIndex() const {
  return AtemParser::RuleTry_operator;
}

void AtemParser::Try_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry_operator(this);
}

void AtemParser::Try_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry_operator(this);
}

AtemParser::Try_operatorContext* AtemParser::try_operator() {
  Try_operatorContext *_localctx = _tracker.createInstance<Try_operatorContext>(_ctx, getState());
  enterRule(_localctx, 398, AtemParser::RuleTry_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1723);
    match(AtemParser::KeywordTry);
    setState(1725);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
      setState(1724);
      _la = _input->LA(1);
      if (!(_la == AtemParser::Question

      || _la == AtemParser::Bang)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_casting_operatorContext ------------------------------------------------------------------

AtemParser::Type_casting_operatorContext::Type_casting_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Type_casting_operatorContext::KeywordIs() {
  return getToken(AtemParser::KeywordIs, 0);
}

tree::TerminalNode* AtemParser::Type_casting_operatorContext::KeywordAs() {
  return getToken(AtemParser::KeywordAs, 0);
}

tree::TerminalNode* AtemParser::Type_casting_operatorContext::Question() {
  return getToken(AtemParser::Question, 0);
}

tree::TerminalNode* AtemParser::Type_casting_operatorContext::Bang() {
  return getToken(AtemParser::Bang, 0);
}


size_t AtemParser::Type_casting_operatorContext::getRuleIndex() const {
  return AtemParser::RuleType_casting_operator;
}

void AtemParser::Type_casting_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_casting_operator(this);
}

void AtemParser::Type_casting_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_casting_operator(this);
}

AtemParser::Type_casting_operatorContext* AtemParser::type_casting_operator() {
  Type_casting_operatorContext *_localctx = _tracker.createInstance<Type_casting_operatorContext>(_ctx, getState());
  enterRule(_localctx, 400, AtemParser::RuleType_casting_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1732);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordIs: {
        setState(1727);
        match(AtemParser::KeywordIs);
        break;
      }

      case AtemParser::KeywordAs: {
        setState(1728);
        match(AtemParser::KeywordAs);
        setState(1730);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
        case 1: {
          setState(1729);
          _la = _input->LA(1);
          if (!(_la == AtemParser::Question

          || _la == AtemParser::Bang)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Await_operatorContext ------------------------------------------------------------------

AtemParser::Await_operatorContext::Await_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Await_operatorContext::KeywordAwait() {
  return getToken(AtemParser::KeywordAwait, 0);
}


size_t AtemParser::Await_operatorContext::getRuleIndex() const {
  return AtemParser::RuleAwait_operator;
}

void AtemParser::Await_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAwait_operator(this);
}

void AtemParser::Await_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAwait_operator(this);
}

AtemParser::Await_operatorContext* AtemParser::await_operator() {
  Await_operatorContext *_localctx = _tracker.createInstance<Await_operatorContext>(_ctx, getState());
  enterRule(_localctx, 402, AtemParser::RuleAwait_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1734);
    match(AtemParser::KeywordAwait);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Async_operatorContext ------------------------------------------------------------------

AtemParser::Async_operatorContext::Async_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Async_operatorContext::KeywordAsync() {
  return getToken(AtemParser::KeywordAsync, 0);
}


size_t AtemParser::Async_operatorContext::getRuleIndex() const {
  return AtemParser::RuleAsync_operator;
}

void AtemParser::Async_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsync_operator(this);
}

void AtemParser::Async_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsync_operator(this);
}

AtemParser::Async_operatorContext* AtemParser::async_operator() {
  Async_operatorContext *_localctx = _tracker.createInstance<Async_operatorContext>(_ctx, getState());
  enterRule(_localctx, 404, AtemParser::RuleAsync_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1736);
    match(AtemParser::KeywordAsync);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pipeline_operatorContext ------------------------------------------------------------------

AtemParser::Pipeline_operatorContext::Pipeline_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Pipeline_operatorContext::PlaceholderPipeline() {
  return getToken(AtemParser::PlaceholderPipeline, 0);
}

tree::TerminalNode* AtemParser::Pipeline_operatorContext::LeftThreadingPipeline() {
  return getToken(AtemParser::LeftThreadingPipeline, 0);
}


size_t AtemParser::Pipeline_operatorContext::getRuleIndex() const {
  return AtemParser::RulePipeline_operator;
}

void AtemParser::Pipeline_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPipeline_operator(this);
}

void AtemParser::Pipeline_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPipeline_operator(this);
}

AtemParser::Pipeline_operatorContext* AtemParser::pipeline_operator() {
  Pipeline_operatorContext *_localctx = _tracker.createInstance<Pipeline_operatorContext>(_ctx, getState());
  enterRule(_localctx, 406, AtemParser::RulePipeline_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1738);
    _la = _input->LA(1);
    if (!(_la == AtemParser::PlaceholderPipeline

    || _la == AtemParser::LeftThreadingPipeline)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_index_operatorContext ------------------------------------------------------------------

AtemParser::Array_index_operatorContext::Array_index_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Array_index_operatorContext::LeftSquare() {
  return getToken(AtemParser::LeftSquare, 0);
}

std::vector<AtemParser::ExpressionContext *> AtemParser::Array_index_operatorContext::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Array_index_operatorContext::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

tree::TerminalNode* AtemParser::Array_index_operatorContext::RightSquare() {
  return getToken(AtemParser::RightSquare, 0);
}

std::vector<tree::TerminalNode *> AtemParser::Array_index_operatorContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Array_index_operatorContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}


size_t AtemParser::Array_index_operatorContext::getRuleIndex() const {
  return AtemParser::RuleArray_index_operator;
}

void AtemParser::Array_index_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_index_operator(this);
}

void AtemParser::Array_index_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_index_operator(this);
}

AtemParser::Array_index_operatorContext* AtemParser::array_index_operator() {
  Array_index_operatorContext *_localctx = _tracker.createInstance<Array_index_operatorContext>(_ctx, getState());
  enterRule(_localctx, 408, AtemParser::RuleArray_index_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1740);
    match(AtemParser::LeftSquare);
    setState(1741);
    expression(0);
    setState(1746);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1742);
        match(AtemParser::Comma);
        setState(1743);
        expression(0); 
      }
      setState(1748);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx);
    }
    setState(1750);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Comma) {
      setState(1749);
      match(AtemParser::Comma);
    }
    setState(1752);
    match(AtemParser::RightSquare);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

AtemParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t AtemParser::ExpressionContext::getRuleIndex() const {
  return AtemParser::RuleExpression;
}

void AtemParser::ExpressionContext::copyFrom(ExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Using_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Using_expression_Context::KeywordUsing() {
  return getToken(AtemParser::KeywordUsing, 0);
}

AtemParser::ExpressionContext* AtemParser::Using_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Using_expression_Context::Using_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Using_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsing_expression_(this);
}
void AtemParser::Using_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsing_expression_(this);
}
//----------------- For_expression_Context ------------------------------------------------------------------

AtemParser::For_expressionContext* AtemParser::For_expression_Context::for_expression() {
  return getRuleContext<AtemParser::For_expressionContext>(0);
}

AtemParser::For_expression_Context::For_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::For_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_expression_(this);
}
void AtemParser::For_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_expression_(this);
}
//----------------- Continue_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Continue_expression_Context::KeywordContinue() {
  return getToken(AtemParser::KeywordContinue, 0);
}

AtemParser::Code_block_nameContext* AtemParser::Continue_expression_Context::code_block_name() {
  return getRuleContext<AtemParser::Code_block_nameContext>(0);
}

AtemParser::Continue_expression_Context::Continue_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Continue_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinue_expression_(this);
}
void AtemParser::Continue_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinue_expression_(this);
}
//----------------- Catch_expression_Context ------------------------------------------------------------------

std::vector<AtemParser::ExpressionContext *> AtemParser::Catch_expression_Context::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Catch_expression_Context::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

tree::TerminalNode* AtemParser::Catch_expression_Context::KeywordCatch() {
  return getToken(AtemParser::KeywordCatch, 0);
}

std::vector<AtemParser::PatternContext *> AtemParser::Catch_expression_Context::pattern() {
  return getRuleContexts<AtemParser::PatternContext>();
}

AtemParser::PatternContext* AtemParser::Catch_expression_Context::pattern(size_t i) {
  return getRuleContext<AtemParser::PatternContext>(i);
}

tree::TerminalNode* AtemParser::Catch_expression_Context::KeywordThen() {
  return getToken(AtemParser::KeywordThen, 0);
}

AtemParser::Code_blockContext* AtemParser::Catch_expression_Context::code_block() {
  return getRuleContext<AtemParser::Code_blockContext>(0);
}

std::vector<tree::TerminalNode *> AtemParser::Catch_expression_Context::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Catch_expression_Context::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}

AtemParser::Require_clauseContext* AtemParser::Catch_expression_Context::require_clause() {
  return getRuleContext<AtemParser::Require_clauseContext>(0);
}

AtemParser::Catch_expression_Context::Catch_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Catch_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatch_expression_(this);
}
void AtemParser::Catch_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatch_expression_(this);
}
//----------------- Throw_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Throw_expression_Context::KeywordThrow() {
  return getToken(AtemParser::KeywordThrow, 0);
}

AtemParser::ExpressionContext* AtemParser::Throw_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Throw_expression_Context::Throw_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Throw_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrow_expression_(this);
}
void AtemParser::Throw_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrow_expression_(this);
}
//----------------- Binary_optional_unwrapping_expression_Context ------------------------------------------------------------------

std::vector<AtemParser::ExpressionContext *> AtemParser::Binary_optional_unwrapping_expression_Context::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Binary_optional_unwrapping_expression_Context::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

AtemParser::Binary_optional_unwrapping_operatorContext* AtemParser::Binary_optional_unwrapping_expression_Context::binary_optional_unwrapping_operator() {
  return getRuleContext<AtemParser::Binary_optional_unwrapping_operatorContext>(0);
}

AtemParser::Binary_optional_unwrapping_expression_Context::Binary_optional_unwrapping_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Binary_optional_unwrapping_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_optional_unwrapping_expression_(this);
}
void AtemParser::Binary_optional_unwrapping_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_optional_unwrapping_expression_(this);
}
//----------------- Declaretion_expression_Context ------------------------------------------------------------------

AtemParser::Declaration_expressionContext* AtemParser::Declaretion_expression_Context::declaration_expression() {
  return getRuleContext<AtemParser::Declaration_expressionContext>(0);
}

AtemParser::Declaretion_expression_Context::Declaretion_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Declaretion_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaretion_expression_(this);
}
void AtemParser::Declaretion_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaretion_expression_(this);
}
//----------------- Import_expression_Context ------------------------------------------------------------------

AtemParser::Import_expressionContext* AtemParser::Import_expression_Context::import_expression() {
  return getRuleContext<AtemParser::Import_expressionContext>(0);
}

AtemParser::Import_expression_Context::Import_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Import_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_expression_(this);
}
void AtemParser::Import_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_expression_(this);
}
//----------------- Comma_expression_Context ------------------------------------------------------------------

std::vector<AtemParser::ExpressionContext *> AtemParser::Comma_expression_Context::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Comma_expression_Context::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

tree::TerminalNode* AtemParser::Comma_expression_Context::Comma() {
  return getToken(AtemParser::Comma, 0);
}

AtemParser::Comma_expression_Context::Comma_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Comma_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComma_expression_(this);
}
void AtemParser::Comma_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComma_expression_(this);
}
//----------------- Literal_expression_Context ------------------------------------------------------------------

AtemParser::Literal_expressionContext* AtemParser::Literal_expression_Context::literal_expression() {
  return getRuleContext<AtemParser::Literal_expressionContext>(0);
}

AtemParser::Literal_expression_Context::Literal_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Literal_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_expression_(this);
}
void AtemParser::Literal_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_expression_(this);
}
//----------------- Self_expression_Context ------------------------------------------------------------------

AtemParser::ExpressionContext* AtemParser::Self_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

tree::TerminalNode* AtemParser::Self_expression_Context::Dot() {
  return getToken(AtemParser::Dot, 0);
}

tree::TerminalNode* AtemParser::Self_expression_Context::KeywordSelf() {
  return getToken(AtemParser::KeywordSelf, 0);
}

AtemParser::Self_expression_Context::Self_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Self_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelf_expression_(this);
}
void AtemParser::Self_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelf_expression_(this);
}
//----------------- Function_call_expresison_Context ------------------------------------------------------------------

AtemParser::ExpressionContext* AtemParser::Function_call_expresison_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Function_call_operatorContext* AtemParser::Function_call_expresison_Context::function_call_operator() {
  return getRuleContext<AtemParser::Function_call_operatorContext>(0);
}

AtemParser::Function_call_expresison_Context::Function_call_expresison_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Function_call_expresison_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_call_expresison_(this);
}
void AtemParser::Function_call_expresison_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_call_expresison_(this);
}
//----------------- Comptime_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Comptime_expression_Context::KeywordComptime() {
  return getToken(AtemParser::KeywordComptime, 0);
}

AtemParser::ExpressionContext* AtemParser::Comptime_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Comptime_expression_Context::Comptime_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Comptime_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComptime_expression_(this);
}
void AtemParser::Comptime_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComptime_expression_(this);
}
//----------------- Unary_optional_unwrapping_expression_Context ------------------------------------------------------------------

AtemParser::ExpressionContext* AtemParser::Unary_optional_unwrapping_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Unary_optional_unwrapping_operatorContext* AtemParser::Unary_optional_unwrapping_expression_Context::unary_optional_unwrapping_operator() {
  return getRuleContext<AtemParser::Unary_optional_unwrapping_operatorContext>(0);
}

AtemParser::Unary_optional_unwrapping_expression_Context::Unary_optional_unwrapping_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Unary_optional_unwrapping_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_optional_unwrapping_expression_(this);
}
void AtemParser::Unary_optional_unwrapping_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_optional_unwrapping_expression_(this);
}
//----------------- Unreachable_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Unreachable_expression_Context::KeywordUnreachable() {
  return getToken(AtemParser::KeywordUnreachable, 0);
}

AtemParser::Unreachable_expression_Context::Unreachable_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Unreachable_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnreachable_expression_(this);
}
void AtemParser::Unreachable_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnreachable_expression_(this);
}
//----------------- Array_index_expression_Context ------------------------------------------------------------------

AtemParser::ExpressionContext* AtemParser::Array_index_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Array_index_operatorContext* AtemParser::Array_index_expression_Context::array_index_operator() {
  return getRuleContext<AtemParser::Array_index_operatorContext>(0);
}

AtemParser::Array_index_expression_Context::Array_index_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Array_index_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_index_expression_(this);
}
void AtemParser::Array_index_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_index_expression_(this);
}
//----------------- Derefence_expression_Context ------------------------------------------------------------------

AtemParser::ExpressionContext* AtemParser::Derefence_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

tree::TerminalNode* AtemParser::Derefence_expression_Context::PointerDeref() {
  return getToken(AtemParser::PointerDeref, 0);
}

AtemParser::Derefence_expression_Context::Derefence_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Derefence_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDerefence_expression_(this);
}
void AtemParser::Derefence_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDerefence_expression_(this);
}
//----------------- With_expression_Context ------------------------------------------------------------------

std::vector<AtemParser::ExpressionContext *> AtemParser::With_expression_Context::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::With_expression_Context::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

tree::TerminalNode* AtemParser::With_expression_Context::KeywordWith() {
  return getToken(AtemParser::KeywordWith, 0);
}

tree::TerminalNode* AtemParser::With_expression_Context::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

tree::TerminalNode* AtemParser::With_expression_Context::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}

AtemParser::With_expression_Context::With_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::With_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWith_expression_(this);
}
void AtemParser::With_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWith_expression_(this);
}
//----------------- Type_expression_Context ------------------------------------------------------------------

AtemParser::Type_expressionContext* AtemParser::Type_expression_Context::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

AtemParser::Type_expression_Context::Type_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Type_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_expression_(this);
}
void AtemParser::Type_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_expression_(this);
}
//----------------- If_expression_Context ------------------------------------------------------------------

AtemParser::If_expressionContext* AtemParser::If_expression_Context::if_expression() {
  return getRuleContext<AtemParser::If_expressionContext>(0);
}

AtemParser::If_expression_Context::If_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::If_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_expression_(this);
}
void AtemParser::If_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_expression_(this);
}
//----------------- Match_expression_Context ------------------------------------------------------------------

AtemParser::ExpressionContext* AtemParser::Match_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

tree::TerminalNode* AtemParser::Match_expression_Context::KeywordMatch() {
  return getToken(AtemParser::KeywordMatch, 0);
}

std::vector<AtemParser::Match_caseContext *> AtemParser::Match_expression_Context::match_case() {
  return getRuleContexts<AtemParser::Match_caseContext>();
}

AtemParser::Match_caseContext* AtemParser::Match_expression_Context::match_case(size_t i) {
  return getRuleContext<AtemParser::Match_caseContext>(i);
}

tree::TerminalNode* AtemParser::Match_expression_Context::KeywordElse() {
  return getToken(AtemParser::KeywordElse, 0);
}

AtemParser::Expression_or_blockContext* AtemParser::Match_expression_Context::expression_or_block() {
  return getRuleContext<AtemParser::Expression_or_blockContext>(0);
}

tree::TerminalNode* AtemParser::Match_expression_Context::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

tree::TerminalNode* AtemParser::Match_expression_Context::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}

AtemParser::Match_expression_Context::Match_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Match_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMatch_expression_(this);
}
void AtemParser::Match_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMatch_expression_(this);
}
//----------------- Anonymous_deinit_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Anonymous_deinit_expression_Context::Dot() {
  return getToken(AtemParser::Dot, 0);
}

tree::TerminalNode* AtemParser::Anonymous_deinit_expression_Context::KeywordDeinit() {
  return getToken(AtemParser::KeywordDeinit, 0);
}

AtemParser::Anonymous_deinit_expression_Context::Anonymous_deinit_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Anonymous_deinit_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymous_deinit_expression_(this);
}
void AtemParser::Anonymous_deinit_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymous_deinit_expression_(this);
}
//----------------- Object_address_expression_Context ------------------------------------------------------------------

AtemParser::ExpressionContext* AtemParser::Object_address_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

tree::TerminalNode* AtemParser::Object_address_expression_Context::ObjectAddress() {
  return getToken(AtemParser::ObjectAddress, 0);
}

AtemParser::Object_address_expression_Context::Object_address_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Object_address_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_address_expression_(this);
}
void AtemParser::Object_address_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_address_expression_(this);
}
//----------------- Bit_expression_Context ------------------------------------------------------------------

AtemParser::Unary_bit_operatorContext* AtemParser::Bit_expression_Context::unary_bit_operator() {
  return getRuleContext<AtemParser::Unary_bit_operatorContext>(0);
}

std::vector<AtemParser::ExpressionContext *> AtemParser::Bit_expression_Context::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Bit_expression_Context::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

AtemParser::Binary_bit_operatorContext* AtemParser::Bit_expression_Context::binary_bit_operator() {
  return getRuleContext<AtemParser::Binary_bit_operatorContext>(0);
}

AtemParser::Bit_expression_Context::Bit_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Bit_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBit_expression_(this);
}
void AtemParser::Bit_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBit_expression_(this);
}
//----------------- Negation_expression_Context ------------------------------------------------------------------

AtemParser::Negation_operatorContext* AtemParser::Negation_expression_Context::negation_operator() {
  return getRuleContext<AtemParser::Negation_operatorContext>(0);
}

AtemParser::ExpressionContext* AtemParser::Negation_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Negation_expression_Context::Negation_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Negation_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNegation_expression_(this);
}
void AtemParser::Negation_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNegation_expression_(this);
}
//----------------- Placeholder_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Placeholder_expression_Context::RemainderDivide() {
  return getToken(AtemParser::RemainderDivide, 0);
}

AtemParser::ExpressionContext* AtemParser::Placeholder_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Placeholder_expression_Context::Placeholder_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Placeholder_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlaceholder_expression_(this);
}
void AtemParser::Placeholder_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlaceholder_expression_(this);
}
//----------------- Assignment_expression_Context ------------------------------------------------------------------

std::vector<AtemParser::ExpressionContext *> AtemParser::Assignment_expression_Context::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Assignment_expression_Context::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

AtemParser::Assignment_operatorContext* AtemParser::Assignment_expression_Context::assignment_operator() {
  return getRuleContext<AtemParser::Assignment_operatorContext>(0);
}

AtemParser::Assignment_expression_Context::Assignment_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Assignment_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_expression_(this);
}
void AtemParser::Assignment_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_expression_(this);
}
//----------------- Field_expression_Context ------------------------------------------------------------------

AtemParser::ExpressionContext* AtemParser::Field_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

tree::TerminalNode* AtemParser::Field_expression_Context::Dot() {
  return getToken(AtemParser::Dot, 0);
}

AtemParser::Path_expression_elementContext* AtemParser::Field_expression_Context::path_expression_element() {
  return getRuleContext<AtemParser::Path_expression_elementContext>(0);
}

AtemParser::Field_expression_Context::Field_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Field_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterField_expression_(this);
}
void AtemParser::Field_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitField_expression_(this);
}
//----------------- Repeat_while_expression_Context ------------------------------------------------------------------

AtemParser::Repeat_while_expressionContext* AtemParser::Repeat_while_expression_Context::repeat_while_expression() {
  return getRuleContext<AtemParser::Repeat_while_expressionContext>(0);
}

AtemParser::Repeat_while_expression_Context::Repeat_while_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Repeat_while_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRepeat_while_expression_(this);
}
void AtemParser::Repeat_while_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRepeat_while_expression_(this);
}
//----------------- Comparison_expression_Context ------------------------------------------------------------------

std::vector<AtemParser::ExpressionContext *> AtemParser::Comparison_expression_Context::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Comparison_expression_Context::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

AtemParser::Comparison_operatorContext* AtemParser::Comparison_expression_Context::comparison_operator() {
  return getRuleContext<AtemParser::Comparison_operatorContext>(0);
}

AtemParser::Comparison_expression_Context::Comparison_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Comparison_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison_expression_(this);
}
void AtemParser::Comparison_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison_expression_(this);
}
//----------------- Break_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Break_expression_Context::KeywordBreak() {
  return getToken(AtemParser::KeywordBreak, 0);
}

AtemParser::Code_block_nameContext* AtemParser::Break_expression_Context::code_block_name() {
  return getRuleContext<AtemParser::Code_block_nameContext>(0);
}

tree::TerminalNode* AtemParser::Break_expression_Context::KeywordWith() {
  return getToken(AtemParser::KeywordWith, 0);
}

AtemParser::ExpressionContext* AtemParser::Break_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Break_expression_Context::Break_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Break_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreak_expression_(this);
}
void AtemParser::Break_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreak_expression_(this);
}
//----------------- Path_expression_Context ------------------------------------------------------------------

AtemParser::Path_expressionContext* AtemParser::Path_expression_Context::path_expression() {
  return getRuleContext<AtemParser::Path_expressionContext>(0);
}

AtemParser::Path_expression_Context::Path_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Path_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPath_expression_(this);
}
void AtemParser::Path_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPath_expression_(this);
}
//----------------- Reflection_expression_Context ------------------------------------------------------------------

AtemParser::Reflect_operatorContext* AtemParser::Reflection_expression_Context::reflect_operator() {
  return getRuleContext<AtemParser::Reflect_operatorContext>(0);
}

AtemParser::ExpressionContext* AtemParser::Reflection_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Reflection_expression_Context::Reflection_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Reflection_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReflection_expression_(this);
}
void AtemParser::Reflection_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReflection_expression_(this);
}
//----------------- Try_expression_Context ------------------------------------------------------------------

AtemParser::Try_operatorContext* AtemParser::Try_expression_Context::try_operator() {
  return getRuleContext<AtemParser::Try_operatorContext>(0);
}

AtemParser::ExpressionContext* AtemParser::Try_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Try_expression_Context::Try_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Try_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry_expression_(this);
}
void AtemParser::Try_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry_expression_(this);
}
//----------------- Boolean_expression_Context ------------------------------------------------------------------

AtemParser::Unary_boolean_operatorContext* AtemParser::Boolean_expression_Context::unary_boolean_operator() {
  return getRuleContext<AtemParser::Unary_boolean_operatorContext>(0);
}

std::vector<AtemParser::ExpressionContext *> AtemParser::Boolean_expression_Context::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Boolean_expression_Context::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

AtemParser::Binary_boolean_operatorContext* AtemParser::Boolean_expression_Context::binary_boolean_operator() {
  return getRuleContext<AtemParser::Binary_boolean_operatorContext>(0);
}

AtemParser::Boolean_expression_Context::Boolean_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Boolean_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_expression_(this);
}
void AtemParser::Boolean_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_expression_(this);
}
//----------------- Arithmetic_expression_Context ------------------------------------------------------------------

std::vector<AtemParser::ExpressionContext *> AtemParser::Arithmetic_expression_Context::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Arithmetic_expression_Context::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

AtemParser::Arithmetic_operatorContext* AtemParser::Arithmetic_expression_Context::arithmetic_operator() {
  return getRuleContext<AtemParser::Arithmetic_operatorContext>(0);
}

AtemParser::Arithmetic_expression_Context::Arithmetic_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Arithmetic_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_expression_(this);
}
void AtemParser::Arithmetic_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_expression_(this);
}
//----------------- Range_expression_Context ------------------------------------------------------------------

std::vector<AtemParser::ExpressionContext *> AtemParser::Range_expression_Context::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Range_expression_Context::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

AtemParser::Range_operatorContext* AtemParser::Range_expression_Context::range_operator() {
  return getRuleContext<AtemParser::Range_operatorContext>(0);
}

AtemParser::Range_expression_Context::Range_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Range_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRange_expression_(this);
}
void AtemParser::Range_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRange_expression_(this);
}
//----------------- Fallthrough_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Fallthrough_expression_Context::KeywordFallthrough() {
  return getToken(AtemParser::KeywordFallthrough, 0);
}

AtemParser::Fallthrough_expression_Context::Fallthrough_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Fallthrough_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFallthrough_expression_(this);
}
void AtemParser::Fallthrough_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFallthrough_expression_(this);
}
//----------------- Member_function_call_expression_Context ------------------------------------------------------------------

AtemParser::ExpressionContext* AtemParser::Member_function_call_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Function_call_operatorContext* AtemParser::Member_function_call_expression_Context::function_call_operator() {
  return getRuleContext<AtemParser::Function_call_operatorContext>(0);
}

AtemParser::Member_function_call_expression_Context::Member_function_call_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Member_function_call_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_function_call_expression_(this);
}
void AtemParser::Member_function_call_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_function_call_expression_(this);
}
//----------------- Init_expression_Context ------------------------------------------------------------------

AtemParser::ExpressionContext* AtemParser::Init_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

tree::TerminalNode* AtemParser::Init_expression_Context::Dot() {
  return getToken(AtemParser::Dot, 0);
}

tree::TerminalNode* AtemParser::Init_expression_Context::KeywordInit() {
  return getToken(AtemParser::KeywordInit, 0);
}

AtemParser::Init_expression_Context::Init_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Init_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInit_expression_(this);
}
void AtemParser::Init_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInit_expression_(this);
}
//----------------- Deinit_expression_Context ------------------------------------------------------------------

AtemParser::ExpressionContext* AtemParser::Deinit_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

tree::TerminalNode* AtemParser::Deinit_expression_Context::Dot() {
  return getToken(AtemParser::Dot, 0);
}

tree::TerminalNode* AtemParser::Deinit_expression_Context::KeywordDeinit() {
  return getToken(AtemParser::KeywordDeinit, 0);
}

AtemParser::Deinit_expression_Context::Deinit_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Deinit_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeinit_expression_(this);
}
void AtemParser::Deinit_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeinit_expression_(this);
}
//----------------- Await_expression_Context ------------------------------------------------------------------

AtemParser::Await_operatorContext* AtemParser::Await_expression_Context::await_operator() {
  return getRuleContext<AtemParser::Await_operatorContext>(0);
}

AtemParser::ExpressionContext* AtemParser::Await_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Await_expression_Context::Await_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Await_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAwait_expression_(this);
}
void AtemParser::Await_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAwait_expression_(this);
}
//----------------- Pipeline_expression_Context ------------------------------------------------------------------

std::vector<AtemParser::ExpressionContext *> AtemParser::Pipeline_expression_Context::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Pipeline_expression_Context::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

AtemParser::Pipeline_operatorContext* AtemParser::Pipeline_expression_Context::pipeline_operator() {
  return getRuleContext<AtemParser::Pipeline_operatorContext>(0);
}

AtemParser::Pipeline_expression_Context::Pipeline_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Pipeline_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPipeline_expression_(this);
}
void AtemParser::Pipeline_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPipeline_expression_(this);
}
//----------------- While_expression_Context ------------------------------------------------------------------

AtemParser::While_expressionContext* AtemParser::While_expression_Context::while_expression() {
  return getRuleContext<AtemParser::While_expressionContext>(0);
}

AtemParser::While_expression_Context::While_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::While_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhile_expression_(this);
}
void AtemParser::While_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhile_expression_(this);
}
//----------------- Parentheses_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Parentheses_expression_Context::LeftParenthese() {
  return getToken(AtemParser::LeftParenthese, 0);
}

AtemParser::ExpressionContext* AtemParser::Parentheses_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

tree::TerminalNode* AtemParser::Parentheses_expression_Context::RightParenthese() {
  return getToken(AtemParser::RightParenthese, 0);
}

AtemParser::Parentheses_expression_Context::Parentheses_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Parentheses_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParentheses_expression_(this);
}
void AtemParser::Parentheses_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParentheses_expression_(this);
}
//----------------- Async_expression_Context ------------------------------------------------------------------

AtemParser::Async_operatorContext* AtemParser::Async_expression_Context::async_operator() {
  return getRuleContext<AtemParser::Async_operatorContext>(0);
}

AtemParser::ExpressionContext* AtemParser::Async_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Async_expression_Context::Async_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Async_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsync_expression_(this);
}
void AtemParser::Async_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsync_expression_(this);
}
//----------------- Type_cast_expression_Context ------------------------------------------------------------------

AtemParser::ExpressionContext* AtemParser::Type_cast_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Type_casting_operatorContext* AtemParser::Type_cast_expression_Context::type_casting_operator() {
  return getRuleContext<AtemParser::Type_casting_operatorContext>(0);
}

AtemParser::Type_expressionContext* AtemParser::Type_cast_expression_Context::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

AtemParser::Type_cast_expression_Context::Type_cast_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Type_cast_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_cast_expression_(this);
}
void AtemParser::Type_cast_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_cast_expression_(this);
}
//----------------- Anonymous_field_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Anonymous_field_expression_Context::Dot() {
  return getToken(AtemParser::Dot, 0);
}

AtemParser::Path_expression_elementContext* AtemParser::Anonymous_field_expression_Context::path_expression_element() {
  return getRuleContext<AtemParser::Path_expression_elementContext>(0);
}

AtemParser::Anonymous_field_expression_Context::Anonymous_field_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Anonymous_field_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymous_field_expression_(this);
}
void AtemParser::Anonymous_field_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymous_field_expression_(this);
}
//----------------- Anonymous_init_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Anonymous_init_expression_Context::Dot() {
  return getToken(AtemParser::Dot, 0);
}

tree::TerminalNode* AtemParser::Anonymous_init_expression_Context::KeywordInit() {
  return getToken(AtemParser::KeywordInit, 0);
}

AtemParser::Anonymous_init_expression_Context::Anonymous_init_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Anonymous_init_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymous_init_expression_(this);
}
void AtemParser::Anonymous_init_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymous_init_expression_(this);
}
//----------------- Return_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Return_expression_Context::KeywordReturn() {
  return getToken(AtemParser::KeywordReturn, 0);
}

AtemParser::ExpressionContext* AtemParser::Return_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Return_expression_Context::Return_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Return_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_expression_(this);
}
void AtemParser::Return_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_expression_(this);
}
//----------------- Assert_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Assert_expression_Context::KeywordAssert() {
  return getToken(AtemParser::KeywordAssert, 0);
}

std::vector<AtemParser::ExpressionContext *> AtemParser::Assert_expression_Context::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Assert_expression_Context::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

tree::TerminalNode* AtemParser::Assert_expression_Context::KeywordWith() {
  return getToken(AtemParser::KeywordWith, 0);
}

AtemParser::Assert_expression_Context::Assert_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Assert_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssert_expression_(this);
}
void AtemParser::Assert_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssert_expression_(this);
}
//----------------- Closure_expression_Context ------------------------------------------------------------------

AtemParser::Closure_expressionContext* AtemParser::Closure_expression_Context::closure_expression() {
  return getRuleContext<AtemParser::Closure_expressionContext>(0);
}

AtemParser::Closure_expression_Context::Closure_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Closure_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClosure_expression_(this);
}
void AtemParser::Closure_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClosure_expression_(this);
}
//----------------- Use_in_expression_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Use_in_expression_Context::KeywordUse() {
  return getToken(AtemParser::KeywordUse, 0);
}

AtemParser::Declaration_statement_or_listContext* AtemParser::Use_in_expression_Context::declaration_statement_or_list() {
  return getRuleContext<AtemParser::Declaration_statement_or_listContext>(0);
}

tree::TerminalNode* AtemParser::Use_in_expression_Context::KeywordIn() {
  return getToken(AtemParser::KeywordIn, 0);
}

AtemParser::ExpressionContext* AtemParser::Use_in_expression_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Use_in_expression_Context::Use_in_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Use_in_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUse_in_expression_(this);
}
void AtemParser::Use_in_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUse_in_expression_(this);
}
//----------------- Code_block_expression_Context ------------------------------------------------------------------

AtemParser::Code_block_expressionContext* AtemParser::Code_block_expression_Context::code_block_expression() {
  return getRuleContext<AtemParser::Code_block_expressionContext>(0);
}

AtemParser::Code_block_expression_Context::Code_block_expression_Context(ExpressionContext *ctx) { copyFrom(ctx); }

void AtemParser::Code_block_expression_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCode_block_expression_(this);
}
void AtemParser::Code_block_expression_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCode_block_expression_(this);
}

AtemParser::ExpressionContext* AtemParser::expression() {
   return expression(0);
}

AtemParser::ExpressionContext* AtemParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  AtemParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  AtemParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 410;
  enterRecursionRule(_localctx, 410, AtemParser::RuleExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1836);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<Parentheses_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(1755);
      match(AtemParser::LeftParenthese);
      setState(1756);
      expression(0);
      setState(1757);
      match(AtemParser::RightParenthese);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<Literal_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1759);
      literal_expression();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<Anonymous_field_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1760);
      match(AtemParser::Dot);
      setState(1761);
      path_expression_element();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<Negation_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1762);
      negation_operator();
      setState(1763);
      expression(46);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<Path_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1765);
      path_expression();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<Try_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1766);
      try_operator();
      setState(1767);
      expression(41);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<Async_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1769);
      async_operator();
      setState(1770);
      expression(39);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<Await_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1772);
      await_operator();
      setState(1773);
      expression(38);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<Bit_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1775);
      unary_bit_operator();
      setState(1776);
      expression(35);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<Boolean_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1778);
      unary_boolean_operator();
      setState(1779);
      expression(33);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<Import_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1781);
      import_expression();
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<Closure_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1782);
      closure_expression();
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<Anonymous_init_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1783);
      match(AtemParser::Dot);
      setState(1784);
      match(AtemParser::KeywordInit);
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<Anonymous_deinit_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1785);
      match(AtemParser::Dot);
      setState(1786);
      match(AtemParser::KeywordDeinit);
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<Code_block_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1787);
      code_block_expression();
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<Type_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1788);
      type_expression(0);
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<Unreachable_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1789);
      match(AtemParser::KeywordUnreachable);
      break;
    }

    case 18: {
      _localctx = _tracker.createInstance<Fallthrough_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1790);
      match(AtemParser::KeywordFallthrough);
      break;
    }

    case 19: {
      _localctx = _tracker.createInstance<Throw_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1791);
      match(AtemParser::KeywordThrow);
      setState(1792);
      expression(20);
      break;
    }

    case 20: {
      _localctx = _tracker.createInstance<Return_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1793);
      match(AtemParser::KeywordReturn);
      setState(1795);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
      case 1: {
        setState(1794);
        expression(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 21: {
      _localctx = _tracker.createInstance<Break_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1797);
      match(AtemParser::KeywordBreak);
      setState(1799);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx)) {
      case 1: {
        setState(1798);
        code_block_name();
        break;
      }

      default:
        break;
      }
      setState(1803);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
      case 1: {
        setState(1801);
        match(AtemParser::KeywordWith);
        setState(1802);
        expression(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 22: {
      _localctx = _tracker.createInstance<Continue_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1805);
      match(AtemParser::KeywordContinue);
      setState(1807);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
      case 1: {
        setState(1806);
        code_block_name();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 23: {
      _localctx = _tracker.createInstance<Assert_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1809);
      match(AtemParser::KeywordAssert);
      setState(1810);
      expression(0);
      setState(1813);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx)) {
      case 1: {
        setState(1811);
        match(AtemParser::KeywordWith);
        setState(1812);
        expression(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 24: {
      _localctx = _tracker.createInstance<Comptime_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1815);
      match(AtemParser::KeywordComptime);
      setState(1816);
      expression(15);
      break;
    }

    case 25: {
      _localctx = _tracker.createInstance<Reflection_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1817);
      reflect_operator();
      setState(1818);
      expression(14);
      break;
    }

    case 26: {
      _localctx = _tracker.createInstance<Placeholder_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1820);
      match(AtemParser::RemainderDivide);
      setState(1822);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx)) {
      case 1: {
        setState(1821);
        expression(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 27: {
      _localctx = _tracker.createInstance<Use_in_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1824);
      match(AtemParser::KeywordUse);
      setState(1825);
      declaration_statement_or_list();
      setState(1826);
      match(AtemParser::KeywordIn);
      setState(1827);
      expression(8);
      break;
    }

    case 28: {
      _localctx = _tracker.createInstance<Using_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1829);
      match(AtemParser::KeywordUsing);
      setState(1830);
      expression(7);
      break;
    }

    case 29: {
      _localctx = _tracker.createInstance<Declaretion_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1831);
      declaration_expression();
      break;
    }

    case 30: {
      _localctx = _tracker.createInstance<If_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1832);
      if_expression();
      break;
    }

    case 31: {
      _localctx = _tracker.createInstance<While_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1833);
      while_expression();
      break;
    }

    case 32: {
      _localctx = _tracker.createInstance<Repeat_while_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1834);
      repeat_while_expression();
      break;
    }

    case 33: {
      _localctx = _tracker.createInstance<For_expression_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1835);
      for_expression();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1950);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1948);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<Comma_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1838);

          if (!(precpred(_ctx, 54))) throw FailedPredicateException(this, "precpred(_ctx, 54)");
          setState(1839);
          match(AtemParser::Comma);
          setState(1840);
          expression(55);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<Binary_optional_unwrapping_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1841);

          if (!(precpred(_ctx, 49))) throw FailedPredicateException(this, "precpred(_ctx, 49)");
          setState(1842);
          binary_optional_unwrapping_operator();
          setState(1843);
          expression(50);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<Arithmetic_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1845);

          if (!(precpred(_ctx, 47))) throw FailedPredicateException(this, "precpred(_ctx, 47)");
          setState(1846);
          arithmetic_operator();
          setState(1847);
          expression(48);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<Assignment_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1849);

          if (!(precpred(_ctx, 43))) throw FailedPredicateException(this, "precpred(_ctx, 43)");
          setState(1850);
          assignment_operator();
          setState(1851);
          expression(44);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<Comparison_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1853);

          if (!(precpred(_ctx, 42))) throw FailedPredicateException(this, "precpred(_ctx, 42)");
          setState(1854);
          comparison_operator();
          setState(1855);
          expression(43);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<Range_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1857);

          if (!(precpred(_ctx, 37))) throw FailedPredicateException(this, "precpred(_ctx, 37)");
          setState(1858);
          range_operator();
          setState(1859);
          expression(38);
          break;
        }

        case 7: {
          auto newContext = _tracker.createInstance<Bit_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1861);

          if (!(precpred(_ctx, 36))) throw FailedPredicateException(this, "precpred(_ctx, 36)");
          setState(1862);
          binary_bit_operator();
          setState(1863);
          expression(37);
          break;
        }

        case 8: {
          auto newContext = _tracker.createInstance<Boolean_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1865);

          if (!(precpred(_ctx, 34))) throw FailedPredicateException(this, "precpred(_ctx, 34)");
          setState(1866);
          binary_boolean_operator();
          setState(1867);
          expression(35);
          break;
        }

        case 9: {
          auto newContext = _tracker.createInstance<Pipeline_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1869);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(1870);
          pipeline_operator();
          setState(1871);
          expression(11);
          break;
        }

        case 10: {
          auto newContext = _tracker.createInstance<Field_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1873);

          if (!(precpred(_ctx, 53))) throw FailedPredicateException(this, "precpred(_ctx, 53)");
          setState(1874);
          match(AtemParser::Dot);
          setState(1875);
          path_expression_element();
          break;
        }

        case 11: {
          auto newContext = _tracker.createInstance<Member_function_call_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1876);

          if (!(precpred(_ctx, 51))) throw FailedPredicateException(this, "precpred(_ctx, 51)");
          setState(1877);
          function_call_operator();
          break;
        }

        case 12: {
          auto newContext = _tracker.createInstance<Unary_optional_unwrapping_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1878);

          if (!(precpred(_ctx, 50))) throw FailedPredicateException(this, "precpred(_ctx, 50)");
          setState(1879);
          unary_optional_unwrapping_operator();
          break;
        }

        case 13: {
          auto newContext = _tracker.createInstance<Function_call_expresison_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1880);

          if (!(precpred(_ctx, 48))) throw FailedPredicateException(this, "precpred(_ctx, 48)");
          setState(1881);
          function_call_operator();
          break;
        }

        case 14: {
          auto newContext = _tracker.createInstance<Array_index_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1882);

          if (!(precpred(_ctx, 44))) throw FailedPredicateException(this, "precpred(_ctx, 44)");
          setState(1883);
          array_index_operator();
          break;
        }

        case 15: {
          auto newContext = _tracker.createInstance<Catch_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1884);

          if (!(precpred(_ctx, 40))) throw FailedPredicateException(this, "precpred(_ctx, 40)");
          setState(1885);
          match(AtemParser::KeywordCatch);
          setState(1897);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
          case 1: {
            setState(1886);
            pattern(0);
            setState(1891);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == AtemParser::Comma) {
              setState(1887);
              match(AtemParser::Comma);
              setState(1888);
              pattern(0);
              setState(1893);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            setState(1895);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == AtemParser::KeywordRequire) {
              setState(1894);
              require_clause();
            }
            break;
          }

          default:
            break;
          }
          setState(1902);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case AtemParser::KeywordThen: {
              setState(1899);
              match(AtemParser::KeywordThen);
              setState(1900);
              expression(0);
              break;
            }

            case AtemParser::Identifier:
            case AtemParser::LeftCurly: {
              setState(1901);
              code_block();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          break;
        }

        case 16: {
          auto newContext = _tracker.createInstance<Type_cast_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1904);

          if (!(precpred(_ctx, 31))) throw FailedPredicateException(this, "precpred(_ctx, 31)");
          setState(1905);
          type_casting_operator();
          setState(1906);
          type_expression(0);
          break;
        }

        case 17: {
          auto newContext = _tracker.createInstance<Init_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1908);

          if (!(precpred(_ctx, 29))) throw FailedPredicateException(this, "precpred(_ctx, 29)");
          setState(1909);
          match(AtemParser::Dot);
          setState(1910);
          match(AtemParser::KeywordInit);
          break;
        }

        case 18: {
          auto newContext = _tracker.createInstance<Deinit_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1911);

          if (!(precpred(_ctx, 27))) throw FailedPredicateException(this, "precpred(_ctx, 27)");
          setState(1912);
          match(AtemParser::Dot);
          setState(1913);
          match(AtemParser::KeywordDeinit);
          break;
        }

        case 19: {
          auto newContext = _tracker.createInstance<Self_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1914);

          if (!(precpred(_ctx, 25))) throw FailedPredicateException(this, "precpred(_ctx, 25)");
          setState(1915);
          match(AtemParser::Dot);
          setState(1916);
          match(AtemParser::KeywordSelf);
          break;
        }

        case 20: {
          auto newContext = _tracker.createInstance<Derefence_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1917);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(1918);
          match(AtemParser::PointerDeref);
          break;
        }

        case 21: {
          auto newContext = _tracker.createInstance<Object_address_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1919);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(1920);
          match(AtemParser::ObjectAddress);
          break;
        }

        case 22: {
          auto newContext = _tracker.createInstance<With_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1921);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(1922);
          match(AtemParser::KeywordWith);
          setState(1923);
          match(AtemParser::LeftCurly);
          setState(1925); 
          _errHandler->sync(this);
          _la = _input->LA(1);
          do {
            setState(1924);
            expression(0);
            setState(1927); 
            _errHandler->sync(this);
            _la = _input->LA(1);
          } while ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & -4406800478583702124) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 64)) & 9223279040131033607) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 128)) & 8792357885) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 193)) & 32212257801) != 0));
          setState(1929);
          match(AtemParser::RightCurly);
          break;
        }

        case 23: {
          auto newContext = _tracker.createInstance<Match_expression_Context>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1931);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1932);
          match(AtemParser::KeywordMatch);
          setState(1942);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
          case 1: {
            setState(1933);
            match_case();
            break;
          }

          case 2: {
            setState(1934);
            match(AtemParser::LeftCurly);
            setState(1936); 
            _errHandler->sync(this);
            _la = _input->LA(1);
            do {
              setState(1935);
              match_case();
              setState(1938); 
              _errHandler->sync(this);
              _la = _input->LA(1);
            } while ((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & -4406800478583702124) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
              ((1ULL << (_la - 64)) & 9223279040131033687) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
              ((1ULL << (_la - 128)) & 8797076477) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
              ((1ULL << (_la - 193)) & 32212257801) != 0));
            setState(1940);
            match(AtemParser::RightCurly);
            break;
          }

          default:
            break;
          }
          setState(1946);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx)) {
          case 1: {
            setState(1944);
            match(AtemParser::KeywordElse);
            setState(1945);
            expression_or_block();
            break;
          }

          default:
            break;
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(1952);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Code_block_expressionContext ------------------------------------------------------------------

AtemParser::Code_block_expressionContext::Code_block_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Code_blockContext* AtemParser::Code_block_expressionContext::code_block() {
  return getRuleContext<AtemParser::Code_blockContext>(0);
}


size_t AtemParser::Code_block_expressionContext::getRuleIndex() const {
  return AtemParser::RuleCode_block_expression;
}

void AtemParser::Code_block_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCode_block_expression(this);
}

void AtemParser::Code_block_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCode_block_expression(this);
}

AtemParser::Code_block_expressionContext* AtemParser::code_block_expression() {
  Code_block_expressionContext *_localctx = _tracker.createInstance<Code_block_expressionContext>(_ctx, getState());
  enterRule(_localctx, 412, AtemParser::RuleCode_block_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1953);
    code_block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Require_clauseContext ------------------------------------------------------------------

AtemParser::Require_clauseContext::Require_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Require_clauseContext::KeywordRequire() {
  return getToken(AtemParser::KeywordRequire, 0);
}

AtemParser::ExpressionContext* AtemParser::Require_clauseContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}


size_t AtemParser::Require_clauseContext::getRuleIndex() const {
  return AtemParser::RuleRequire_clause;
}

void AtemParser::Require_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequire_clause(this);
}

void AtemParser::Require_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequire_clause(this);
}

AtemParser::Require_clauseContext* AtemParser::require_clause() {
  Require_clauseContext *_localctx = _tracker.createInstance<Require_clauseContext>(_ctx, getState());
  enterRule(_localctx, 414, AtemParser::RuleRequire_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1955);
    match(AtemParser::KeywordRequire);
    setState(1956);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Then_expression_or_blockContext ------------------------------------------------------------------

AtemParser::Then_expression_or_blockContext::Then_expression_or_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Then_expression_or_blockContext::KeywordThen() {
  return getToken(AtemParser::KeywordThen, 0);
}

AtemParser::ExpressionContext* AtemParser::Then_expression_or_blockContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Code_blockContext* AtemParser::Then_expression_or_blockContext::code_block() {
  return getRuleContext<AtemParser::Code_blockContext>(0);
}


size_t AtemParser::Then_expression_or_blockContext::getRuleIndex() const {
  return AtemParser::RuleThen_expression_or_block;
}

void AtemParser::Then_expression_or_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThen_expression_or_block(this);
}

void AtemParser::Then_expression_or_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThen_expression_or_block(this);
}

AtemParser::Then_expression_or_blockContext* AtemParser::then_expression_or_block() {
  Then_expression_or_blockContext *_localctx = _tracker.createInstance<Then_expression_or_blockContext>(_ctx, getState());
  enterRule(_localctx, 416, AtemParser::RuleThen_expression_or_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1961);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordThen: {
        enterOuterAlt(_localctx, 1);
        setState(1958);
        match(AtemParser::KeywordThen);
        setState(1959);
        expression(0);
        break;
      }

      case AtemParser::Identifier:
      case AtemParser::LeftCurly: {
        enterOuterAlt(_localctx, 2);
        setState(1960);
        code_block();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_or_blockContext ------------------------------------------------------------------

AtemParser::Expression_or_blockContext::Expression_or_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::ExpressionContext* AtemParser::Expression_or_blockContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Code_blockContext* AtemParser::Expression_or_blockContext::code_block() {
  return getRuleContext<AtemParser::Code_blockContext>(0);
}


size_t AtemParser::Expression_or_blockContext::getRuleIndex() const {
  return AtemParser::RuleExpression_or_block;
}

void AtemParser::Expression_or_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_or_block(this);
}

void AtemParser::Expression_or_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_or_block(this);
}

AtemParser::Expression_or_blockContext* AtemParser::expression_or_block() {
  Expression_or_blockContext *_localctx = _tracker.createInstance<Expression_or_blockContext>(_ctx, getState());
  enterRule(_localctx, 418, AtemParser::RuleExpression_or_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1965);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1963);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1964);
      code_block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Then_type_expression_or_blockContext ------------------------------------------------------------------

AtemParser::Then_type_expression_or_blockContext::Then_type_expression_or_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Then_type_expression_or_blockContext::KeywordThen() {
  return getToken(AtemParser::KeywordThen, 0);
}

AtemParser::Type_expressionContext* AtemParser::Then_type_expression_or_blockContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

AtemParser::Code_blockContext* AtemParser::Then_type_expression_or_blockContext::code_block() {
  return getRuleContext<AtemParser::Code_blockContext>(0);
}


size_t AtemParser::Then_type_expression_or_blockContext::getRuleIndex() const {
  return AtemParser::RuleThen_type_expression_or_block;
}

void AtemParser::Then_type_expression_or_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThen_type_expression_or_block(this);
}

void AtemParser::Then_type_expression_or_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThen_type_expression_or_block(this);
}

AtemParser::Then_type_expression_or_blockContext* AtemParser::then_type_expression_or_block() {
  Then_type_expression_or_blockContext *_localctx = _tracker.createInstance<Then_type_expression_or_blockContext>(_ctx, getState());
  enterRule(_localctx, 420, AtemParser::RuleThen_type_expression_or_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1970);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordThen: {
        enterOuterAlt(_localctx, 1);
        setState(1967);
        match(AtemParser::KeywordThen);
        setState(1968);
        type_expression(0);
        break;
      }

      case AtemParser::Identifier:
      case AtemParser::LeftCurly: {
        enterOuterAlt(_localctx, 2);
        setState(1969);
        code_block();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_expression_or_blockContext ------------------------------------------------------------------

AtemParser::Type_expression_or_blockContext::Type_expression_or_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Type_expressionContext* AtemParser::Type_expression_or_blockContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

AtemParser::Code_blockContext* AtemParser::Type_expression_or_blockContext::code_block() {
  return getRuleContext<AtemParser::Code_blockContext>(0);
}


size_t AtemParser::Type_expression_or_blockContext::getRuleIndex() const {
  return AtemParser::RuleType_expression_or_block;
}

void AtemParser::Type_expression_or_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_expression_or_block(this);
}

void AtemParser::Type_expression_or_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_expression_or_block(this);
}

AtemParser::Type_expression_or_blockContext* AtemParser::type_expression_or_block() {
  Type_expression_or_blockContext *_localctx = _tracker.createInstance<Type_expression_or_blockContext>(_ctx, getState());
  enterRule(_localctx, 422, AtemParser::RuleType_expression_or_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1974);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 219, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1972);
      type_expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1973);
      code_block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_expressionContext ------------------------------------------------------------------

AtemParser::If_expressionContext::If_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::If_expressionContext::KeywordIf() {
  return getToken(AtemParser::KeywordIf, 0);
}

AtemParser::ExpressionContext* AtemParser::If_expressionContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Then_expression_or_blockContext* AtemParser::If_expressionContext::then_expression_or_block() {
  return getRuleContext<AtemParser::Then_expression_or_blockContext>(0);
}

tree::TerminalNode* AtemParser::If_expressionContext::KeywordElse() {
  return getToken(AtemParser::KeywordElse, 0);
}

AtemParser::Expression_or_blockContext* AtemParser::If_expressionContext::expression_or_block() {
  return getRuleContext<AtemParser::Expression_or_blockContext>(0);
}


size_t AtemParser::If_expressionContext::getRuleIndex() const {
  return AtemParser::RuleIf_expression;
}

void AtemParser::If_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_expression(this);
}

void AtemParser::If_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_expression(this);
}

AtemParser::If_expressionContext* AtemParser::if_expression() {
  If_expressionContext *_localctx = _tracker.createInstance<If_expressionContext>(_ctx, getState());
  enterRule(_localctx, 424, AtemParser::RuleIf_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1976);
    match(AtemParser::KeywordIf);
    setState(1977);
    expression(0);
    setState(1978);
    then_expression_or_block();
    setState(1981);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
    case 1: {
      setState(1979);
      match(AtemParser::KeywordElse);
      setState(1980);
      expression_or_block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- While_expressionContext ------------------------------------------------------------------

AtemParser::While_expressionContext::While_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::While_expressionContext::KeywordWhile() {
  return getToken(AtemParser::KeywordWhile, 0);
}

AtemParser::ExpressionContext* AtemParser::While_expressionContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

std::vector<AtemParser::Then_expression_or_blockContext *> AtemParser::While_expressionContext::then_expression_or_block() {
  return getRuleContexts<AtemParser::Then_expression_or_blockContext>();
}

AtemParser::Then_expression_or_blockContext* AtemParser::While_expressionContext::then_expression_or_block(size_t i) {
  return getRuleContext<AtemParser::Then_expression_or_blockContext>(i);
}

tree::TerminalNode* AtemParser::While_expressionContext::KeywordWith() {
  return getToken(AtemParser::KeywordWith, 0);
}

tree::TerminalNode* AtemParser::While_expressionContext::KeywordElse() {
  return getToken(AtemParser::KeywordElse, 0);
}

AtemParser::Expression_or_blockContext* AtemParser::While_expressionContext::expression_or_block() {
  return getRuleContext<AtemParser::Expression_or_blockContext>(0);
}


size_t AtemParser::While_expressionContext::getRuleIndex() const {
  return AtemParser::RuleWhile_expression;
}

void AtemParser::While_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhile_expression(this);
}

void AtemParser::While_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhile_expression(this);
}

AtemParser::While_expressionContext* AtemParser::while_expression() {
  While_expressionContext *_localctx = _tracker.createInstance<While_expressionContext>(_ctx, getState());
  enterRule(_localctx, 426, AtemParser::RuleWhile_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1983);
    match(AtemParser::KeywordWhile);
    setState(1984);
    expression(0);
    setState(1985);
    then_expression_or_block();
    setState(1988);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx)) {
    case 1: {
      setState(1986);
      match(AtemParser::KeywordWith);
      setState(1987);
      then_expression_or_block();
      break;
    }

    default:
      break;
    }
    setState(1992);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx)) {
    case 1: {
      setState(1990);
      match(AtemParser::KeywordElse);
      setState(1991);
      expression_or_block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Repeat_while_expressionContext ------------------------------------------------------------------

AtemParser::Repeat_while_expressionContext::Repeat_while_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Repeat_while_expressionContext::KeywordRepeat() {
  return getToken(AtemParser::KeywordRepeat, 0);
}

AtemParser::ExpressionContext* AtemParser::Repeat_while_expressionContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

std::vector<AtemParser::Then_expression_or_blockContext *> AtemParser::Repeat_while_expressionContext::then_expression_or_block() {
  return getRuleContexts<AtemParser::Then_expression_or_blockContext>();
}

AtemParser::Then_expression_or_blockContext* AtemParser::Repeat_while_expressionContext::then_expression_or_block(size_t i) {
  return getRuleContext<AtemParser::Then_expression_or_blockContext>(i);
}

tree::TerminalNode* AtemParser::Repeat_while_expressionContext::KeywordWith() {
  return getToken(AtemParser::KeywordWith, 0);
}

tree::TerminalNode* AtemParser::Repeat_while_expressionContext::KeywordElse() {
  return getToken(AtemParser::KeywordElse, 0);
}

AtemParser::Expression_or_blockContext* AtemParser::Repeat_while_expressionContext::expression_or_block() {
  return getRuleContext<AtemParser::Expression_or_blockContext>(0);
}


size_t AtemParser::Repeat_while_expressionContext::getRuleIndex() const {
  return AtemParser::RuleRepeat_while_expression;
}

void AtemParser::Repeat_while_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRepeat_while_expression(this);
}

void AtemParser::Repeat_while_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRepeat_while_expression(this);
}

AtemParser::Repeat_while_expressionContext* AtemParser::repeat_while_expression() {
  Repeat_while_expressionContext *_localctx = _tracker.createInstance<Repeat_while_expressionContext>(_ctx, getState());
  enterRule(_localctx, 428, AtemParser::RuleRepeat_while_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1994);
    match(AtemParser::KeywordRepeat);
    setState(1995);
    expression(0);
    setState(1996);
    then_expression_or_block();
    setState(1999);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx)) {
    case 1: {
      setState(1997);
      match(AtemParser::KeywordWith);
      setState(1998);
      then_expression_or_block();
      break;
    }

    default:
      break;
    }
    setState(2003);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx)) {
    case 1: {
      setState(2001);
      match(AtemParser::KeywordElse);
      setState(2002);
      expression_or_block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_expressionContext ------------------------------------------------------------------

AtemParser::For_expressionContext::For_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::For_expressionContext::KeywordFor() {
  return getToken(AtemParser::KeywordFor, 0);
}

tree::TerminalNode* AtemParser::For_expressionContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}

tree::TerminalNode* AtemParser::For_expressionContext::KeywordIn() {
  return getToken(AtemParser::KeywordIn, 0);
}

AtemParser::ExpressionContext* AtemParser::For_expressionContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

std::vector<AtemParser::Then_expression_or_blockContext *> AtemParser::For_expressionContext::then_expression_or_block() {
  return getRuleContexts<AtemParser::Then_expression_or_blockContext>();
}

AtemParser::Then_expression_or_blockContext* AtemParser::For_expressionContext::then_expression_or_block(size_t i) {
  return getRuleContext<AtemParser::Then_expression_or_blockContext>(i);
}

AtemParser::AttributesContext* AtemParser::For_expressionContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}

AtemParser::Require_clauseContext* AtemParser::For_expressionContext::require_clause() {
  return getRuleContext<AtemParser::Require_clauseContext>(0);
}

tree::TerminalNode* AtemParser::For_expressionContext::KeywordWith() {
  return getToken(AtemParser::KeywordWith, 0);
}

tree::TerminalNode* AtemParser::For_expressionContext::KeywordElse() {
  return getToken(AtemParser::KeywordElse, 0);
}

AtemParser::Expression_or_blockContext* AtemParser::For_expressionContext::expression_or_block() {
  return getRuleContext<AtemParser::Expression_or_blockContext>(0);
}


size_t AtemParser::For_expressionContext::getRuleIndex() const {
  return AtemParser::RuleFor_expression;
}

void AtemParser::For_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_expression(this);
}

void AtemParser::For_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_expression(this);
}

AtemParser::For_expressionContext* AtemParser::for_expression() {
  For_expressionContext *_localctx = _tracker.createInstance<For_expressionContext>(_ctx, getState());
  enterRule(_localctx, 430, AtemParser::RuleFor_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2005);
    match(AtemParser::KeywordFor);
    setState(2006);
    match(AtemParser::Identifier);
    setState(2007);
    match(AtemParser::KeywordIn);
    setState(2009);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(2008);
      attributes();
    }
    setState(2011);
    expression(0);
    setState(2013);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordRequire) {
      setState(2012);
      require_clause();
    }
    setState(2015);
    then_expression_or_block();
    setState(2018);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx)) {
    case 1: {
      setState(2016);
      match(AtemParser::KeywordWith);
      setState(2017);
      then_expression_or_block();
      break;
    }

    default:
      break;
    }
    setState(2022);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx)) {
    case 1: {
      setState(2020);
      match(AtemParser::KeywordElse);
      setState(2021);
      expression_or_block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Match_caseContext ------------------------------------------------------------------

AtemParser::Match_caseContext::Match_caseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Match_case_labelContext* AtemParser::Match_caseContext::match_case_label() {
  return getRuleContext<AtemParser::Match_case_labelContext>(0);
}

tree::TerminalNode* AtemParser::Match_caseContext::Colon() {
  return getToken(AtemParser::Colon, 0);
}

AtemParser::ExpressionContext* AtemParser::Match_caseContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Code_blockContext* AtemParser::Match_caseContext::code_block() {
  return getRuleContext<AtemParser::Code_blockContext>(0);
}


size_t AtemParser::Match_caseContext::getRuleIndex() const {
  return AtemParser::RuleMatch_case;
}

void AtemParser::Match_caseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMatch_case(this);
}

void AtemParser::Match_caseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMatch_case(this);
}

AtemParser::Match_caseContext* AtemParser::match_case() {
  Match_caseContext *_localctx = _tracker.createInstance<Match_caseContext>(_ctx, getState());
  enterRule(_localctx, 432, AtemParser::RuleMatch_case);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2024);
    match_case_label();
    setState(2025);
    match(AtemParser::Colon);
    setState(2028);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx)) {
    case 1: {
      setState(2026);
      expression(0);
      break;
    }

    case 2: {
      setState(2027);
      code_block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Match_case_labelContext ------------------------------------------------------------------

AtemParser::Match_case_labelContext::Match_case_labelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Match_item_listContext* AtemParser::Match_case_labelContext::match_item_list() {
  return getRuleContext<AtemParser::Match_item_listContext>(0);
}

AtemParser::AttributesContext* AtemParser::Match_case_labelContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}


size_t AtemParser::Match_case_labelContext::getRuleIndex() const {
  return AtemParser::RuleMatch_case_label;
}

void AtemParser::Match_case_labelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMatch_case_label(this);
}

void AtemParser::Match_case_labelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMatch_case_label(this);
}

AtemParser::Match_case_labelContext* AtemParser::match_case_label() {
  Match_case_labelContext *_localctx = _tracker.createInstance<Match_case_labelContext>(_ctx, getState());
  enterRule(_localctx, 434, AtemParser::RuleMatch_case_label);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2031);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::At) {
      setState(2030);
      attributes();
    }
    setState(2033);
    match_item_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Match_item_listContext ------------------------------------------------------------------

AtemParser::Match_item_listContext::Match_item_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::PatternContext *> AtemParser::Match_item_listContext::pattern() {
  return getRuleContexts<AtemParser::PatternContext>();
}

AtemParser::PatternContext* AtemParser::Match_item_listContext::pattern(size_t i) {
  return getRuleContext<AtemParser::PatternContext>(i);
}

std::vector<AtemParser::Require_clauseContext *> AtemParser::Match_item_listContext::require_clause() {
  return getRuleContexts<AtemParser::Require_clauseContext>();
}

AtemParser::Require_clauseContext* AtemParser::Match_item_listContext::require_clause(size_t i) {
  return getRuleContext<AtemParser::Require_clauseContext>(i);
}

std::vector<tree::TerminalNode *> AtemParser::Match_item_listContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Match_item_listContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}


size_t AtemParser::Match_item_listContext::getRuleIndex() const {
  return AtemParser::RuleMatch_item_list;
}

void AtemParser::Match_item_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMatch_item_list(this);
}

void AtemParser::Match_item_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMatch_item_list(this);
}

AtemParser::Match_item_listContext* AtemParser::match_item_list() {
  Match_item_listContext *_localctx = _tracker.createInstance<Match_item_listContext>(_ctx, getState());
  enterRule(_localctx, 436, AtemParser::RuleMatch_item_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2035);
    pattern(0);
    setState(2037);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordRequire) {
      setState(2036);
      require_clause();
    }
    setState(2046);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AtemParser::Comma) {
      setState(2039);
      match(AtemParser::Comma);
      setState(2040);
      pattern(0);
      setState(2042);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AtemParser::KeywordRequire) {
        setState(2041);
        require_clause();
      }
      setState(2048);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_expressionContext ------------------------------------------------------------------

AtemParser::Type_expressionContext::Type_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Type_expressionContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}

tree::TerminalNode* AtemParser::Type_expressionContext::RightParenthese() {
  return getToken(AtemParser::RightParenthese, 0);
}

AtemParser::Type_expressionContext* AtemParser::Type_expressionContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

tree::TerminalNode* AtemParser::Type_expressionContext::LeftParenthese() {
  return getToken(AtemParser::LeftParenthese, 0);
}

AtemParser::Path_expressionContext* AtemParser::Type_expressionContext::path_expression() {
  return getRuleContext<AtemParser::Path_expressionContext>(0);
}

AtemParser::Function_call_operatorContext* AtemParser::Type_expressionContext::function_call_operator() {
  return getRuleContext<AtemParser::Function_call_operatorContext>(0);
}

AtemParser::Basic_typeContext* AtemParser::Type_expressionContext::basic_type() {
  return getRuleContext<AtemParser::Basic_typeContext>(0);
}

AtemParser::Tuple_typeContext* AtemParser::Type_expressionContext::tuple_type() {
  return getRuleContext<AtemParser::Tuple_typeContext>(0);
}

AtemParser::Optional_typeContext* AtemParser::Type_expressionContext::optional_type() {
  return getRuleContext<AtemParser::Optional_typeContext>(0);
}

AtemParser::Collection_typeContext* AtemParser::Type_expressionContext::collection_type() {
  return getRuleContext<AtemParser::Collection_typeContext>(0);
}

AtemParser::Any_typeContext* AtemParser::Type_expressionContext::any_type() {
  return getRuleContext<AtemParser::Any_typeContext>(0);
}

AtemParser::Some_typeContext* AtemParser::Type_expressionContext::some_type() {
  return getRuleContext<AtemParser::Some_typeContext>(0);
}

AtemParser::Const_typeContext* AtemParser::Type_expressionContext::const_type() {
  return getRuleContext<AtemParser::Const_typeContext>(0);
}

AtemParser::If_expressionContext* AtemParser::Type_expressionContext::if_expression() {
  return getRuleContext<AtemParser::If_expressionContext>(0);
}

AtemParser::While_expressionContext* AtemParser::Type_expressionContext::while_expression() {
  return getRuleContext<AtemParser::While_expressionContext>(0);
}

AtemParser::Repeat_while_expressionContext* AtemParser::Type_expressionContext::repeat_while_expression() {
  return getRuleContext<AtemParser::Repeat_while_expressionContext>(0);
}

AtemParser::For_expressionContext* AtemParser::Type_expressionContext::for_expression() {
  return getRuleContext<AtemParser::For_expressionContext>(0);
}

AtemParser::Code_block_expressionContext* AtemParser::Type_expressionContext::code_block_expression() {
  return getRuleContext<AtemParser::Code_block_expressionContext>(0);
}

tree::TerminalNode* AtemParser::Type_expressionContext::KeywordUnreachable() {
  return getToken(AtemParser::KeywordUnreachable, 0);
}

tree::TerminalNode* AtemParser::Type_expressionContext::KeywordFallthrough() {
  return getToken(AtemParser::KeywordFallthrough, 0);
}

tree::TerminalNode* AtemParser::Type_expressionContext::KeywordThrow() {
  return getToken(AtemParser::KeywordThrow, 0);
}

AtemParser::ExpressionContext* AtemParser::Type_expressionContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

tree::TerminalNode* AtemParser::Type_expressionContext::KeywordReturn() {
  return getToken(AtemParser::KeywordReturn, 0);
}

tree::TerminalNode* AtemParser::Type_expressionContext::KeywordBreak() {
  return getToken(AtemParser::KeywordBreak, 0);
}

AtemParser::Code_block_nameContext* AtemParser::Type_expressionContext::code_block_name() {
  return getRuleContext<AtemParser::Code_block_nameContext>(0);
}

tree::TerminalNode* AtemParser::Type_expressionContext::KeywordWith() {
  return getToken(AtemParser::KeywordWith, 0);
}

tree::TerminalNode* AtemParser::Type_expressionContext::KeywordContinue() {
  return getToken(AtemParser::KeywordContinue, 0);
}

tree::TerminalNode* AtemParser::Type_expressionContext::KeywordComptime() {
  return getToken(AtemParser::KeywordComptime, 0);
}

AtemParser::Array_index_operatorContext* AtemParser::Type_expressionContext::array_index_operator() {
  return getRuleContext<AtemParser::Array_index_operatorContext>(0);
}

tree::TerminalNode* AtemParser::Type_expressionContext::PointerType() {
  return getToken(AtemParser::PointerType, 0);
}


size_t AtemParser::Type_expressionContext::getRuleIndex() const {
  return AtemParser::RuleType_expression;
}

void AtemParser::Type_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_expression(this);
}

void AtemParser::Type_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_expression(this);
}


AtemParser::Type_expressionContext* AtemParser::type_expression() {
   return type_expression(0);
}

AtemParser::Type_expressionContext* AtemParser::type_expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  AtemParser::Type_expressionContext *_localctx = _tracker.createInstance<Type_expressionContext>(_ctx, parentState);
  AtemParser::Type_expressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 438;
  enterRecursionRule(_localctx, 438, AtemParser::RuleType_expression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2093);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx)) {
    case 1: {
      setState(2050);
      match(AtemParser::Identifier);
      break;
    }

    case 2: {
      setState(2051);
      match(AtemParser::RightParenthese);
      setState(2052);
      type_expression(0);
      setState(2053);
      match(AtemParser::LeftParenthese);
      break;
    }

    case 3: {
      setState(2055);
      path_expression();
      setState(2056);
      function_call_operator();
      break;
    }

    case 4: {
      setState(2058);
      path_expression();
      break;
    }

    case 5: {
      setState(2059);
      basic_type();
      break;
    }

    case 6: {
      setState(2060);
      tuple_type();
      break;
    }

    case 7: {
      setState(2061);
      optional_type();
      break;
    }

    case 8: {
      setState(2062);
      collection_type();
      break;
    }

    case 9: {
      setState(2063);
      any_type();
      break;
    }

    case 10: {
      setState(2064);
      some_type();
      break;
    }

    case 11: {
      setState(2065);
      const_type();
      break;
    }

    case 12: {
      setState(2066);
      if_expression();
      break;
    }

    case 13: {
      setState(2067);
      while_expression();
      break;
    }

    case 14: {
      setState(2068);
      repeat_while_expression();
      break;
    }

    case 15: {
      setState(2069);
      for_expression();
      break;
    }

    case 16: {
      setState(2070);
      code_block_expression();
      break;
    }

    case 17: {
      setState(2071);
      match(AtemParser::KeywordUnreachable);
      break;
    }

    case 18: {
      setState(2072);
      match(AtemParser::KeywordFallthrough);
      break;
    }

    case 19: {
      setState(2073);
      match(AtemParser::KeywordThrow);
      setState(2074);
      expression(0);
      break;
    }

    case 20: {
      setState(2075);
      match(AtemParser::KeywordReturn);
      setState(2077);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx)) {
      case 1: {
        setState(2076);
        type_expression(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 21: {
      setState(2079);
      match(AtemParser::KeywordBreak);
      setState(2081);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx)) {
      case 1: {
        setState(2080);
        code_block_name();
        break;
      }

      default:
        break;
      }
      setState(2085);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
      case 1: {
        setState(2083);
        match(AtemParser::KeywordWith);
        setState(2084);
        type_expression(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 22: {
      setState(2087);
      match(AtemParser::KeywordContinue);
      setState(2089);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
      case 1: {
        setState(2088);
        code_block_name();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 23: {
      setState(2091);
      match(AtemParser::KeywordComptime);
      setState(2092);
      type_expression(1);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(2101);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2099);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Type_expressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleType_expression);
          setState(2095);

          if (!(precpred(_ctx, 21))) throw FailedPredicateException(this, "precpred(_ctx, 21)");
          setState(2096);
          array_index_operator();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Type_expressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleType_expression);
          setState(2097);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(2098);
          match(AtemParser::PointerType);
          break;
        }

        default:
          break;
        } 
      }
      setState(2103);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Basic_typeContext ------------------------------------------------------------------

AtemParser::Basic_typeContext::Basic_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Never_typeContext* AtemParser::Basic_typeContext::never_type() {
  return getRuleContext<AtemParser::Never_typeContext>(0);
}

AtemParser::Integer_typeContext* AtemParser::Basic_typeContext::integer_type() {
  return getRuleContext<AtemParser::Integer_typeContext>(0);
}

AtemParser::Floating_point_typeContext* AtemParser::Basic_typeContext::floating_point_type() {
  return getRuleContext<AtemParser::Floating_point_typeContext>(0);
}

AtemParser::Boolean_typeContext* AtemParser::Basic_typeContext::boolean_type() {
  return getRuleContext<AtemParser::Boolean_typeContext>(0);
}

AtemParser::Byte_typeContext* AtemParser::Basic_typeContext::byte_type() {
  return getRuleContext<AtemParser::Byte_typeContext>(0);
}

AtemParser::Unit_typeContext* AtemParser::Basic_typeContext::unit_type() {
  return getRuleContext<AtemParser::Unit_typeContext>(0);
}

AtemParser::Character_typeContext* AtemParser::Basic_typeContext::character_type() {
  return getRuleContext<AtemParser::Character_typeContext>(0);
}

AtemParser::String_typeContext* AtemParser::Basic_typeContext::string_type() {
  return getRuleContext<AtemParser::String_typeContext>(0);
}

AtemParser::Comptime_typeContext* AtemParser::Basic_typeContext::comptime_type() {
  return getRuleContext<AtemParser::Comptime_typeContext>(0);
}

AtemParser::Type_typeContext* AtemParser::Basic_typeContext::type_type() {
  return getRuleContext<AtemParser::Type_typeContext>(0);
}


size_t AtemParser::Basic_typeContext::getRuleIndex() const {
  return AtemParser::RuleBasic_type;
}

void AtemParser::Basic_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasic_type(this);
}

void AtemParser::Basic_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasic_type(this);
}

AtemParser::Basic_typeContext* AtemParser::basic_type() {
  Basic_typeContext *_localctx = _tracker.createInstance<Basic_typeContext>(_ctx, getState());
  enterRule(_localctx, 440, AtemParser::RuleBasic_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2115);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2104);
      never_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2105);
      integer_type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2106);
      floating_point_type();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2107);
      boolean_type();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2108);
      byte_type();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2109);
      unit_type();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2110);
      character_type();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2111);
      string_type();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2112);
      unit_type();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2113);
      comptime_type();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2114);
      type_type();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Collection_typeContext ------------------------------------------------------------------

AtemParser::Collection_typeContext::Collection_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Static_array_typeContext* AtemParser::Collection_typeContext::static_array_type() {
  return getRuleContext<AtemParser::Static_array_typeContext>(0);
}

AtemParser::Dynamic_array_typeContext* AtemParser::Collection_typeContext::dynamic_array_type() {
  return getRuleContext<AtemParser::Dynamic_array_typeContext>(0);
}

AtemParser::Map_typeContext* AtemParser::Collection_typeContext::map_type() {
  return getRuleContext<AtemParser::Map_typeContext>(0);
}

AtemParser::Set_typeContext* AtemParser::Collection_typeContext::set_type() {
  return getRuleContext<AtemParser::Set_typeContext>(0);
}


size_t AtemParser::Collection_typeContext::getRuleIndex() const {
  return AtemParser::RuleCollection_type;
}

void AtemParser::Collection_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollection_type(this);
}

void AtemParser::Collection_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollection_type(this);
}

AtemParser::Collection_typeContext* AtemParser::collection_type() {
  Collection_typeContext *_localctx = _tracker.createInstance<Collection_typeContext>(_ctx, getState());
  enterRule(_localctx, 442, AtemParser::RuleCollection_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2121);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2117);
      static_array_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2118);
      dynamic_array_type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2119);
      map_type();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2120);
      set_type();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Never_typeContext ------------------------------------------------------------------

AtemParser::Never_typeContext::Never_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Never_typeContext::KeywordNever() {
  return getToken(AtemParser::KeywordNever, 0);
}


size_t AtemParser::Never_typeContext::getRuleIndex() const {
  return AtemParser::RuleNever_type;
}

void AtemParser::Never_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNever_type(this);
}

void AtemParser::Never_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNever_type(this);
}

AtemParser::Never_typeContext* AtemParser::never_type() {
  Never_typeContext *_localctx = _tracker.createInstance<Never_typeContext>(_ctx, getState());
  enterRule(_localctx, 444, AtemParser::RuleNever_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2123);
    match(AtemParser::KeywordNever);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tuple_typeContext ------------------------------------------------------------------

AtemParser::Tuple_typeContext::Tuple_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Tuple_typeContext::LeftParenthese() {
  return getToken(AtemParser::LeftParenthese, 0);
}

tree::TerminalNode* AtemParser::Tuple_typeContext::RightParenthese() {
  return getToken(AtemParser::RightParenthese, 0);
}

std::vector<AtemParser::Tuple_type_elementContext *> AtemParser::Tuple_typeContext::tuple_type_element() {
  return getRuleContexts<AtemParser::Tuple_type_elementContext>();
}

AtemParser::Tuple_type_elementContext* AtemParser::Tuple_typeContext::tuple_type_element(size_t i) {
  return getRuleContext<AtemParser::Tuple_type_elementContext>(i);
}

std::vector<tree::TerminalNode *> AtemParser::Tuple_typeContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Tuple_typeContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}


size_t AtemParser::Tuple_typeContext::getRuleIndex() const {
  return AtemParser::RuleTuple_type;
}

void AtemParser::Tuple_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTuple_type(this);
}

void AtemParser::Tuple_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTuple_type(this);
}

AtemParser::Tuple_typeContext* AtemParser::tuple_type() {
  Tuple_typeContext *_localctx = _tracker.createInstance<Tuple_typeContext>(_ctx, getState());
  enterRule(_localctx, 446, AtemParser::RuleTuple_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2125);
    match(AtemParser::LeftParenthese);
    setState(2136);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx)) {
    case 1: {
      setState(2129); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2126);
                tuple_type_element();
                setState(2127);
                match(AtemParser::Comma);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2131); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(2134);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx)) {
      case 1: {
        setState(2133);
        tuple_type_element();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(2138);
    match(AtemParser::RightParenthese);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tuple_type_elementContext ------------------------------------------------------------------

AtemParser::Tuple_type_elementContext::Tuple_type_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Type_expressionContext* AtemParser::Tuple_type_elementContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

AtemParser::AttributesContext* AtemParser::Tuple_type_elementContext::attributes() {
  return getRuleContext<AtemParser::AttributesContext>(0);
}

tree::TerminalNode* AtemParser::Tuple_type_elementContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}

tree::TerminalNode* AtemParser::Tuple_type_elementContext::Colon() {
  return getToken(AtemParser::Colon, 0);
}


size_t AtemParser::Tuple_type_elementContext::getRuleIndex() const {
  return AtemParser::RuleTuple_type_element;
}

void AtemParser::Tuple_type_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTuple_type_element(this);
}

void AtemParser::Tuple_type_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTuple_type_element(this);
}

AtemParser::Tuple_type_elementContext* AtemParser::tuple_type_element() {
  Tuple_type_elementContext *_localctx = _tracker.createInstance<Tuple_type_elementContext>(_ctx, getState());
  enterRule(_localctx, 448, AtemParser::RuleTuple_type_element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2150);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2141);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AtemParser::At) {
        setState(2140);
        attributes();
      }
      setState(2143);
      type_expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2144);
      match(AtemParser::Identifier);
      setState(2145);
      match(AtemParser::Colon);
      setState(2147);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AtemParser::At) {
        setState(2146);
        attributes();
      }
      setState(2149);
      type_expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Optional_typeContext ------------------------------------------------------------------

AtemParser::Optional_typeContext::Optional_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Optional_typeContext::Question() {
  return getToken(AtemParser::Question, 0);
}

AtemParser::Type_expressionContext* AtemParser::Optional_typeContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}


size_t AtemParser::Optional_typeContext::getRuleIndex() const {
  return AtemParser::RuleOptional_type;
}

void AtemParser::Optional_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptional_type(this);
}

void AtemParser::Optional_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptional_type(this);
}

AtemParser::Optional_typeContext* AtemParser::optional_type() {
  Optional_typeContext *_localctx = _tracker.createInstance<Optional_typeContext>(_ctx, getState());
  enterRule(_localctx, 450, AtemParser::RuleOptional_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2152);
    match(AtemParser::Question);
    setState(2153);
    type_expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Any_typeContext ------------------------------------------------------------------

AtemParser::Any_typeContext::Any_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Any_typeContext::KeywordAny() {
  return getToken(AtemParser::KeywordAny, 0);
}

AtemParser::Type_expressionContext* AtemParser::Any_typeContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}


size_t AtemParser::Any_typeContext::getRuleIndex() const {
  return AtemParser::RuleAny_type;
}

void AtemParser::Any_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAny_type(this);
}

void AtemParser::Any_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAny_type(this);
}

AtemParser::Any_typeContext* AtemParser::any_type() {
  Any_typeContext *_localctx = _tracker.createInstance<Any_typeContext>(_ctx, getState());
  enterRule(_localctx, 452, AtemParser::RuleAny_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2155);
    match(AtemParser::KeywordAny);
    setState(2156);
    type_expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Some_typeContext ------------------------------------------------------------------

AtemParser::Some_typeContext::Some_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Some_typeContext::KeywordSome() {
  return getToken(AtemParser::KeywordSome, 0);
}

AtemParser::Type_expressionContext* AtemParser::Some_typeContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}


size_t AtemParser::Some_typeContext::getRuleIndex() const {
  return AtemParser::RuleSome_type;
}

void AtemParser::Some_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSome_type(this);
}

void AtemParser::Some_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSome_type(this);
}

AtemParser::Some_typeContext* AtemParser::some_type() {
  Some_typeContext *_localctx = _tracker.createInstance<Some_typeContext>(_ctx, getState());
  enterRule(_localctx, 454, AtemParser::RuleSome_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2158);
    match(AtemParser::KeywordSome);
    setState(2159);
    type_expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Static_array_typeContext ------------------------------------------------------------------

AtemParser::Static_array_typeContext::Static_array_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Static_array_typeContext::LeftSquare() {
  return getToken(AtemParser::LeftSquare, 0);
}

tree::TerminalNode* AtemParser::Static_array_typeContext::RightSquare() {
  return getToken(AtemParser::RightSquare, 0);
}

std::vector<AtemParser::ExpressionContext *> AtemParser::Static_array_typeContext::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Static_array_typeContext::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AtemParser::Static_array_typeContext::Underscore() {
  return getTokens(AtemParser::Underscore);
}

tree::TerminalNode* AtemParser::Static_array_typeContext::Underscore(size_t i) {
  return getToken(AtemParser::Underscore, i);
}

AtemParser::Type_expressionContext* AtemParser::Static_array_typeContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

std::vector<tree::TerminalNode *> AtemParser::Static_array_typeContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Static_array_typeContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}


size_t AtemParser::Static_array_typeContext::getRuleIndex() const {
  return AtemParser::RuleStatic_array_type;
}

void AtemParser::Static_array_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatic_array_type(this);
}

void AtemParser::Static_array_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatic_array_type(this);
}

AtemParser::Static_array_typeContext* AtemParser::static_array_type() {
  Static_array_typeContext *_localctx = _tracker.createInstance<Static_array_typeContext>(_ctx, getState());
  enterRule(_localctx, 456, AtemParser::RuleStatic_array_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2161);
    match(AtemParser::LeftSquare);
    setState(2164);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordAlias:
      case AtemParser::KeywordAny:
      case AtemParser::KeywordAssert:
      case AtemParser::KeywordAsync:
      case AtemParser::KeywordAwait:
      case AtemParser::KeywordBool:
      case AtemParser::KeywordBreak:
      case AtemParser::KeywordByte:
      case AtemParser::KeywordChar8:
      case AtemParser::KeywordChar16:
      case AtemParser::KeywordChar32:
      case AtemParser::KeywordClass:
      case AtemParser::KeywordCompileTimeInt:
      case AtemParser::KeywordCompileTimeFloat:
      case AtemParser::KeywordCompileTimeString:
      case AtemParser::KeywordCompileTimeChar:
      case AtemParser::KeywordComptime:
      case AtemParser::KeywordConst:
      case AtemParser::KeywordContinue:
      case AtemParser::KeywordDefault:
      case AtemParser::KeywordEnum:
      case AtemParser::KeywordExtend:
      case AtemParser::KeywordFallthrough:
      case AtemParser::KeywordFalse:
      case AtemParser::KeywordFloat16:
      case AtemParser::KeywordFloat32:
      case AtemParser::KeywordFloat64:
      case AtemParser::KeywordFloat80:
      case AtemParser::KeywordFloat128:
      case AtemParser::KeywordFor:
      case AtemParser::KeywordFunc:
      case AtemParser::KeywordGlobal:
      case AtemParser::KeywordIf:
      case AtemParser::KeywordImport:
      case AtemParser::KeywordInt8:
      case AtemParser::KeywordInt16:
      case AtemParser::KeywordInt32:
      case AtemParser::KeywordInt64:
      case AtemParser::KeywordInt128:
      case AtemParser::KeywordModule:
      case AtemParser::KeywordNamespace:
      case AtemParser::KeywordNever:
      case AtemParser::KeywordNot:
      case AtemParser::KeywordNull:
      case AtemParser::KeywordOuter:
      case AtemParser::KeywordPackage:
      case AtemParser::KeywordProject:
      case AtemParser::KeywordProtocol:
      case AtemParser::KeywordRepeat:
      case AtemParser::KeywordReturn:
      case AtemParser::KeywordSelf:
      case AtemParser::KeywordSome:
      case AtemParser::KeywordString:
      case AtemParser::KeywordStruct:
      case AtemParser::KeywordSuper:
      case AtemParser::KeywordTest:
      case AtemParser::KeywordThis:
      case AtemParser::KeywordThrow:
      case AtemParser::KeywordTrue:
      case AtemParser::KeywordTry:
      case AtemParser::KeywordType:
      case AtemParser::KeywordUInt8:
      case AtemParser::KeywordUInt16:
      case AtemParser::KeywordUInt32:
      case AtemParser::KeywordUInt64:
      case AtemParser::KeywordUInt128:
      case AtemParser::KeywordUndefined:
      case AtemParser::KeywordUnion:
      case AtemParser::KeywordUnit:
      case AtemParser::KeywordUnreachable:
      case AtemParser::KeywordUse:
      case AtemParser::KeywordUsing:
      case AtemParser::KeywordVal:
      case AtemParser::KeywordVar:
      case AtemParser::KeywordWhile:
      case AtemParser::Identifier:
      case AtemParser::BinaryLiteral:
      case AtemParser::OctalLiteral:
      case AtemParser::DecimalDigits:
      case AtemParser::DecimalLiteral:
      case AtemParser::HexadecimalLiteral:
      case AtemParser::FloatingPointLiteral:
      case AtemParser::LeftCurly:
      case AtemParser::LeftParenthese:
      case AtemParser::RightParenthese:
      case AtemParser::LeftSquare:
      case AtemParser::Dot:
      case AtemParser::Question:
      case AtemParser::Sub:
      case AtemParser::OverflowingSub:
      case AtemParser::RemainderDivide:
      case AtemParser::BitNot:
      case AtemParser::BitXor:
      case AtemParser::Reflect:
      case AtemParser::Reify:
      case AtemParser::MultiLineExtendedStringOpen:
      case AtemParser::SingleLineExtendedStringOpen:
      case AtemParser::MultiLineStringOpen:
      case AtemParser::SingleLineStringOpen: {
        setState(2162);
        expression(0);
        break;
      }

      case AtemParser::Underscore: {
        setState(2163);
        match(AtemParser::Underscore);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2171);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2169);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case AtemParser::Comma: {
            setState(2166);
            match(AtemParser::Comma);
            setState(2167);
            expression(0);
            break;
          }

          case AtemParser::Underscore: {
            setState(2168);
            match(AtemParser::Underscore);
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(2173);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx);
    }
    setState(2175);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Comma) {
      setState(2174);
      match(AtemParser::Comma);
    }
    setState(2177);
    match(AtemParser::RightSquare);
    setState(2180);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordAny:
      case AtemParser::KeywordBool:
      case AtemParser::KeywordBreak:
      case AtemParser::KeywordByte:
      case AtemParser::KeywordChar8:
      case AtemParser::KeywordChar16:
      case AtemParser::KeywordChar32:
      case AtemParser::KeywordCompileTimeInt:
      case AtemParser::KeywordCompileTimeFloat:
      case AtemParser::KeywordCompileTimeString:
      case AtemParser::KeywordCompileTimeChar:
      case AtemParser::KeywordComptime:
      case AtemParser::KeywordConst:
      case AtemParser::KeywordContinue:
      case AtemParser::KeywordFallthrough:
      case AtemParser::KeywordFloat16:
      case AtemParser::KeywordFloat32:
      case AtemParser::KeywordFloat64:
      case AtemParser::KeywordFloat80:
      case AtemParser::KeywordFloat128:
      case AtemParser::KeywordFor:
      case AtemParser::KeywordGlobal:
      case AtemParser::KeywordIf:
      case AtemParser::KeywordInt8:
      case AtemParser::KeywordInt16:
      case AtemParser::KeywordInt32:
      case AtemParser::KeywordInt64:
      case AtemParser::KeywordInt128:
      case AtemParser::KeywordModule:
      case AtemParser::KeywordNever:
      case AtemParser::KeywordOuter:
      case AtemParser::KeywordPackage:
      case AtemParser::KeywordRepeat:
      case AtemParser::KeywordReturn:
      case AtemParser::KeywordSelf:
      case AtemParser::KeywordSome:
      case AtemParser::KeywordString:
      case AtemParser::KeywordSuper:
      case AtemParser::KeywordThis:
      case AtemParser::KeywordThrow:
      case AtemParser::KeywordType:
      case AtemParser::KeywordUInt8:
      case AtemParser::KeywordUInt16:
      case AtemParser::KeywordUInt32:
      case AtemParser::KeywordUInt64:
      case AtemParser::KeywordUInt128:
      case AtemParser::KeywordUnit:
      case AtemParser::KeywordUnreachable:
      case AtemParser::KeywordWhile:
      case AtemParser::Identifier:
      case AtemParser::LeftCurly:
      case AtemParser::LeftParenthese:
      case AtemParser::RightParenthese:
      case AtemParser::LeftSquare:
      case AtemParser::Question: {
        setState(2178);
        type_expression(0);
        break;
      }

      case AtemParser::Underscore: {
        setState(2179);
        match(AtemParser::Underscore);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dynamic_array_typeContext ------------------------------------------------------------------

AtemParser::Dynamic_array_typeContext::Dynamic_array_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Dynamic_array_typeContext::LeftSquare() {
  return getToken(AtemParser::LeftSquare, 0);
}

tree::TerminalNode* AtemParser::Dynamic_array_typeContext::RightSquare() {
  return getToken(AtemParser::RightSquare, 0);
}

AtemParser::Type_expressionContext* AtemParser::Dynamic_array_typeContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

tree::TerminalNode* AtemParser::Dynamic_array_typeContext::Underscore() {
  return getToken(AtemParser::Underscore, 0);
}


size_t AtemParser::Dynamic_array_typeContext::getRuleIndex() const {
  return AtemParser::RuleDynamic_array_type;
}

void AtemParser::Dynamic_array_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDynamic_array_type(this);
}

void AtemParser::Dynamic_array_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDynamic_array_type(this);
}

AtemParser::Dynamic_array_typeContext* AtemParser::dynamic_array_type() {
  Dynamic_array_typeContext *_localctx = _tracker.createInstance<Dynamic_array_typeContext>(_ctx, getState());
  enterRule(_localctx, 458, AtemParser::RuleDynamic_array_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2182);
    match(AtemParser::LeftSquare);
    setState(2183);
    match(AtemParser::RightSquare);
    setState(2186);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordAny:
      case AtemParser::KeywordBool:
      case AtemParser::KeywordBreak:
      case AtemParser::KeywordByte:
      case AtemParser::KeywordChar8:
      case AtemParser::KeywordChar16:
      case AtemParser::KeywordChar32:
      case AtemParser::KeywordCompileTimeInt:
      case AtemParser::KeywordCompileTimeFloat:
      case AtemParser::KeywordCompileTimeString:
      case AtemParser::KeywordCompileTimeChar:
      case AtemParser::KeywordComptime:
      case AtemParser::KeywordConst:
      case AtemParser::KeywordContinue:
      case AtemParser::KeywordFallthrough:
      case AtemParser::KeywordFloat16:
      case AtemParser::KeywordFloat32:
      case AtemParser::KeywordFloat64:
      case AtemParser::KeywordFloat80:
      case AtemParser::KeywordFloat128:
      case AtemParser::KeywordFor:
      case AtemParser::KeywordGlobal:
      case AtemParser::KeywordIf:
      case AtemParser::KeywordInt8:
      case AtemParser::KeywordInt16:
      case AtemParser::KeywordInt32:
      case AtemParser::KeywordInt64:
      case AtemParser::KeywordInt128:
      case AtemParser::KeywordModule:
      case AtemParser::KeywordNever:
      case AtemParser::KeywordOuter:
      case AtemParser::KeywordPackage:
      case AtemParser::KeywordRepeat:
      case AtemParser::KeywordReturn:
      case AtemParser::KeywordSelf:
      case AtemParser::KeywordSome:
      case AtemParser::KeywordString:
      case AtemParser::KeywordSuper:
      case AtemParser::KeywordThis:
      case AtemParser::KeywordThrow:
      case AtemParser::KeywordType:
      case AtemParser::KeywordUInt8:
      case AtemParser::KeywordUInt16:
      case AtemParser::KeywordUInt32:
      case AtemParser::KeywordUInt64:
      case AtemParser::KeywordUInt128:
      case AtemParser::KeywordUnit:
      case AtemParser::KeywordUnreachable:
      case AtemParser::KeywordWhile:
      case AtemParser::Identifier:
      case AtemParser::LeftCurly:
      case AtemParser::LeftParenthese:
      case AtemParser::RightParenthese:
      case AtemParser::LeftSquare:
      case AtemParser::Question: {
        setState(2184);
        type_expression(0);
        break;
      }

      case AtemParser::Underscore: {
        setState(2185);
        match(AtemParser::Underscore);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Map_typeContext ------------------------------------------------------------------

AtemParser::Map_typeContext::Map_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Map_typeContext::LeftSquare() {
  return getToken(AtemParser::LeftSquare, 0);
}

tree::TerminalNode* AtemParser::Map_typeContext::Colon() {
  return getToken(AtemParser::Colon, 0);
}

tree::TerminalNode* AtemParser::Map_typeContext::RightSquare() {
  return getToken(AtemParser::RightSquare, 0);
}

std::vector<AtemParser::Type_expressionContext *> AtemParser::Map_typeContext::type_expression() {
  return getRuleContexts<AtemParser::Type_expressionContext>();
}

AtemParser::Type_expressionContext* AtemParser::Map_typeContext::type_expression(size_t i) {
  return getRuleContext<AtemParser::Type_expressionContext>(i);
}

std::vector<tree::TerminalNode *> AtemParser::Map_typeContext::Underscore() {
  return getTokens(AtemParser::Underscore);
}

tree::TerminalNode* AtemParser::Map_typeContext::Underscore(size_t i) {
  return getToken(AtemParser::Underscore, i);
}


size_t AtemParser::Map_typeContext::getRuleIndex() const {
  return AtemParser::RuleMap_type;
}

void AtemParser::Map_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMap_type(this);
}

void AtemParser::Map_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMap_type(this);
}

AtemParser::Map_typeContext* AtemParser::map_type() {
  Map_typeContext *_localctx = _tracker.createInstance<Map_typeContext>(_ctx, getState());
  enterRule(_localctx, 460, AtemParser::RuleMap_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2188);
    match(AtemParser::LeftSquare);
    setState(2191);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordAny:
      case AtemParser::KeywordBool:
      case AtemParser::KeywordBreak:
      case AtemParser::KeywordByte:
      case AtemParser::KeywordChar8:
      case AtemParser::KeywordChar16:
      case AtemParser::KeywordChar32:
      case AtemParser::KeywordCompileTimeInt:
      case AtemParser::KeywordCompileTimeFloat:
      case AtemParser::KeywordCompileTimeString:
      case AtemParser::KeywordCompileTimeChar:
      case AtemParser::KeywordComptime:
      case AtemParser::KeywordConst:
      case AtemParser::KeywordContinue:
      case AtemParser::KeywordFallthrough:
      case AtemParser::KeywordFloat16:
      case AtemParser::KeywordFloat32:
      case AtemParser::KeywordFloat64:
      case AtemParser::KeywordFloat80:
      case AtemParser::KeywordFloat128:
      case AtemParser::KeywordFor:
      case AtemParser::KeywordGlobal:
      case AtemParser::KeywordIf:
      case AtemParser::KeywordInt8:
      case AtemParser::KeywordInt16:
      case AtemParser::KeywordInt32:
      case AtemParser::KeywordInt64:
      case AtemParser::KeywordInt128:
      case AtemParser::KeywordModule:
      case AtemParser::KeywordNever:
      case AtemParser::KeywordOuter:
      case AtemParser::KeywordPackage:
      case AtemParser::KeywordRepeat:
      case AtemParser::KeywordReturn:
      case AtemParser::KeywordSelf:
      case AtemParser::KeywordSome:
      case AtemParser::KeywordString:
      case AtemParser::KeywordSuper:
      case AtemParser::KeywordThis:
      case AtemParser::KeywordThrow:
      case AtemParser::KeywordType:
      case AtemParser::KeywordUInt8:
      case AtemParser::KeywordUInt16:
      case AtemParser::KeywordUInt32:
      case AtemParser::KeywordUInt64:
      case AtemParser::KeywordUInt128:
      case AtemParser::KeywordUnit:
      case AtemParser::KeywordUnreachable:
      case AtemParser::KeywordWhile:
      case AtemParser::Identifier:
      case AtemParser::LeftCurly:
      case AtemParser::LeftParenthese:
      case AtemParser::RightParenthese:
      case AtemParser::LeftSquare:
      case AtemParser::Question: {
        setState(2189);
        type_expression(0);
        break;
      }

      case AtemParser::Underscore: {
        setState(2190);
        match(AtemParser::Underscore);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2193);
    match(AtemParser::Colon);
    setState(2196);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordAny:
      case AtemParser::KeywordBool:
      case AtemParser::KeywordBreak:
      case AtemParser::KeywordByte:
      case AtemParser::KeywordChar8:
      case AtemParser::KeywordChar16:
      case AtemParser::KeywordChar32:
      case AtemParser::KeywordCompileTimeInt:
      case AtemParser::KeywordCompileTimeFloat:
      case AtemParser::KeywordCompileTimeString:
      case AtemParser::KeywordCompileTimeChar:
      case AtemParser::KeywordComptime:
      case AtemParser::KeywordConst:
      case AtemParser::KeywordContinue:
      case AtemParser::KeywordFallthrough:
      case AtemParser::KeywordFloat16:
      case AtemParser::KeywordFloat32:
      case AtemParser::KeywordFloat64:
      case AtemParser::KeywordFloat80:
      case AtemParser::KeywordFloat128:
      case AtemParser::KeywordFor:
      case AtemParser::KeywordGlobal:
      case AtemParser::KeywordIf:
      case AtemParser::KeywordInt8:
      case AtemParser::KeywordInt16:
      case AtemParser::KeywordInt32:
      case AtemParser::KeywordInt64:
      case AtemParser::KeywordInt128:
      case AtemParser::KeywordModule:
      case AtemParser::KeywordNever:
      case AtemParser::KeywordOuter:
      case AtemParser::KeywordPackage:
      case AtemParser::KeywordRepeat:
      case AtemParser::KeywordReturn:
      case AtemParser::KeywordSelf:
      case AtemParser::KeywordSome:
      case AtemParser::KeywordString:
      case AtemParser::KeywordSuper:
      case AtemParser::KeywordThis:
      case AtemParser::KeywordThrow:
      case AtemParser::KeywordType:
      case AtemParser::KeywordUInt8:
      case AtemParser::KeywordUInt16:
      case AtemParser::KeywordUInt32:
      case AtemParser::KeywordUInt64:
      case AtemParser::KeywordUInt128:
      case AtemParser::KeywordUnit:
      case AtemParser::KeywordUnreachable:
      case AtemParser::KeywordWhile:
      case AtemParser::Identifier:
      case AtemParser::LeftCurly:
      case AtemParser::LeftParenthese:
      case AtemParser::RightParenthese:
      case AtemParser::LeftSquare:
      case AtemParser::Question: {
        setState(2194);
        type_expression(0);
        break;
      }

      case AtemParser::Underscore: {
        setState(2195);
        match(AtemParser::Underscore);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2198);
    match(AtemParser::RightSquare);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_typeContext ------------------------------------------------------------------

AtemParser::Set_typeContext::Set_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Set_typeContext::LeftSquare() {
  return getToken(AtemParser::LeftSquare, 0);
}

tree::TerminalNode* AtemParser::Set_typeContext::Colon() {
  return getToken(AtemParser::Colon, 0);
}

tree::TerminalNode* AtemParser::Set_typeContext::RightSquare() {
  return getToken(AtemParser::RightSquare, 0);
}

AtemParser::Type_expressionContext* AtemParser::Set_typeContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

tree::TerminalNode* AtemParser::Set_typeContext::Underscore() {
  return getToken(AtemParser::Underscore, 0);
}


size_t AtemParser::Set_typeContext::getRuleIndex() const {
  return AtemParser::RuleSet_type;
}

void AtemParser::Set_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_type(this);
}

void AtemParser::Set_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_type(this);
}

AtemParser::Set_typeContext* AtemParser::set_type() {
  Set_typeContext *_localctx = _tracker.createInstance<Set_typeContext>(_ctx, getState());
  enterRule(_localctx, 462, AtemParser::RuleSet_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2200);
    match(AtemParser::LeftSquare);
    setState(2201);
    match(AtemParser::Colon);
    setState(2204);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordAny:
      case AtemParser::KeywordBool:
      case AtemParser::KeywordBreak:
      case AtemParser::KeywordByte:
      case AtemParser::KeywordChar8:
      case AtemParser::KeywordChar16:
      case AtemParser::KeywordChar32:
      case AtemParser::KeywordCompileTimeInt:
      case AtemParser::KeywordCompileTimeFloat:
      case AtemParser::KeywordCompileTimeString:
      case AtemParser::KeywordCompileTimeChar:
      case AtemParser::KeywordComptime:
      case AtemParser::KeywordConst:
      case AtemParser::KeywordContinue:
      case AtemParser::KeywordFallthrough:
      case AtemParser::KeywordFloat16:
      case AtemParser::KeywordFloat32:
      case AtemParser::KeywordFloat64:
      case AtemParser::KeywordFloat80:
      case AtemParser::KeywordFloat128:
      case AtemParser::KeywordFor:
      case AtemParser::KeywordGlobal:
      case AtemParser::KeywordIf:
      case AtemParser::KeywordInt8:
      case AtemParser::KeywordInt16:
      case AtemParser::KeywordInt32:
      case AtemParser::KeywordInt64:
      case AtemParser::KeywordInt128:
      case AtemParser::KeywordModule:
      case AtemParser::KeywordNever:
      case AtemParser::KeywordOuter:
      case AtemParser::KeywordPackage:
      case AtemParser::KeywordRepeat:
      case AtemParser::KeywordReturn:
      case AtemParser::KeywordSelf:
      case AtemParser::KeywordSome:
      case AtemParser::KeywordString:
      case AtemParser::KeywordSuper:
      case AtemParser::KeywordThis:
      case AtemParser::KeywordThrow:
      case AtemParser::KeywordType:
      case AtemParser::KeywordUInt8:
      case AtemParser::KeywordUInt16:
      case AtemParser::KeywordUInt32:
      case AtemParser::KeywordUInt64:
      case AtemParser::KeywordUInt128:
      case AtemParser::KeywordUnit:
      case AtemParser::KeywordUnreachable:
      case AtemParser::KeywordWhile:
      case AtemParser::Identifier:
      case AtemParser::LeftCurly:
      case AtemParser::LeftParenthese:
      case AtemParser::RightParenthese:
      case AtemParser::LeftSquare:
      case AtemParser::Question: {
        setState(2202);
        type_expression(0);
        break;
      }

      case AtemParser::Underscore: {
        setState(2203);
        match(AtemParser::Underscore);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2206);
    match(AtemParser::RightSquare);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Const_typeContext ------------------------------------------------------------------

AtemParser::Const_typeContext::Const_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Const_typeContext::KeywordConst() {
  return getToken(AtemParser::KeywordConst, 0);
}

AtemParser::Type_expressionContext* AtemParser::Const_typeContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}


size_t AtemParser::Const_typeContext::getRuleIndex() const {
  return AtemParser::RuleConst_type;
}

void AtemParser::Const_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConst_type(this);
}

void AtemParser::Const_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConst_type(this);
}

AtemParser::Const_typeContext* AtemParser::const_type() {
  Const_typeContext *_localctx = _tracker.createInstance<Const_typeContext>(_ctx, getState());
  enterRule(_localctx, 464, AtemParser::RuleConst_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2208);
    match(AtemParser::KeywordConst);
    setState(2209);
    type_expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_typeContext ------------------------------------------------------------------

AtemParser::Simple_typeContext::Simple_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Integer_typeContext* AtemParser::Simple_typeContext::integer_type() {
  return getRuleContext<AtemParser::Integer_typeContext>(0);
}

AtemParser::Floating_point_typeContext* AtemParser::Simple_typeContext::floating_point_type() {
  return getRuleContext<AtemParser::Floating_point_typeContext>(0);
}

AtemParser::Boolean_typeContext* AtemParser::Simple_typeContext::boolean_type() {
  return getRuleContext<AtemParser::Boolean_typeContext>(0);
}

AtemParser::Byte_typeContext* AtemParser::Simple_typeContext::byte_type() {
  return getRuleContext<AtemParser::Byte_typeContext>(0);
}

AtemParser::Unit_typeContext* AtemParser::Simple_typeContext::unit_type() {
  return getRuleContext<AtemParser::Unit_typeContext>(0);
}

AtemParser::Character_typeContext* AtemParser::Simple_typeContext::character_type() {
  return getRuleContext<AtemParser::Character_typeContext>(0);
}

AtemParser::String_typeContext* AtemParser::Simple_typeContext::string_type() {
  return getRuleContext<AtemParser::String_typeContext>(0);
}

AtemParser::Comptime_typeContext* AtemParser::Simple_typeContext::comptime_type() {
  return getRuleContext<AtemParser::Comptime_typeContext>(0);
}


size_t AtemParser::Simple_typeContext::getRuleIndex() const {
  return AtemParser::RuleSimple_type;
}

void AtemParser::Simple_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_type(this);
}

void AtemParser::Simple_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_type(this);
}

AtemParser::Simple_typeContext* AtemParser::simple_type() {
  Simple_typeContext *_localctx = _tracker.createInstance<Simple_typeContext>(_ctx, getState());
  enterRule(_localctx, 466, AtemParser::RuleSimple_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2219);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::KeywordInt8:
      case AtemParser::KeywordInt16:
      case AtemParser::KeywordInt32:
      case AtemParser::KeywordInt64:
      case AtemParser::KeywordInt128:
      case AtemParser::KeywordUInt8:
      case AtemParser::KeywordUInt16:
      case AtemParser::KeywordUInt32:
      case AtemParser::KeywordUInt64:
      case AtemParser::KeywordUInt128: {
        enterOuterAlt(_localctx, 1);
        setState(2211);
        integer_type();
        break;
      }

      case AtemParser::KeywordFloat16:
      case AtemParser::KeywordFloat32:
      case AtemParser::KeywordFloat64:
      case AtemParser::KeywordFloat80:
      case AtemParser::KeywordFloat128: {
        enterOuterAlt(_localctx, 2);
        setState(2212);
        floating_point_type();
        break;
      }

      case AtemParser::KeywordBool: {
        enterOuterAlt(_localctx, 3);
        setState(2213);
        boolean_type();
        break;
      }

      case AtemParser::KeywordByte: {
        enterOuterAlt(_localctx, 4);
        setState(2214);
        byte_type();
        break;
      }

      case AtemParser::KeywordUnit: {
        enterOuterAlt(_localctx, 5);
        setState(2215);
        unit_type();
        break;
      }

      case AtemParser::KeywordChar8:
      case AtemParser::KeywordChar16:
      case AtemParser::KeywordChar32: {
        enterOuterAlt(_localctx, 6);
        setState(2216);
        character_type();
        break;
      }

      case AtemParser::KeywordString: {
        enterOuterAlt(_localctx, 7);
        setState(2217);
        string_type();
        break;
      }

      case AtemParser::KeywordCompileTimeInt:
      case AtemParser::KeywordCompileTimeFloat:
      case AtemParser::KeywordCompileTimeString:
      case AtemParser::KeywordCompileTimeChar: {
        enterOuterAlt(_localctx, 8);
        setState(2218);
        comptime_type();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Integer_typeContext ------------------------------------------------------------------

AtemParser::Integer_typeContext::Integer_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Integer_typeContext::KeywordInt8() {
  return getToken(AtemParser::KeywordInt8, 0);
}

tree::TerminalNode* AtemParser::Integer_typeContext::KeywordInt16() {
  return getToken(AtemParser::KeywordInt16, 0);
}

tree::TerminalNode* AtemParser::Integer_typeContext::KeywordInt32() {
  return getToken(AtemParser::KeywordInt32, 0);
}

tree::TerminalNode* AtemParser::Integer_typeContext::KeywordInt64() {
  return getToken(AtemParser::KeywordInt64, 0);
}

tree::TerminalNode* AtemParser::Integer_typeContext::KeywordInt128() {
  return getToken(AtemParser::KeywordInt128, 0);
}

tree::TerminalNode* AtemParser::Integer_typeContext::KeywordUInt8() {
  return getToken(AtemParser::KeywordUInt8, 0);
}

tree::TerminalNode* AtemParser::Integer_typeContext::KeywordUInt16() {
  return getToken(AtemParser::KeywordUInt16, 0);
}

tree::TerminalNode* AtemParser::Integer_typeContext::KeywordUInt32() {
  return getToken(AtemParser::KeywordUInt32, 0);
}

tree::TerminalNode* AtemParser::Integer_typeContext::KeywordUInt64() {
  return getToken(AtemParser::KeywordUInt64, 0);
}

tree::TerminalNode* AtemParser::Integer_typeContext::KeywordUInt128() {
  return getToken(AtemParser::KeywordUInt128, 0);
}


size_t AtemParser::Integer_typeContext::getRuleIndex() const {
  return AtemParser::RuleInteger_type;
}

void AtemParser::Integer_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInteger_type(this);
}

void AtemParser::Integer_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInteger_type(this);
}

AtemParser::Integer_typeContext* AtemParser::integer_type() {
  Integer_typeContext *_localctx = _tracker.createInstance<Integer_typeContext>(_ctx, getState());
  enterRule(_localctx, 468, AtemParser::RuleInteger_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2221);
    _la = _input->LA(1);
    if (!(((((_la - 62) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 62)) & 139611588448485407) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Floating_point_typeContext ------------------------------------------------------------------

AtemParser::Floating_point_typeContext::Floating_point_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Floating_point_typeContext::KeywordFloat16() {
  return getToken(AtemParser::KeywordFloat16, 0);
}

tree::TerminalNode* AtemParser::Floating_point_typeContext::KeywordFloat32() {
  return getToken(AtemParser::KeywordFloat32, 0);
}

tree::TerminalNode* AtemParser::Floating_point_typeContext::KeywordFloat64() {
  return getToken(AtemParser::KeywordFloat64, 0);
}

tree::TerminalNode* AtemParser::Floating_point_typeContext::KeywordFloat80() {
  return getToken(AtemParser::KeywordFloat80, 0);
}

tree::TerminalNode* AtemParser::Floating_point_typeContext::KeywordFloat128() {
  return getToken(AtemParser::KeywordFloat128, 0);
}


size_t AtemParser::Floating_point_typeContext::getRuleIndex() const {
  return AtemParser::RuleFloating_point_type;
}

void AtemParser::Floating_point_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFloating_point_type(this);
}

void AtemParser::Floating_point_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFloating_point_type(this);
}

AtemParser::Floating_point_typeContext* AtemParser::floating_point_type() {
  Floating_point_typeContext *_localctx = _tracker.createInstance<Floating_point_typeContext>(_ctx, getState());
  enterRule(_localctx, 470, AtemParser::RuleFloating_point_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2223);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1090715534753792) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Boolean_typeContext ------------------------------------------------------------------

AtemParser::Boolean_typeContext::Boolean_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Boolean_typeContext::KeywordBool() {
  return getToken(AtemParser::KeywordBool, 0);
}


size_t AtemParser::Boolean_typeContext::getRuleIndex() const {
  return AtemParser::RuleBoolean_type;
}

void AtemParser::Boolean_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_type(this);
}

void AtemParser::Boolean_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_type(this);
}

AtemParser::Boolean_typeContext* AtemParser::boolean_type() {
  Boolean_typeContext *_localctx = _tracker.createInstance<Boolean_typeContext>(_ctx, getState());
  enterRule(_localctx, 472, AtemParser::RuleBoolean_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2225);
    match(AtemParser::KeywordBool);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Byte_typeContext ------------------------------------------------------------------

AtemParser::Byte_typeContext::Byte_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Byte_typeContext::KeywordByte() {
  return getToken(AtemParser::KeywordByte, 0);
}


size_t AtemParser::Byte_typeContext::getRuleIndex() const {
  return AtemParser::RuleByte_type;
}

void AtemParser::Byte_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterByte_type(this);
}

void AtemParser::Byte_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitByte_type(this);
}

AtemParser::Byte_typeContext* AtemParser::byte_type() {
  Byte_typeContext *_localctx = _tracker.createInstance<Byte_typeContext>(_ctx, getState());
  enterRule(_localctx, 474, AtemParser::RuleByte_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2227);
    match(AtemParser::KeywordByte);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unit_typeContext ------------------------------------------------------------------

AtemParser::Unit_typeContext::Unit_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Unit_typeContext::KeywordUnit() {
  return getToken(AtemParser::KeywordUnit, 0);
}


size_t AtemParser::Unit_typeContext::getRuleIndex() const {
  return AtemParser::RuleUnit_type;
}

void AtemParser::Unit_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnit_type(this);
}

void AtemParser::Unit_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnit_type(this);
}

AtemParser::Unit_typeContext* AtemParser::unit_type() {
  Unit_typeContext *_localctx = _tracker.createInstance<Unit_typeContext>(_ctx, getState());
  enterRule(_localctx, 476, AtemParser::RuleUnit_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2229);
    match(AtemParser::KeywordUnit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Character_typeContext ------------------------------------------------------------------

AtemParser::Character_typeContext::Character_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Character_typeContext::KeywordChar8() {
  return getToken(AtemParser::KeywordChar8, 0);
}

tree::TerminalNode* AtemParser::Character_typeContext::KeywordChar16() {
  return getToken(AtemParser::KeywordChar16, 0);
}

tree::TerminalNode* AtemParser::Character_typeContext::KeywordChar32() {
  return getToken(AtemParser::KeywordChar32, 0);
}


size_t AtemParser::Character_typeContext::getRuleIndex() const {
  return AtemParser::RuleCharacter_type;
}

void AtemParser::Character_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCharacter_type(this);
}

void AtemParser::Character_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCharacter_type(this);
}

AtemParser::Character_typeContext* AtemParser::character_type() {
  Character_typeContext *_localctx = _tracker.createInstance<Character_typeContext>(_ctx, getState());
  enterRule(_localctx, 478, AtemParser::RuleCharacter_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2231);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 458752) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- String_typeContext ------------------------------------------------------------------

AtemParser::String_typeContext::String_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::String_typeContext::KeywordString() {
  return getToken(AtemParser::KeywordString, 0);
}


size_t AtemParser::String_typeContext::getRuleIndex() const {
  return AtemParser::RuleString_type;
}

void AtemParser::String_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString_type(this);
}

void AtemParser::String_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString_type(this);
}

AtemParser::String_typeContext* AtemParser::string_type() {
  String_typeContext *_localctx = _tracker.createInstance<String_typeContext>(_ctx, getState());
  enterRule(_localctx, 480, AtemParser::RuleString_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2233);
    match(AtemParser::KeywordString);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comptime_typeContext ------------------------------------------------------------------

AtemParser::Comptime_typeContext::Comptime_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Comptime_typeContext::KeywordCompileTimeChar() {
  return getToken(AtemParser::KeywordCompileTimeChar, 0);
}

tree::TerminalNode* AtemParser::Comptime_typeContext::KeywordCompileTimeFloat() {
  return getToken(AtemParser::KeywordCompileTimeFloat, 0);
}

tree::TerminalNode* AtemParser::Comptime_typeContext::KeywordCompileTimeInt() {
  return getToken(AtemParser::KeywordCompileTimeInt, 0);
}

tree::TerminalNode* AtemParser::Comptime_typeContext::KeywordCompileTimeString() {
  return getToken(AtemParser::KeywordCompileTimeString, 0);
}


size_t AtemParser::Comptime_typeContext::getRuleIndex() const {
  return AtemParser::RuleComptime_type;
}

void AtemParser::Comptime_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComptime_type(this);
}

void AtemParser::Comptime_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComptime_type(this);
}

AtemParser::Comptime_typeContext* AtemParser::comptime_type() {
  Comptime_typeContext *_localctx = _tracker.createInstance<Comptime_typeContext>(_ctx, getState());
  enterRule(_localctx, 482, AtemParser::RuleComptime_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2235);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 15728640) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_typeContext ------------------------------------------------------------------

AtemParser::Type_typeContext::Type_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Type_typeContext::KeywordType() {
  return getToken(AtemParser::KeywordType, 0);
}


size_t AtemParser::Type_typeContext::getRuleIndex() const {
  return AtemParser::RuleType_type;
}

void AtemParser::Type_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_type(this);
}

void AtemParser::Type_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_type(this);
}

AtemParser::Type_typeContext* AtemParser::type_type() {
  Type_typeContext *_localctx = _tracker.createInstance<Type_typeContext>(_ctx, getState());
  enterRule(_localctx, 484, AtemParser::RuleType_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2237);
    match(AtemParser::KeywordType);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tuple_expressionContext ------------------------------------------------------------------

AtemParser::Tuple_expressionContext::Tuple_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Tuple_expressionContext::LeftParenthese() {
  return getToken(AtemParser::LeftParenthese, 0);
}

tree::TerminalNode* AtemParser::Tuple_expressionContext::RightParenthese() {
  return getToken(AtemParser::RightParenthese, 0);
}

AtemParser::Tuple_elementContext* AtemParser::Tuple_expressionContext::tuple_element() {
  return getRuleContext<AtemParser::Tuple_elementContext>(0);
}

tree::TerminalNode* AtemParser::Tuple_expressionContext::Comma() {
  return getToken(AtemParser::Comma, 0);
}

AtemParser::Tuple_element_listContext* AtemParser::Tuple_expressionContext::tuple_element_list() {
  return getRuleContext<AtemParser::Tuple_element_listContext>(0);
}


size_t AtemParser::Tuple_expressionContext::getRuleIndex() const {
  return AtemParser::RuleTuple_expression;
}

void AtemParser::Tuple_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTuple_expression(this);
}

void AtemParser::Tuple_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTuple_expression(this);
}

AtemParser::Tuple_expressionContext* AtemParser::tuple_expression() {
  Tuple_expressionContext *_localctx = _tracker.createInstance<Tuple_expressionContext>(_ctx, getState());
  enterRule(_localctx, 486, AtemParser::RuleTuple_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2247);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2239);
      match(AtemParser::LeftParenthese);
      setState(2240);
      match(AtemParser::RightParenthese);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2241);
      match(AtemParser::LeftParenthese);
      setState(2242);
      tuple_element();
      setState(2243);
      match(AtemParser::Comma);
      setState(2244);
      tuple_element_list();
      setState(2245);
      match(AtemParser::RightParenthese);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tuple_element_listContext ------------------------------------------------------------------

AtemParser::Tuple_element_listContext::Tuple_element_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Tuple_elementContext *> AtemParser::Tuple_element_listContext::tuple_element() {
  return getRuleContexts<AtemParser::Tuple_elementContext>();
}

AtemParser::Tuple_elementContext* AtemParser::Tuple_element_listContext::tuple_element(size_t i) {
  return getRuleContext<AtemParser::Tuple_elementContext>(i);
}

std::vector<tree::TerminalNode *> AtemParser::Tuple_element_listContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Tuple_element_listContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}


size_t AtemParser::Tuple_element_listContext::getRuleIndex() const {
  return AtemParser::RuleTuple_element_list;
}

void AtemParser::Tuple_element_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTuple_element_list(this);
}

void AtemParser::Tuple_element_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTuple_element_list(this);
}

AtemParser::Tuple_element_listContext* AtemParser::tuple_element_list() {
  Tuple_element_listContext *_localctx = _tracker.createInstance<Tuple_element_listContext>(_ctx, getState());
  enterRule(_localctx, 488, AtemParser::RuleTuple_element_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2249);
    tuple_element();
    setState(2254);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AtemParser::Comma) {
      setState(2250);
      match(AtemParser::Comma);
      setState(2251);
      tuple_element();
      setState(2256);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tuple_elementContext ------------------------------------------------------------------

AtemParser::Tuple_elementContext::Tuple_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::ExpressionContext* AtemParser::Tuple_elementContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

tree::TerminalNode* AtemParser::Tuple_elementContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}

tree::TerminalNode* AtemParser::Tuple_elementContext::Assign() {
  return getToken(AtemParser::Assign, 0);
}


size_t AtemParser::Tuple_elementContext::getRuleIndex() const {
  return AtemParser::RuleTuple_element;
}

void AtemParser::Tuple_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTuple_element(this);
}

void AtemParser::Tuple_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTuple_element(this);
}

AtemParser::Tuple_elementContext* AtemParser::tuple_element() {
  Tuple_elementContext *_localctx = _tracker.createInstance<Tuple_elementContext>(_ctx, getState());
  enterRule(_localctx, 490, AtemParser::RuleTuple_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2259);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx)) {
    case 1: {
      setState(2257);
      match(AtemParser::Identifier);
      setState(2258);
      match(AtemParser::Assign);
      break;
    }

    default:
      break;
    }
    setState(2261);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Path_expressionContext ------------------------------------------------------------------

AtemParser::Path_expressionContext::Path_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Path_expression_elementContext *> AtemParser::Path_expressionContext::path_expression_element() {
  return getRuleContexts<AtemParser::Path_expression_elementContext>();
}

AtemParser::Path_expression_elementContext* AtemParser::Path_expressionContext::path_expression_element(size_t i) {
  return getRuleContext<AtemParser::Path_expression_elementContext>(i);
}

tree::TerminalNode* AtemParser::Path_expressionContext::KeywordGlobal() {
  return getToken(AtemParser::KeywordGlobal, 0);
}

std::vector<tree::TerminalNode *> AtemParser::Path_expressionContext::Dot() {
  return getTokens(AtemParser::Dot);
}

tree::TerminalNode* AtemParser::Path_expressionContext::Dot(size_t i) {
  return getToken(AtemParser::Dot, i);
}


size_t AtemParser::Path_expressionContext::getRuleIndex() const {
  return AtemParser::RulePath_expression;
}

void AtemParser::Path_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPath_expression(this);
}

void AtemParser::Path_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPath_expression(this);
}

AtemParser::Path_expressionContext* AtemParser::path_expression() {
  Path_expressionContext *_localctx = _tracker.createInstance<Path_expressionContext>(_ctx, getState());
  enterRule(_localctx, 492, AtemParser::RulePath_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::KeywordGlobal) {
      setState(2263);
      match(AtemParser::KeywordGlobal);
      setState(2264);
      match(AtemParser::Dot);
    }
    setState(2267);
    path_expression_element();
    setState(2272);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx);
    while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1 + 1) {
        setState(2268);
        match(AtemParser::Dot);
        setState(2269);
        path_expression_element(); 
      }
      setState(2274);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Path_expression_elementContext ------------------------------------------------------------------

AtemParser::Path_expression_elementContext::Path_expression_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Path_expression_elementContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}

tree::TerminalNode* AtemParser::Path_expression_elementContext::KeywordSuper() {
  return getToken(AtemParser::KeywordSuper, 0);
}

tree::TerminalNode* AtemParser::Path_expression_elementContext::KeywordSelf() {
  return getToken(AtemParser::KeywordSelf, 0);
}

tree::TerminalNode* AtemParser::Path_expression_elementContext::KeywordThis() {
  return getToken(AtemParser::KeywordThis, 0);
}

tree::TerminalNode* AtemParser::Path_expression_elementContext::KeywordOuter() {
  return getToken(AtemParser::KeywordOuter, 0);
}

tree::TerminalNode* AtemParser::Path_expression_elementContext::KeywordModule() {
  return getToken(AtemParser::KeywordModule, 0);
}

tree::TerminalNode* AtemParser::Path_expression_elementContext::KeywordPackage() {
  return getToken(AtemParser::KeywordPackage, 0);
}


size_t AtemParser::Path_expression_elementContext::getRuleIndex() const {
  return AtemParser::RulePath_expression_element;
}

void AtemParser::Path_expression_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPath_expression_element(this);
}

void AtemParser::Path_expression_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPath_expression_element(this);
}

AtemParser::Path_expression_elementContext* AtemParser::path_expression_element() {
  Path_expression_elementContext *_localctx = _tracker.createInstance<Path_expression_elementContext>(_ctx, getState());
  enterRule(_localctx, 494, AtemParser::RulePath_expression_element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2275);
    _la = _input->LA(1);
    if (!(((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 144115207419996161) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_expressionContext ------------------------------------------------------------------

AtemParser::Literal_expressionContext::Literal_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::LiteralContext* AtemParser::Literal_expressionContext::literal() {
  return getRuleContext<AtemParser::LiteralContext>(0);
}


size_t AtemParser::Literal_expressionContext::getRuleIndex() const {
  return AtemParser::RuleLiteral_expression;
}

void AtemParser::Literal_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_expression(this);
}

void AtemParser::Literal_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_expression(this);
}

AtemParser::Literal_expressionContext* AtemParser::literal_expression() {
  Literal_expressionContext *_localctx = _tracker.createInstance<Literal_expressionContext>(_ctx, getState());
  enterRule(_localctx, 496, AtemParser::RuleLiteral_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2277);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

AtemParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Numeric_literalContext* AtemParser::LiteralContext::numeric_literal() {
  return getRuleContext<AtemParser::Numeric_literalContext>(0);
}

AtemParser::Boolean_literalContext* AtemParser::LiteralContext::boolean_literal() {
  return getRuleContext<AtemParser::Boolean_literalContext>(0);
}

AtemParser::String_literalContext* AtemParser::LiteralContext::string_literal() {
  return getRuleContext<AtemParser::String_literalContext>(0);
}

AtemParser::Null_literalContext* AtemParser::LiteralContext::null_literal() {
  return getRuleContext<AtemParser::Null_literalContext>(0);
}

AtemParser::Undefined_literalContext* AtemParser::LiteralContext::undefined_literal() {
  return getRuleContext<AtemParser::Undefined_literalContext>(0);
}

AtemParser::Default_literalContext* AtemParser::LiteralContext::default_literal() {
  return getRuleContext<AtemParser::Default_literalContext>(0);
}

AtemParser::Array_literalContext* AtemParser::LiteralContext::array_literal() {
  return getRuleContext<AtemParser::Array_literalContext>(0);
}


size_t AtemParser::LiteralContext::getRuleIndex() const {
  return AtemParser::RuleLiteral;
}

void AtemParser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void AtemParser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}

AtemParser::LiteralContext* AtemParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 498, AtemParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2286);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::BinaryLiteral:
      case AtemParser::OctalLiteral:
      case AtemParser::DecimalDigits:
      case AtemParser::DecimalLiteral:
      case AtemParser::HexadecimalLiteral:
      case AtemParser::FloatingPointLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(2279);
        numeric_literal();
        break;
      }

      case AtemParser::KeywordFalse:
      case AtemParser::KeywordTrue: {
        enterOuterAlt(_localctx, 2);
        setState(2280);
        boolean_literal();
        break;
      }

      case AtemParser::MultiLineExtendedStringOpen:
      case AtemParser::SingleLineExtendedStringOpen:
      case AtemParser::MultiLineStringOpen:
      case AtemParser::SingleLineStringOpen: {
        enterOuterAlt(_localctx, 3);
        setState(2281);
        string_literal();
        break;
      }

      case AtemParser::KeywordNull: {
        enterOuterAlt(_localctx, 4);
        setState(2282);
        null_literal();
        break;
      }

      case AtemParser::KeywordUndefined: {
        enterOuterAlt(_localctx, 5);
        setState(2283);
        undefined_literal();
        break;
      }

      case AtemParser::KeywordDefault: {
        enterOuterAlt(_localctx, 6);
        setState(2284);
        default_literal();
        break;
      }

      case AtemParser::LeftCurly: {
        enterOuterAlt(_localctx, 7);
        setState(2285);
        array_literal();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Numeric_literalContext ------------------------------------------------------------------

AtemParser::Numeric_literalContext::Numeric_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Integer_literalContext* AtemParser::Numeric_literalContext::integer_literal() {
  return getRuleContext<AtemParser::Integer_literalContext>(0);
}

AtemParser::Floating_point_literalContext* AtemParser::Numeric_literalContext::floating_point_literal() {
  return getRuleContext<AtemParser::Floating_point_literalContext>(0);
}


size_t AtemParser::Numeric_literalContext::getRuleIndex() const {
  return AtemParser::RuleNumeric_literal;
}

void AtemParser::Numeric_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumeric_literal(this);
}

void AtemParser::Numeric_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumeric_literal(this);
}

AtemParser::Numeric_literalContext* AtemParser::numeric_literal() {
  Numeric_literalContext *_localctx = _tracker.createInstance<Numeric_literalContext>(_ctx, getState());
  enterRule(_localctx, 500, AtemParser::RuleNumeric_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2290);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::BinaryLiteral:
      case AtemParser::OctalLiteral:
      case AtemParser::DecimalDigits:
      case AtemParser::DecimalLiteral:
      case AtemParser::HexadecimalLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(2288);
        integer_literal();
        break;
      }

      case AtemParser::FloatingPointLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(2289);
        floating_point_literal();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Integer_literalContext ------------------------------------------------------------------

AtemParser::Integer_literalContext::Integer_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Integer_literalContext::DecimalDigits() {
  return getToken(AtemParser::DecimalDigits, 0);
}

tree::TerminalNode* AtemParser::Integer_literalContext::DecimalLiteral() {
  return getToken(AtemParser::DecimalLiteral, 0);
}

tree::TerminalNode* AtemParser::Integer_literalContext::BinaryLiteral() {
  return getToken(AtemParser::BinaryLiteral, 0);
}

tree::TerminalNode* AtemParser::Integer_literalContext::OctalLiteral() {
  return getToken(AtemParser::OctalLiteral, 0);
}

tree::TerminalNode* AtemParser::Integer_literalContext::HexadecimalLiteral() {
  return getToken(AtemParser::HexadecimalLiteral, 0);
}


size_t AtemParser::Integer_literalContext::getRuleIndex() const {
  return AtemParser::RuleInteger_literal;
}

void AtemParser::Integer_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInteger_literal(this);
}

void AtemParser::Integer_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInteger_literal(this);
}

AtemParser::Integer_literalContext* AtemParser::integer_literal() {
  Integer_literalContext *_localctx = _tracker.createInstance<Integer_literalContext>(_ctx, getState());
  enterRule(_localctx, 502, AtemParser::RuleInteger_literal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2292);
    _la = _input->LA(1);
    if (!(((((_la - 131) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 131)) & 31) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Floating_point_literalContext ------------------------------------------------------------------

AtemParser::Floating_point_literalContext::Floating_point_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Floating_point_literalContext::FloatingPointLiteral() {
  return getToken(AtemParser::FloatingPointLiteral, 0);
}


size_t AtemParser::Floating_point_literalContext::getRuleIndex() const {
  return AtemParser::RuleFloating_point_literal;
}

void AtemParser::Floating_point_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFloating_point_literal(this);
}

void AtemParser::Floating_point_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFloating_point_literal(this);
}

AtemParser::Floating_point_literalContext* AtemParser::floating_point_literal() {
  Floating_point_literalContext *_localctx = _tracker.createInstance<Floating_point_literalContext>(_ctx, getState());
  enterRule(_localctx, 504, AtemParser::RuleFloating_point_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2294);
    match(AtemParser::FloatingPointLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Boolean_literalContext ------------------------------------------------------------------

AtemParser::Boolean_literalContext::Boolean_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Boolean_literalContext::KeywordTrue() {
  return getToken(AtemParser::KeywordTrue, 0);
}

tree::TerminalNode* AtemParser::Boolean_literalContext::KeywordFalse() {
  return getToken(AtemParser::KeywordFalse, 0);
}


size_t AtemParser::Boolean_literalContext::getRuleIndex() const {
  return AtemParser::RuleBoolean_literal;
}

void AtemParser::Boolean_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_literal(this);
}

void AtemParser::Boolean_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_literal(this);
}

AtemParser::Boolean_literalContext* AtemParser::boolean_literal() {
  Boolean_literalContext *_localctx = _tracker.createInstance<Boolean_literalContext>(_ctx, getState());
  enterRule(_localctx, 506, AtemParser::RuleBoolean_literal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2296);
    _la = _input->LA(1);
    if (!(_la == AtemParser::KeywordFalse || _la == AtemParser::KeywordTrue)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_literalContext ------------------------------------------------------------------

AtemParser::Null_literalContext::Null_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Null_literalContext::KeywordNull() {
  return getToken(AtemParser::KeywordNull, 0);
}


size_t AtemParser::Null_literalContext::getRuleIndex() const {
  return AtemParser::RuleNull_literal;
}

void AtemParser::Null_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_literal(this);
}

void AtemParser::Null_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_literal(this);
}

AtemParser::Null_literalContext* AtemParser::null_literal() {
  Null_literalContext *_localctx = _tracker.createInstance<Null_literalContext>(_ctx, getState());
  enterRule(_localctx, 508, AtemParser::RuleNull_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2298);
    match(AtemParser::KeywordNull);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Undefined_literalContext ------------------------------------------------------------------

AtemParser::Undefined_literalContext::Undefined_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Undefined_literalContext::KeywordUndefined() {
  return getToken(AtemParser::KeywordUndefined, 0);
}


size_t AtemParser::Undefined_literalContext::getRuleIndex() const {
  return AtemParser::RuleUndefined_literal;
}

void AtemParser::Undefined_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUndefined_literal(this);
}

void AtemParser::Undefined_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUndefined_literal(this);
}

AtemParser::Undefined_literalContext* AtemParser::undefined_literal() {
  Undefined_literalContext *_localctx = _tracker.createInstance<Undefined_literalContext>(_ctx, getState());
  enterRule(_localctx, 510, AtemParser::RuleUndefined_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2300);
    match(AtemParser::KeywordUndefined);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Default_literalContext ------------------------------------------------------------------

AtemParser::Default_literalContext::Default_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Default_literalContext::KeywordDefault() {
  return getToken(AtemParser::KeywordDefault, 0);
}


size_t AtemParser::Default_literalContext::getRuleIndex() const {
  return AtemParser::RuleDefault_literal;
}

void AtemParser::Default_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefault_literal(this);
}

void AtemParser::Default_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefault_literal(this);
}

AtemParser::Default_literalContext* AtemParser::default_literal() {
  Default_literalContext *_localctx = _tracker.createInstance<Default_literalContext>(_ctx, getState());
  enterRule(_localctx, 512, AtemParser::RuleDefault_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2302);
    match(AtemParser::KeywordDefault);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_literalContext ------------------------------------------------------------------

AtemParser::Array_literalContext::Array_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Array_literalContext::LeftCurly() {
  return getToken(AtemParser::LeftCurly, 0);
}

tree::TerminalNode* AtemParser::Array_literalContext::RightCurly() {
  return getToken(AtemParser::RightCurly, 0);
}

std::vector<AtemParser::ExpressionContext *> AtemParser::Array_literalContext::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Array_literalContext::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AtemParser::Array_literalContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Array_literalContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}


size_t AtemParser::Array_literalContext::getRuleIndex() const {
  return AtemParser::RuleArray_literal;
}

void AtemParser::Array_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_literal(this);
}

void AtemParser::Array_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_literal(this);
}

AtemParser::Array_literalContext* AtemParser::array_literal() {
  Array_literalContext *_localctx = _tracker.createInstance<Array_literalContext>(_ctx, getState());
  enterRule(_localctx, 514, AtemParser::RuleArray_literal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2304);
    match(AtemParser::LeftCurly);
    setState(2316);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4406800478583702124) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 9223279040131033607) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 8792357885) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 193)) & 32212257801) != 0)) {
      setState(2305);
      expression(0);
      setState(2310);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2306);
          match(AtemParser::Comma);
          setState(2307);
          expression(0); 
        }
        setState(2312);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx);
      }
      setState(2314);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AtemParser::Comma) {
        setState(2313);
        match(AtemParser::Comma);
      }
    }
    setState(2318);
    match(AtemParser::RightCurly);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- String_literalContext ------------------------------------------------------------------

AtemParser::String_literalContext::String_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::Extended_string_literalContext* AtemParser::String_literalContext::extended_string_literal() {
  return getRuleContext<AtemParser::Extended_string_literalContext>(0);
}

AtemParser::Interpolated_string_literalContext* AtemParser::String_literalContext::interpolated_string_literal() {
  return getRuleContext<AtemParser::Interpolated_string_literalContext>(0);
}

AtemParser::Static_string_literalContext* AtemParser::String_literalContext::static_string_literal() {
  return getRuleContext<AtemParser::Static_string_literalContext>(0);
}


size_t AtemParser::String_literalContext::getRuleIndex() const {
  return AtemParser::RuleString_literal;
}

void AtemParser::String_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString_literal(this);
}

void AtemParser::String_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString_literal(this);
}

AtemParser::String_literalContext* AtemParser::string_literal() {
  String_literalContext *_localctx = _tracker.createInstance<String_literalContext>(_ctx, getState());
  enterRule(_localctx, 516, AtemParser::RuleString_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2323);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 269, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2320);
      extended_string_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2321);
      interpolated_string_literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2322);
      static_string_literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extended_string_literalContext ------------------------------------------------------------------

AtemParser::Extended_string_literalContext::Extended_string_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Extended_string_literalContext::MultiLineExtendedStringOpen() {
  return getToken(AtemParser::MultiLineExtendedStringOpen, 0);
}

tree::TerminalNode* AtemParser::Extended_string_literalContext::MultiLineExtendedStringClose() {
  return getToken(AtemParser::MultiLineExtendedStringClose, 0);
}

std::vector<tree::TerminalNode *> AtemParser::Extended_string_literalContext::QuotedMultiLineExtendedText() {
  return getTokens(AtemParser::QuotedMultiLineExtendedText);
}

tree::TerminalNode* AtemParser::Extended_string_literalContext::QuotedMultiLineExtendedText(size_t i) {
  return getToken(AtemParser::QuotedMultiLineExtendedText, i);
}

tree::TerminalNode* AtemParser::Extended_string_literalContext::SingleLineExtendedStringOpen() {
  return getToken(AtemParser::SingleLineExtendedStringOpen, 0);
}

tree::TerminalNode* AtemParser::Extended_string_literalContext::SingleLineExtendedStringClose() {
  return getToken(AtemParser::SingleLineExtendedStringClose, 0);
}

std::vector<tree::TerminalNode *> AtemParser::Extended_string_literalContext::QuotedSingleLineExtendedText() {
  return getTokens(AtemParser::QuotedSingleLineExtendedText);
}

tree::TerminalNode* AtemParser::Extended_string_literalContext::QuotedSingleLineExtendedText(size_t i) {
  return getToken(AtemParser::QuotedSingleLineExtendedText, i);
}


size_t AtemParser::Extended_string_literalContext::getRuleIndex() const {
  return AtemParser::RuleExtended_string_literal;
}

void AtemParser::Extended_string_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtended_string_literal(this);
}

void AtemParser::Extended_string_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtended_string_literal(this);
}

AtemParser::Extended_string_literalContext* AtemParser::extended_string_literal() {
  Extended_string_literalContext *_localctx = _tracker.createInstance<Extended_string_literalContext>(_ctx, getState());
  enterRule(_localctx, 518, AtemParser::RuleExtended_string_literal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2339);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::MultiLineExtendedStringOpen: {
        enterOuterAlt(_localctx, 1);
        setState(2325);
        match(AtemParser::MultiLineExtendedStringOpen);
        setState(2327); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2326);
          match(AtemParser::QuotedMultiLineExtendedText);
          setState(2329); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == AtemParser::QuotedMultiLineExtendedText);
        setState(2331);
        match(AtemParser::MultiLineExtendedStringClose);
        break;
      }

      case AtemParser::SingleLineExtendedStringOpen: {
        enterOuterAlt(_localctx, 2);
        setState(2332);
        match(AtemParser::SingleLineExtendedStringOpen);
        setState(2334); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2333);
          match(AtemParser::QuotedSingleLineExtendedText);
          setState(2336); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == AtemParser::QuotedSingleLineExtendedText);
        setState(2338);
        match(AtemParser::SingleLineExtendedStringClose);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Static_string_literalContext ------------------------------------------------------------------

AtemParser::Static_string_literalContext::Static_string_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Static_string_literalContext::SingleLineStringOpen() {
  return getToken(AtemParser::SingleLineStringOpen, 0);
}

tree::TerminalNode* AtemParser::Static_string_literalContext::SingleLineStringClose() {
  return getToken(AtemParser::SingleLineStringClose, 0);
}

std::vector<tree::TerminalNode *> AtemParser::Static_string_literalContext::QuotedSingleLineText() {
  return getTokens(AtemParser::QuotedSingleLineText);
}

tree::TerminalNode* AtemParser::Static_string_literalContext::QuotedSingleLineText(size_t i) {
  return getToken(AtemParser::QuotedSingleLineText, i);
}

tree::TerminalNode* AtemParser::Static_string_literalContext::MultiLineStringOpen() {
  return getToken(AtemParser::MultiLineStringOpen, 0);
}

tree::TerminalNode* AtemParser::Static_string_literalContext::MultiLineStringClose() {
  return getToken(AtemParser::MultiLineStringClose, 0);
}

std::vector<tree::TerminalNode *> AtemParser::Static_string_literalContext::QuotedMultiLineText() {
  return getTokens(AtemParser::QuotedMultiLineText);
}

tree::TerminalNode* AtemParser::Static_string_literalContext::QuotedMultiLineText(size_t i) {
  return getToken(AtemParser::QuotedMultiLineText, i);
}


size_t AtemParser::Static_string_literalContext::getRuleIndex() const {
  return AtemParser::RuleStatic_string_literal;
}

void AtemParser::Static_string_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatic_string_literal(this);
}

void AtemParser::Static_string_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatic_string_literal(this);
}

AtemParser::Static_string_literalContext* AtemParser::static_string_literal() {
  Static_string_literalContext *_localctx = _tracker.createInstance<Static_string_literalContext>(_ctx, getState());
  enterRule(_localctx, 520, AtemParser::RuleStatic_string_literal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2357);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::SingleLineStringOpen: {
        enterOuterAlt(_localctx, 1);
        setState(2341);
        match(AtemParser::SingleLineStringOpen);
        setState(2345);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == AtemParser::QuotedSingleLineText) {
          setState(2342);
          match(AtemParser::QuotedSingleLineText);
          setState(2347);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2348);
        match(AtemParser::SingleLineStringClose);
        break;
      }

      case AtemParser::MultiLineStringOpen: {
        enterOuterAlt(_localctx, 2);
        setState(2349);
        match(AtemParser::MultiLineStringOpen);
        setState(2353);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == AtemParser::QuotedMultiLineText) {
          setState(2350);
          match(AtemParser::QuotedMultiLineText);
          setState(2355);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2356);
        match(AtemParser::MultiLineStringClose);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interpolated_string_literalContext ------------------------------------------------------------------

AtemParser::Interpolated_string_literalContext::Interpolated_string_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Interpolated_string_literalContext::SingleLineStringOpen() {
  return getToken(AtemParser::SingleLineStringOpen, 0);
}

tree::TerminalNode* AtemParser::Interpolated_string_literalContext::SingleLineStringClose() {
  return getToken(AtemParser::SingleLineStringClose, 0);
}

std::vector<tree::TerminalNode *> AtemParser::Interpolated_string_literalContext::QuotedSingleLineText() {
  return getTokens(AtemParser::QuotedSingleLineText);
}

tree::TerminalNode* AtemParser::Interpolated_string_literalContext::QuotedSingleLineText(size_t i) {
  return getToken(AtemParser::QuotedSingleLineText, i);
}

std::vector<tree::TerminalNode *> AtemParser::Interpolated_string_literalContext::InterpolataionSingleLine() {
  return getTokens(AtemParser::InterpolataionSingleLine);
}

tree::TerminalNode* AtemParser::Interpolated_string_literalContext::InterpolataionSingleLine(size_t i) {
  return getToken(AtemParser::InterpolataionSingleLine, i);
}

std::vector<tree::TerminalNode *> AtemParser::Interpolated_string_literalContext::RightCurly() {
  return getTokens(AtemParser::RightCurly);
}

tree::TerminalNode* AtemParser::Interpolated_string_literalContext::RightCurly(size_t i) {
  return getToken(AtemParser::RightCurly, i);
}

std::vector<AtemParser::ExpressionContext *> AtemParser::Interpolated_string_literalContext::expression() {
  return getRuleContexts<AtemParser::ExpressionContext>();
}

AtemParser::ExpressionContext* AtemParser::Interpolated_string_literalContext::expression(size_t i) {
  return getRuleContext<AtemParser::ExpressionContext>(i);
}

std::vector<AtemParser::Tuple_elementContext *> AtemParser::Interpolated_string_literalContext::tuple_element() {
  return getRuleContexts<AtemParser::Tuple_elementContext>();
}

AtemParser::Tuple_elementContext* AtemParser::Interpolated_string_literalContext::tuple_element(size_t i) {
  return getRuleContext<AtemParser::Tuple_elementContext>(i);
}

std::vector<tree::TerminalNode *> AtemParser::Interpolated_string_literalContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Interpolated_string_literalContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}

std::vector<AtemParser::Tuple_element_listContext *> AtemParser::Interpolated_string_literalContext::tuple_element_list() {
  return getRuleContexts<AtemParser::Tuple_element_listContext>();
}

AtemParser::Tuple_element_listContext* AtemParser::Interpolated_string_literalContext::tuple_element_list(size_t i) {
  return getRuleContext<AtemParser::Tuple_element_listContext>(i);
}

tree::TerminalNode* AtemParser::Interpolated_string_literalContext::MultiLineStringOpen() {
  return getToken(AtemParser::MultiLineStringOpen, 0);
}

tree::TerminalNode* AtemParser::Interpolated_string_literalContext::MultiLineStringClose() {
  return getToken(AtemParser::MultiLineStringClose, 0);
}

std::vector<tree::TerminalNode *> AtemParser::Interpolated_string_literalContext::QuotedMultiLineText() {
  return getTokens(AtemParser::QuotedMultiLineText);
}

tree::TerminalNode* AtemParser::Interpolated_string_literalContext::QuotedMultiLineText(size_t i) {
  return getToken(AtemParser::QuotedMultiLineText, i);
}

std::vector<tree::TerminalNode *> AtemParser::Interpolated_string_literalContext::InterpolataionMultiLine() {
  return getTokens(AtemParser::InterpolataionMultiLine);
}

tree::TerminalNode* AtemParser::Interpolated_string_literalContext::InterpolataionMultiLine(size_t i) {
  return getToken(AtemParser::InterpolataionMultiLine, i);
}


size_t AtemParser::Interpolated_string_literalContext::getRuleIndex() const {
  return AtemParser::RuleInterpolated_string_literal;
}

void AtemParser::Interpolated_string_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterpolated_string_literal(this);
}

void AtemParser::Interpolated_string_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterpolated_string_literal(this);
}

AtemParser::Interpolated_string_literalContext* AtemParser::interpolated_string_literal() {
  Interpolated_string_literalContext *_localctx = _tracker.createInstance<Interpolated_string_literalContext>(_ctx, getState());
  enterRule(_localctx, 522, AtemParser::RuleInterpolated_string_literal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2395);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AtemParser::SingleLineStringOpen: {
        enterOuterAlt(_localctx, 1);
        setState(2359);
        match(AtemParser::SingleLineStringOpen);
        setState(2373);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == AtemParser::InterpolataionSingleLine

        || _la == AtemParser::QuotedSingleLineText) {
          setState(2371);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case AtemParser::QuotedSingleLineText: {
              setState(2360);
              match(AtemParser::QuotedSingleLineText);
              break;
            }

            case AtemParser::InterpolataionSingleLine: {
              setState(2361);
              match(AtemParser::InterpolataionSingleLine);
              setState(2367);
              _errHandler->sync(this);
              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx)) {
              case 1: {
                setState(2362);
                expression(0);
                break;
              }

              case 2: {
                setState(2363);
                tuple_element();
                setState(2364);
                match(AtemParser::Comma);
                setState(2365);
                tuple_element_list();
                break;
              }

              default:
                break;
              }
              setState(2369);
              match(AtemParser::RightCurly);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(2375);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2376);
        match(AtemParser::SingleLineStringClose);
        break;
      }

      case AtemParser::MultiLineStringOpen: {
        enterOuterAlt(_localctx, 2);
        setState(2377);
        match(AtemParser::MultiLineStringOpen);
        setState(2391);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == AtemParser::InterpolataionMultiLine

        || _la == AtemParser::QuotedMultiLineText) {
          setState(2389);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case AtemParser::QuotedMultiLineText: {
              setState(2378);
              match(AtemParser::QuotedMultiLineText);
              break;
            }

            case AtemParser::InterpolataionMultiLine: {
              setState(2379);
              match(AtemParser::InterpolataionMultiLine);
              setState(2385);
              _errHandler->sync(this);
              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx)) {
              case 1: {
                setState(2380);
                expression(0);
                break;
              }

              case 2: {
                setState(2381);
                tuple_element();
                setState(2382);
                match(AtemParser::Comma);
                setState(2383);
                tuple_element_list();
                break;
              }

              default:
                break;
              }
              setState(2387);
              match(AtemParser::RightCurly);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(2393);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2394);
        match(AtemParser::MultiLineStringClose);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternContext ------------------------------------------------------------------

AtemParser::PatternContext::PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t AtemParser::PatternContext::getRuleIndex() const {
  return AtemParser::RulePattern;
}

void AtemParser::PatternContext::copyFrom(PatternContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Optional_pattern_Context ------------------------------------------------------------------

AtemParser::Optional_patternContext* AtemParser::Optional_pattern_Context::optional_pattern() {
  return getRuleContext<AtemParser::Optional_patternContext>(0);
}

AtemParser::Optional_pattern_Context::Optional_pattern_Context(PatternContext *ctx) { copyFrom(ctx); }

void AtemParser::Optional_pattern_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptional_pattern_(this);
}
void AtemParser::Optional_pattern_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptional_pattern_(this);
}
//----------------- Is_pattern_Context ------------------------------------------------------------------

tree::TerminalNode* AtemParser::Is_pattern_Context::KeywordIs() {
  return getToken(AtemParser::KeywordIs, 0);
}

AtemParser::Type_expressionContext* AtemParser::Is_pattern_Context::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

AtemParser::Is_pattern_Context::Is_pattern_Context(PatternContext *ctx) { copyFrom(ctx); }

void AtemParser::Is_pattern_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIs_pattern_(this);
}
void AtemParser::Is_pattern_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIs_pattern_(this);
}
//----------------- As_pattern_Context ------------------------------------------------------------------

AtemParser::PatternContext* AtemParser::As_pattern_Context::pattern() {
  return getRuleContext<AtemParser::PatternContext>(0);
}

tree::TerminalNode* AtemParser::As_pattern_Context::KeywordAs() {
  return getToken(AtemParser::KeywordAs, 0);
}

AtemParser::Type_expressionContext* AtemParser::As_pattern_Context::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

AtemParser::As_pattern_Context::As_pattern_Context(PatternContext *ctx) { copyFrom(ctx); }

void AtemParser::As_pattern_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAs_pattern_(this);
}
void AtemParser::As_pattern_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAs_pattern_(this);
}
//----------------- Value_binding_pattern_Context ------------------------------------------------------------------

AtemParser::Value_binding_patternContext* AtemParser::Value_binding_pattern_Context::value_binding_pattern() {
  return getRuleContext<AtemParser::Value_binding_patternContext>(0);
}

tree::TerminalNode* AtemParser::Value_binding_pattern_Context::Colon() {
  return getToken(AtemParser::Colon, 0);
}

AtemParser::Type_annotationContext* AtemParser::Value_binding_pattern_Context::type_annotation() {
  return getRuleContext<AtemParser::Type_annotationContext>(0);
}

AtemParser::Value_binding_pattern_Context::Value_binding_pattern_Context(PatternContext *ctx) { copyFrom(ctx); }

void AtemParser::Value_binding_pattern_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue_binding_pattern_(this);
}
void AtemParser::Value_binding_pattern_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue_binding_pattern_(this);
}
//----------------- Identifier_pattern_Context ------------------------------------------------------------------

AtemParser::Identifier_patternContext* AtemParser::Identifier_pattern_Context::identifier_pattern() {
  return getRuleContext<AtemParser::Identifier_patternContext>(0);
}

tree::TerminalNode* AtemParser::Identifier_pattern_Context::Colon() {
  return getToken(AtemParser::Colon, 0);
}

AtemParser::Type_annotationContext* AtemParser::Identifier_pattern_Context::type_annotation() {
  return getRuleContext<AtemParser::Type_annotationContext>(0);
}

AtemParser::Identifier_pattern_Context::Identifier_pattern_Context(PatternContext *ctx) { copyFrom(ctx); }

void AtemParser::Identifier_pattern_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier_pattern_(this);
}
void AtemParser::Identifier_pattern_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier_pattern_(this);
}
//----------------- Expression_pattern_Context ------------------------------------------------------------------

AtemParser::ExpressionContext* AtemParser::Expression_pattern_Context::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}

AtemParser::Expression_pattern_Context::Expression_pattern_Context(PatternContext *ctx) { copyFrom(ctx); }

void AtemParser::Expression_pattern_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_pattern_(this);
}
void AtemParser::Expression_pattern_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_pattern_(this);
}
//----------------- Enumerator_pattern_Context ------------------------------------------------------------------

AtemParser::Enumerator_patternContext* AtemParser::Enumerator_pattern_Context::enumerator_pattern() {
  return getRuleContext<AtemParser::Enumerator_patternContext>(0);
}

AtemParser::Enumerator_pattern_Context::Enumerator_pattern_Context(PatternContext *ctx) { copyFrom(ctx); }

void AtemParser::Enumerator_pattern_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerator_pattern_(this);
}
void AtemParser::Enumerator_pattern_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerator_pattern_(this);
}
//----------------- Wildcard_pattern_Context ------------------------------------------------------------------

AtemParser::Wildcard_patternContext* AtemParser::Wildcard_pattern_Context::wildcard_pattern() {
  return getRuleContext<AtemParser::Wildcard_patternContext>(0);
}

tree::TerminalNode* AtemParser::Wildcard_pattern_Context::Colon() {
  return getToken(AtemParser::Colon, 0);
}

AtemParser::Type_annotationContext* AtemParser::Wildcard_pattern_Context::type_annotation() {
  return getRuleContext<AtemParser::Type_annotationContext>(0);
}

AtemParser::Wildcard_pattern_Context::Wildcard_pattern_Context(PatternContext *ctx) { copyFrom(ctx); }

void AtemParser::Wildcard_pattern_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWildcard_pattern_(this);
}
void AtemParser::Wildcard_pattern_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWildcard_pattern_(this);
}
//----------------- Tuple_pattern_Context ------------------------------------------------------------------

AtemParser::Tuple_patternContext* AtemParser::Tuple_pattern_Context::tuple_pattern() {
  return getRuleContext<AtemParser::Tuple_patternContext>(0);
}

AtemParser::Tuple_pattern_Context::Tuple_pattern_Context(PatternContext *ctx) { copyFrom(ctx); }

void AtemParser::Tuple_pattern_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTuple_pattern_(this);
}
void AtemParser::Tuple_pattern_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTuple_pattern_(this);
}

AtemParser::PatternContext* AtemParser::pattern() {
   return pattern(0);
}

AtemParser::PatternContext* AtemParser::pattern(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  AtemParser::PatternContext *_localctx = _tracker.createInstance<PatternContext>(_ctx, parentState);
  AtemParser::PatternContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 524;
  enterRecursionRule(_localctx, 524, AtemParser::RulePattern, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2419);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 286, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<Wildcard_pattern_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(2398);
      wildcard_pattern();
      setState(2401);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
      case 1: {
        setState(2399);
        match(AtemParser::Colon);
        setState(2400);
        type_annotation();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<Identifier_pattern_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2403);
      identifier_pattern();
      setState(2406);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 284, _ctx)) {
      case 1: {
        setState(2404);
        match(AtemParser::Colon);
        setState(2405);
        type_annotation();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<Value_binding_pattern_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2408);
      value_binding_pattern();
      setState(2411);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 285, _ctx)) {
      case 1: {
        setState(2409);
        match(AtemParser::Colon);
        setState(2410);
        type_annotation();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<Tuple_pattern_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2413);
      tuple_pattern();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<Enumerator_pattern_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2414);
      enumerator_pattern();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<Optional_pattern_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2415);
      optional_pattern();
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<Is_pattern_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2416);
      match(AtemParser::KeywordIs);
      setState(2417);
      type_expression(0);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<Expression_pattern_Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2418);
      expression(0);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(2426);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 287, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<As_pattern_Context>(_tracker.createInstance<PatternContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RulePattern);
        setState(2421);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2422);
        match(AtemParser::KeywordAs);
        setState(2423);
        type_expression(0); 
      }
      setState(2428);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 287, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Tuple_pattern_element_listContext ------------------------------------------------------------------

AtemParser::Tuple_pattern_element_listContext::Tuple_pattern_element_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AtemParser::Tuple_pattern_elementContext *> AtemParser::Tuple_pattern_element_listContext::tuple_pattern_element() {
  return getRuleContexts<AtemParser::Tuple_pattern_elementContext>();
}

AtemParser::Tuple_pattern_elementContext* AtemParser::Tuple_pattern_element_listContext::tuple_pattern_element(size_t i) {
  return getRuleContext<AtemParser::Tuple_pattern_elementContext>(i);
}

std::vector<tree::TerminalNode *> AtemParser::Tuple_pattern_element_listContext::Comma() {
  return getTokens(AtemParser::Comma);
}

tree::TerminalNode* AtemParser::Tuple_pattern_element_listContext::Comma(size_t i) {
  return getToken(AtemParser::Comma, i);
}


size_t AtemParser::Tuple_pattern_element_listContext::getRuleIndex() const {
  return AtemParser::RuleTuple_pattern_element_list;
}

void AtemParser::Tuple_pattern_element_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTuple_pattern_element_list(this);
}

void AtemParser::Tuple_pattern_element_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTuple_pattern_element_list(this);
}

AtemParser::Tuple_pattern_element_listContext* AtemParser::tuple_pattern_element_list() {
  Tuple_pattern_element_listContext *_localctx = _tracker.createInstance<Tuple_pattern_element_listContext>(_ctx, getState());
  enterRule(_localctx, 526, AtemParser::RuleTuple_pattern_element_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2429);
    tuple_pattern_element();
    setState(2434);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2430);
        match(AtemParser::Comma);
        setState(2431);
        tuple_pattern_element(); 
      }
      setState(2436);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx);
    }
    setState(2438);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AtemParser::Comma) {
      setState(2437);
      match(AtemParser::Comma);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tuple_pattern_elementContext ------------------------------------------------------------------

AtemParser::Tuple_pattern_elementContext::Tuple_pattern_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::PatternContext* AtemParser::Tuple_pattern_elementContext::pattern() {
  return getRuleContext<AtemParser::PatternContext>(0);
}

tree::TerminalNode* AtemParser::Tuple_pattern_elementContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}

tree::TerminalNode* AtemParser::Tuple_pattern_elementContext::Colon() {
  return getToken(AtemParser::Colon, 0);
}


size_t AtemParser::Tuple_pattern_elementContext::getRuleIndex() const {
  return AtemParser::RuleTuple_pattern_element;
}

void AtemParser::Tuple_pattern_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTuple_pattern_element(this);
}

void AtemParser::Tuple_pattern_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTuple_pattern_element(this);
}

AtemParser::Tuple_pattern_elementContext* AtemParser::tuple_pattern_element() {
  Tuple_pattern_elementContext *_localctx = _tracker.createInstance<Tuple_pattern_elementContext>(_ctx, getState());
  enterRule(_localctx, 528, AtemParser::RuleTuple_pattern_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2444);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2440);
      pattern(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2441);
      match(AtemParser::Identifier);
      setState(2442);
      match(AtemParser::Colon);
      setState(2443);
      pattern(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Wildcard_patternContext ------------------------------------------------------------------

AtemParser::Wildcard_patternContext::Wildcard_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Wildcard_patternContext::Underscore() {
  return getToken(AtemParser::Underscore, 0);
}


size_t AtemParser::Wildcard_patternContext::getRuleIndex() const {
  return AtemParser::RuleWildcard_pattern;
}

void AtemParser::Wildcard_patternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWildcard_pattern(this);
}

void AtemParser::Wildcard_patternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWildcard_pattern(this);
}

AtemParser::Wildcard_patternContext* AtemParser::wildcard_pattern() {
  Wildcard_patternContext *_localctx = _tracker.createInstance<Wildcard_patternContext>(_ctx, getState());
  enterRule(_localctx, 530, AtemParser::RuleWildcard_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2446);
    match(AtemParser::Underscore);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Identifier_patternContext ------------------------------------------------------------------

AtemParser::Identifier_patternContext::Identifier_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Identifier_patternContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}


size_t AtemParser::Identifier_patternContext::getRuleIndex() const {
  return AtemParser::RuleIdentifier_pattern;
}

void AtemParser::Identifier_patternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier_pattern(this);
}

void AtemParser::Identifier_patternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier_pattern(this);
}

AtemParser::Identifier_patternContext* AtemParser::identifier_pattern() {
  Identifier_patternContext *_localctx = _tracker.createInstance<Identifier_patternContext>(_ctx, getState());
  enterRule(_localctx, 532, AtemParser::RuleIdentifier_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2448);
    match(AtemParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Value_binding_patternContext ------------------------------------------------------------------

AtemParser::Value_binding_patternContext::Value_binding_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Value_binding_patternContext::KeywordLet() {
  return getToken(AtemParser::KeywordLet, 0);
}

tree::TerminalNode* AtemParser::Value_binding_patternContext::KeywordVar() {
  return getToken(AtemParser::KeywordVar, 0);
}

AtemParser::PatternContext* AtemParser::Value_binding_patternContext::pattern() {
  return getRuleContext<AtemParser::PatternContext>(0);
}


size_t AtemParser::Value_binding_patternContext::getRuleIndex() const {
  return AtemParser::RuleValue_binding_pattern;
}

void AtemParser::Value_binding_patternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue_binding_pattern(this);
}

void AtemParser::Value_binding_patternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue_binding_pattern(this);
}

AtemParser::Value_binding_patternContext* AtemParser::value_binding_pattern() {
  Value_binding_patternContext *_localctx = _tracker.createInstance<Value_binding_patternContext>(_ctx, getState());
  enterRule(_localctx, 534, AtemParser::RuleValue_binding_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2455);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2450);
      match(AtemParser::KeywordLet);
      setState(2451);
      match(AtemParser::KeywordVar);
      setState(2452);
      pattern(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2453);
      match(AtemParser::KeywordLet);
      setState(2454);
      pattern(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tuple_patternContext ------------------------------------------------------------------

AtemParser::Tuple_patternContext::Tuple_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Tuple_patternContext::LeftParenthese() {
  return getToken(AtemParser::LeftParenthese, 0);
}

tree::TerminalNode* AtemParser::Tuple_patternContext::RightParenthese() {
  return getToken(AtemParser::RightParenthese, 0);
}

AtemParser::Tuple_pattern_element_listContext* AtemParser::Tuple_patternContext::tuple_pattern_element_list() {
  return getRuleContext<AtemParser::Tuple_pattern_element_listContext>(0);
}


size_t AtemParser::Tuple_patternContext::getRuleIndex() const {
  return AtemParser::RuleTuple_pattern;
}

void AtemParser::Tuple_patternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTuple_pattern(this);
}

void AtemParser::Tuple_patternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTuple_pattern(this);
}

AtemParser::Tuple_patternContext* AtemParser::tuple_pattern() {
  Tuple_patternContext *_localctx = _tracker.createInstance<Tuple_patternContext>(_ctx, getState());
  enterRule(_localctx, 536, AtemParser::RuleTuple_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2457);
    match(AtemParser::LeftParenthese);
    setState(2459);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx)) {
    case 1: {
      setState(2458);
      tuple_pattern_element_list();
      break;
    }

    default:
      break;
    }
    setState(2461);
    match(AtemParser::RightParenthese);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumerator_patternContext ------------------------------------------------------------------

AtemParser::Enumerator_patternContext::Enumerator_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Enumerator_patternContext::Dot() {
  return getToken(AtemParser::Dot, 0);
}

AtemParser::Enumerator_nameContext* AtemParser::Enumerator_patternContext::enumerator_name() {
  return getRuleContext<AtemParser::Enumerator_nameContext>(0);
}

AtemParser::Type_expressionContext* AtemParser::Enumerator_patternContext::type_expression() {
  return getRuleContext<AtemParser::Type_expressionContext>(0);
}

AtemParser::Tuple_patternContext* AtemParser::Enumerator_patternContext::tuple_pattern() {
  return getRuleContext<AtemParser::Tuple_patternContext>(0);
}


size_t AtemParser::Enumerator_patternContext::getRuleIndex() const {
  return AtemParser::RuleEnumerator_pattern;
}

void AtemParser::Enumerator_patternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerator_pattern(this);
}

void AtemParser::Enumerator_patternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerator_pattern(this);
}

AtemParser::Enumerator_patternContext* AtemParser::enumerator_pattern() {
  Enumerator_patternContext *_localctx = _tracker.createInstance<Enumerator_patternContext>(_ctx, getState());
  enterRule(_localctx, 538, AtemParser::RuleEnumerator_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2464);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4555424008199784432) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 467856678106178055) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 1063429) != 0)) {
      setState(2463);
      type_expression(0);
    }
    setState(2466);
    match(AtemParser::Dot);
    setState(2467);
    enumerator_name();
    setState(2469);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx)) {
    case 1: {
      setState(2468);
      tuple_pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Optional_patternContext ------------------------------------------------------------------

AtemParser::Optional_patternContext::Optional_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AtemParser::Optional_patternContext::Identifier() {
  return getToken(AtemParser::Identifier, 0);
}

tree::TerminalNode* AtemParser::Optional_patternContext::Question() {
  return getToken(AtemParser::Question, 0);
}


size_t AtemParser::Optional_patternContext::getRuleIndex() const {
  return AtemParser::RuleOptional_pattern;
}

void AtemParser::Optional_patternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptional_pattern(this);
}

void AtemParser::Optional_patternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptional_pattern(this);
}

AtemParser::Optional_patternContext* AtemParser::optional_pattern() {
  Optional_patternContext *_localctx = _tracker.createInstance<Optional_patternContext>(_ctx, getState());
  enterRule(_localctx, 540, AtemParser::RuleOptional_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2471);
    match(AtemParser::Identifier);
    setState(2472);
    match(AtemParser::Question);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_patternContext ------------------------------------------------------------------

AtemParser::Expression_patternContext::Expression_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AtemParser::ExpressionContext* AtemParser::Expression_patternContext::expression() {
  return getRuleContext<AtemParser::ExpressionContext>(0);
}


size_t AtemParser::Expression_patternContext::getRuleIndex() const {
  return AtemParser::RuleExpression_pattern;
}

void AtemParser::Expression_patternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_pattern(this);
}

void AtemParser::Expression_patternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AtemParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_pattern(this);
}

AtemParser::Expression_patternContext* AtemParser::expression_pattern() {
  Expression_patternContext *_localctx = _tracker.createInstance<Expression_patternContext>(_ctx, getState());
  enterRule(_localctx, 542, AtemParser::RuleExpression_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2474);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool AtemParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 205: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);
    case 219: return type_expressionSempred(antlrcpp::downCast<Type_expressionContext *>(context), predicateIndex);
    case 262: return patternSempred(antlrcpp::downCast<PatternContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool AtemParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 54);
    case 1: return precpred(_ctx, 49);
    case 2: return precpred(_ctx, 47);
    case 3: return precpred(_ctx, 43);
    case 4: return precpred(_ctx, 42);
    case 5: return precpred(_ctx, 37);
    case 6: return precpred(_ctx, 36);
    case 7: return precpred(_ctx, 34);
    case 8: return precpred(_ctx, 10);
    case 9: return precpred(_ctx, 53);
    case 10: return precpred(_ctx, 51);
    case 11: return precpred(_ctx, 50);
    case 12: return precpred(_ctx, 48);
    case 13: return precpred(_ctx, 44);
    case 14: return precpred(_ctx, 40);
    case 15: return precpred(_ctx, 31);
    case 16: return precpred(_ctx, 29);
    case 17: return precpred(_ctx, 27);
    case 18: return precpred(_ctx, 25);
    case 19: return precpred(_ctx, 13);
    case 20: return precpred(_ctx, 12);
    case 21: return precpred(_ctx, 9);
    case 22: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool AtemParser::type_expressionSempred(Type_expressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 23: return precpred(_ctx, 21);
    case 24: return precpred(_ctx, 13);

  default:
    break;
  }
  return true;
}

bool AtemParser::patternSempred(PatternContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 25: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

void AtemParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  atemparserParserInitialize();
#else
  ::antlr4::internal::call_once(atemparserParserOnceFlag, atemparserParserInitialize);
#endif
}
